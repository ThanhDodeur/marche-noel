{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","utils/utils.js","components/NavBar/NavBar.js","components/Popups/Popups.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/DayForm/DayForm.js","components/EventForm/EventForm.js","components/HelpBox/HelpBox.js","components/Marche/Marche.js","App.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","lastId","newId","prefix","times","x","f","zip","arr1","arr2","map","k","i","rounded","num","decimal","Number","exp","Math","abs","round","EPSILON","pow","cancelArrays","lowestLength","min","length","arrs","newArrs","ascSortedArrs","lowIndex","highIndex","element","includes","splice","indexOf","download","data","filename","type","file","Blob","window","navigator","msSaveOrOpenBlob","a","document","createElement","url","URL","createObjectURL","href","body","appendChild","click","setTimeout","removeChild","revokeObjectURL","formattedDate","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","hh","getHours","getMinutes","NavBar","buttons","useState","burgerOpen","setBurgerOpen","onClick","value","index","role","key","callBack","fa","content","Popups","messageIds","messages","messageId","message","title","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dayAccounting","dayName","dailyLoss","tombolaTickets","customersAverage","obtainedAverage","PageData","days","costTotal","suppliers","openDay","supplierTotal","dailyAccounting","ticketPrice","soldTickets","supplierTuples","entries","sort","b","total","values","computeTotal","getBenefices","dailyArray","totalSpendings","totalObtained","totalCustomers","getStats","tuple","getSupplierLadder","dayIndex","getContent","defaultChange","FileInput","label","onChange","rest","style","display","e","target","files","DayForm","dayRawData","save","addMessage","missedTransactions","concat","setCustomers","newCustomer","setNewCustomer","setSuppliers","newSupplier","setNewSupplier","undefined","setFile","setDayAccounting","customerFirstInput","useRef","supplierFirstInput","_readFile","blob","reader","FileReader","readAsText","Promise","resolve","onload","result","_addMessage","_readPage","page","lines","split","shift","newCustomers","newSuppliers","currentLine","push","_saveRow","newCustomerlocal","local","newSupplierlocal","onCustomerGroupInputKeyDown","current","focus","onCustomerLastBoxKeyDown","stopPropagation","preventDefault","onFileInputChange","name","onSupplierGroupInputKeyDown","onSupplierLastBoxKeyDown","setCustomerValue","colIndex","localCustomers","localNewCustomer","setSupplierValue","localSuppliers","localNewSupplier","setTombolaTicket","val","currentTarget","input","getElementsByTagName","onFileInputWrapperClick","pattern","event","customer","localMissedTransactions","paidSurplus","onKeyDown","ref","supplier","suppliedSurplus","EventForm","eventExpenses","eventExpensesState","setEventExpensesState","ticketP","setTicketP","EXPENSE_TYPES","getExpenseValue","expense","useEffect","accountingState","assign","setExpense","HelpBox","showVideo","setShowVideo","width","height","Marche","_loadSave","saveName","saved","localStorage","getItem","setState","JSON","parse","_computeResults","_saveState","setItem","stringify","daysRawData","state","_processDays","missedPaymentsByDay","missedTransactionsByDay","duration","id","popupIds","popups","newPopupIds","filter","filterId","newPopups","dayRaw","computedDay","_computeDay","forEach","rawCustomers","rawSuppliers","customerKeys","paid","paymentTransactions","recievedTransactions","supplied","rawCustomer","paidValue","price","supplierId","rawSupplier","suppliedValue","_computeDailyStats","customersTotal","obtainedTotal","customerEntries","customerPaid","customerSupplied","balance","clearAll","fromEntries","DAYS","Array","fill","showDayForm","toggleReset","onClickLoad","toggleLoad","onClickSave","toggleSave","onClickSaveFile","onClose","saveObject","onSaveDayForm","onSaveEventForm","toggleDay","isSameDay","showForm","toggleEventForm","isOpen","toggleHelp","displayHelp","loadRequested","resetRequested","saveRequested","addEventListener","this","removeEventListener","resetButtons","saveButtons","loadButtons","_getButtons","React","Component","App","open","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e3a9872e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","let lastId = 0;\r\n\r\nexport { newId, times, zip, rounded, cancelArrays, download, formattedDate }\r\n\r\n/**\r\n * generates a unique new id combining the prefix with a new <Number>, numbers are consecutive.\r\n *\r\n * @param {*} [prefix]\r\n * @returns {String}\r\n */\r\nfunction newId(prefix='id') {\r\n    lastId++;\r\n    return `${prefix}${lastId}`;\r\n}\r\n/**\r\n * times(10) (() => console.log('a')) this call will call console.log('a') 10 times.\r\n *\r\n * @param {Number} x the amount of time to call the callback function 'f'\r\n * @returns {function} the function takes a callback 'f' as argument to be called x times.\r\n */\r\nfunction times(x) {\r\n    return (f) => {\r\n        if (x > 0) {\r\n            f()\r\n            times (x - 1) (f)\r\n        }\r\n    }\r\n}\r\n/**\r\n * Equivalent to Python's Zip function, useful to merge two arrays into an array of Tuples to feed an Object.fromEntries()\r\n *\r\n * @param {*} arr1\r\n * @param {*} arr2\r\n * @returns {Array<Tuples>} [[arr1[0], arr2[0]], [arr1[1], arr2[1]], [arr1[2], arr2[2]], [...]]\r\n */\r\nfunction zip(arr1, arr2) {\r\n    return arr1.map((k, i) => [k, arr2[i]]);\r\n}\r\n/**\r\n * rounded(456, 3) => 456\r\n * rounded(234.1235632, 3) => 234.124\r\n * Essentially a toFixed() that doesn't generate unnecessary 0's.\r\n *\r\n * @param {Number} num the <Number> to round.\r\n * @param {Number} [decimal] the amount of decimal digits, defaults to 3.\r\n * @returns {Number} returns num rounded to the 3rd decimal, if necessary.\r\n */\r\nfunction rounded(num, decimal=3) {\r\n    if (!num) return 0;\r\n    num = Number(num);\r\n    const exp = Math.abs(decimal);\r\n    return Math.round((num + Number.EPSILON) * Math.pow(10, exp)) / Math.pow(10, exp);\r\n}\r\n/**\r\n * function used to cancel two arrays, the values uniquely in common between the two arrays are removed from both arrays.\r\n *\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @returns {Array<Array>} [arr1, arr2]\r\n */\r\nfunction cancelArrays(arr1, arr2) {\r\n    const lowestLength = Math.min(arr1.length, arr2.length);\r\n    const arrs = [arr1, arr2];\r\n    const newArrs = [[...arr1], [...arr2]];\r\n    const ascSortedArrs = arrs[0].length === lowestLength ? [0, 1] : [1, 0];\r\n    const lowIndex = ascSortedArrs[0];\r\n    const highIndex = ascSortedArrs[1];\r\n    for (let i = 0; i < lowestLength; i++) {\r\n        const element = arrs[lowIndex][i];\r\n        if (arrs[highIndex].includes(element)) {\r\n            newArrs[0].splice(newArrs[0].indexOf(element), 1);\r\n            newArrs[1].splice(newArrs[1].indexOf(element), 1);\r\n        }\r\n    }\r\n    return newArrs;\r\n}\r\n/**\r\n * function from https://stackoverflow.com/a/30832210\r\n *\r\n * @param {*} data\r\n * @param {String} filename\r\n * @param {String} type mimetype\r\n */\r\nfunction download(data, filename, type) {\r\n    const file = new Blob([data], {type: type});\r\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n        window.navigator.msSaveOrOpenBlob(file, filename);\r\n    else { // Others\r\n        const a = document.createElement(\"a\"),\r\n                url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(function() {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }, 0);\r\n    }\r\n}\r\n\r\nfunction formattedDate() {\r\n    const today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const yyyy = today.getFullYear();\r\n    const hh = today.getHours();\r\n    const min = today.getMinutes();\r\nreturn `${dd}-${mm}-${yyyy}-${hh}h${min}`;\r\n}","import React, { useState } from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    const [burgerOpen, setBurgerOpen] = useState(false);\r\n\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"hamburger\" onClick={() => {setBurgerOpen(!burgerOpen)}}>\r\n                <div className=\"line\"/>\r\n                <div className=\"line\"/>\r\n                <div className=\"line\"/>\r\n            </div>\r\n            <div className={\"nav-buttons \" + (burgerOpen? 'open' : '')}>\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div role=\"button\" key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Popups.css\";\r\n\r\nfunction Popups({ messageIds, messages }) {\r\n\r\n    return (\r\n        <div className=\"popups\">\r\n            {messageIds.map((messageId) => {\r\n                const message = messages[messageId];\r\n                return (\r\n                    <div key={messageId} className={\"popup \" + message.type}>\r\n                        <span>{message.title}</span>\r\n                        {message.content}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popups;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {rounded(customers[customerId].paidTotal, 3)}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {rounded(customers[customerId].suppliedTotal, 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {rounded(missedPayments[customerId], 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dayAccounting }) {\r\n    if (!Object.keys(day.customers).length) {\r\n        return (<div></div>);\r\n    }\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {rounded(day.dailyLoss, 3)}€</div>\r\n                <div>Tickets de tombola vendus: {dayAccounting.tombolaTickets}</div>\r\n                <div>Moyenne des dépenses des clients: {rounded((day.customersAverage || 0), 3)}€</div>\r\n                <div>Moyenne des objets reçu par les clients: {rounded((day.obtainedAverage || 0), 3)}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, suppliers, openDay, supplierTotal, dailyAccounting, ticketPrice }) {\r\n\r\n    function getContent() {\r\n        let soldTickets = 0;\r\n        const supplierTuples = Object.entries(suppliers);\r\n        supplierTuples.sort((a, b) => {\r\n            if (a[1].total < b[1].total) {\r\n                return 1;\r\n            }\r\n            if (a[1].total > b[1].total) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += Number(value.tombolaTickets) || 0;\r\n        }\r\n        return(\r\n            <div className=\"content\">\r\n                {getBenefices(soldTickets)}\r\n                {getStats(soldTickets)}\r\n                {!!supplierTuples.length && getSupplierLadder(supplierTuples)}\r\n                {getDayData()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getDayData() {\r\n        return(\r\n            <div>\r\n                {days.map((value, dayIndex) => {\r\n                    if (!(openDay && openDay !== value.dayName)) {\r\n                        return(<DayData day={value} key={dayIndex} dayAccounting={dailyAccounting[value.dayName]} index={dayIndex}/>);\r\n                    } else {\r\n                        return(<div key={'empty_'+dayIndex}/>)\r\n                    }\r\n                })}\r\n            </div>)\r\n    }\r\n\r\n    function getSupplierLadder(supplierTuples) {\r\n        return (\r\n            <div className=\"global-stats\">\r\n            <h3>Classement des fournisseurs</h3>\r\n                {supplierTuples && supplierTuples.map((tuple, index) => {\r\n                    return(\r\n                        <div className=\"ladder-entry\">\r\n                            <span>{index+1}.</span>\r\n                            <span>[{tuple[0]}]</span>\r\n                            <span className=\"value\">{rounded(tuple[1].total, 3)}€</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getStats(soldTickets) {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalObtained = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage || 0;\r\n            totalObtained += day.obtainedAverage || 0;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div className=\"global-stats\">\r\n                <h3>Statistiques (sur {days.length} jour(s))</h3>\r\n                <div className=\"daily-stats\">\r\n                    <div><span>Moyenne payée par les clients:</span> <span className=\"value-display\">{rounded((totalSpendings / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Moyenne des articles reçu:</span> <span className=\"value-display\">{rounded((totalObtained / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Tickets de tombola Vendus:</span> <span className=\"value-display\">{soldTickets}</span></div>\r\n                    <div><span>Quantité de fiches payées:</span> <span className=\"value-display\">{totalCustomers}</span></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getBenefices(soldTickets) {\r\n        return (\r\n            <div className=\"global-stats profits\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span className=\"value-display\">{rounded(supplierTotal, 3)}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{soldTickets} x {ticketPrice}€: </span><span className=\"value-display\">{rounded(ticketPrice * (soldTickets), 3)}€ </span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais: </span><span className=\"value-display\">-{rounded(costTotal, 3)}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché: </span><span className=\"value-display\">{rounded(computeTotal(soldTickets), 3)}€</span></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function computeTotal(soldTickets) {\r\n        return (supplierTotal + (ticketPrice * (soldTickets))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div>{getContent()}</div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useRef } from \"react\";\r\nimport FileInput from \"../FileInput/FileInput.js\";\r\nimport { times } from \"../../utils/utils.js\";\r\nimport \"./DayForm.css\";\r\n\r\n/*\r\n * dayRawData = { customers: [], suppliers: [] }\r\n */\r\nfunction DayForm({\r\n    day,\r\n    dayRawData = {},\r\n    save,\r\n    addMessage,\r\n    dailyAccounting,\r\n    missedTransactions,\r\n}) {\r\n    const [customers, setCustomers] = useState([].concat(dayRawData.customers));\r\n    const [newCustomer, setNewCustomer] = useState([]);\r\n    const [suppliers, setSuppliers] = useState([].concat(dayRawData.suppliers));\r\n    const [newSupplier, setNewSupplier] = useState([]);\r\n    const [file, setFile] = useState(undefined);\r\n    const [dayAccounting, setDayAccounting] = useState(dailyAccounting);\r\n    const customerFirstInput = useRef(null);\r\n    const supplierFirstInput = useRef(null);\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {blob} blob\r\n     * @return {file}\r\n     */\r\n    const _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage(\"ERREUR\", error.message, \"error\");\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Generates the raw daily data. A simple Array<Array> that represents two grids of entries (suppliers, customers).\r\n     *\r\n     * @param {String} page returned by a fileReader in \"reader.readAsText\"\r\n     */\r\n    const _readPage = async (page) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/); // splits the page (String) into an array of line (Array<String>).\r\n        times(OFFSET_HEIGHT)(() => lines.shift());\r\n        // colNames\r\n        lines.shift().split(\",\"); // removes and saves column titles.\r\n\r\n        const newCustomers = [];\r\n        const newSuppliers = [];\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(\",\");\r\n\r\n            /* DATA FILL\r\n             *   paid\r\n             *   currentLine[0] purchase - customerId\r\n             *   currentLine[1] purchase - supplierId\r\n             *   currentLine[2] purchase - item Name\r\n             *   currentLine[3] purchase - item Price\r\n             *   supplied\r\n             *   currentLine[4] payment - supplierId\r\n             *   currentLine[5] payment - customerId\r\n             *   currentLine[6] payment - item Name\r\n             *   currentLine[7] payment - item Price\r\n             */\r\n\r\n            if (currentLine[0]) {\r\n                // CUSTOMER SIDE\r\n                newCustomers.push([\r\n                    Number(currentLine[0]),\r\n                    Number(currentLine[1]),\r\n                    currentLine[2],\r\n                    Number(currentLine[3]),\r\n                ]);\r\n            }\r\n            if (currentLine[4] && currentLine[5]) {\r\n                // SUPPLIER SIDE\r\n                newSuppliers.push([\r\n                    Number(currentLine[4]),\r\n                    Number(currentLine[5]),\r\n                    currentLine[6],\r\n                    Number(currentLine[7]),\r\n                ]);\r\n            }\r\n        }\r\n        return { newCustomers, newSuppliers };\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} type customer or supplier\r\n     */\r\n    const _saveRow = async (type) => {\r\n        let local;\r\n\r\n        if (type === \"customer\") {\r\n            const newCustomerlocal = newCustomer;\r\n            await setNewCustomer([\"\", \"\", \"\", \"\"]);\r\n            local = customers;\r\n            local.push(newCustomerlocal);\r\n            await setCustomers(local);\r\n        }\r\n        if (type === \"supplier\") {\r\n            const newSupplierlocal = newSupplier;\r\n            await setNewSupplier([\"\", \"\", \"\", \"\"]);\r\n            local = suppliers;\r\n            local.push(newSupplierlocal);\r\n            await setSuppliers(local);\r\n        }\r\n        await save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onCustomerGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    };\r\n    const onCustomerLastBoxKeyDown = async (e) => {\r\n        if (e.key === \"Tab\") {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    }\r\n    /**\r\n     * Handler for File Input onChange.\r\n     *\r\n     * @param {file[]} files\r\n     * @return {void}\r\n     */\r\n    const onFileInputChange = async (files) => {\r\n        const file = files[0];\r\n        if (!file.name.includes(\".csv\")) {\r\n            addMessage(\"ERREUR\", \"Le fichier doit être un .csv\", \"error\", 8000);\r\n            return;\r\n        }\r\n        await setFile(file);\r\n        const page = await _readFile(file);\r\n        const { newCustomers, newSuppliers } = await _readPage(page);\r\n        setCustomers(newCustomers);\r\n        setSuppliers(newSuppliers);\r\n        save(\r\n            day,\r\n            { customers: newCustomers, suppliers: newSuppliers },\r\n            dayAccounting\r\n        );\r\n    };\r\n    /**\r\n     *\r\n     * @param {mouseEvent} e\r\n     */\r\n    const onFileInputWrapperClick = (e) => {\r\n        // allows clicking on the file input from the outside element.\r\n        if (e.currentTarget !== e.target) {\r\n            return;\r\n        }\r\n        const input = e.currentTarget.getElementsByTagName(\"input\");\r\n        if (input.length) {\r\n            e.stopPropagation();\r\n            input[0].click();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onSupplierGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    };\r\n    const onSupplierLastBoxKeyDown = async (e) => {\r\n        if (e.key === \"Tab\") {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setCustomerValue = (index, colIndex, value) => {\r\n        const localCustomers = customers || [];\r\n\r\n        if (index === false) {\r\n            const localNewCustomer = newCustomer.map((value) => value || \"\");\r\n            localNewCustomer[colIndex] = value;\r\n            setNewCustomer(localNewCustomer);\r\n            return;\r\n        }\r\n\r\n        if (!localCustomers[index]) {\r\n            localCustomers[index] = [];\r\n        }\r\n        localCustomers[index][colIndex] = value;\r\n        setCustomers(localCustomers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setSupplierValue = (index, colIndex, value) => {\r\n        const localSuppliers = suppliers || [];\r\n\r\n        if (index === false) {\r\n            const localNewSupplier = newSupplier.map((value) => value || \"\");\r\n            localNewSupplier[colIndex] = value;\r\n            setNewSupplier(localNewSupplier);\r\n            return;\r\n        }\r\n\r\n        if (!localSuppliers[index]) {\r\n            localSuppliers[index] = [];\r\n        }\r\n        localSuppliers[index][colIndex] = value;\r\n        setSuppliers(localSuppliers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number || String} val the value of the input\r\n     */\r\n    const setTombolaTicket = async (val) => {\r\n        await setDayAccounting({ tombolaTickets: Number(val) });\r\n        await save(\r\n            day,\r\n            { customers, suppliers },\r\n            { tombolaTickets: Number(val) }\r\n        );\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    return (\r\n        <div className=\"content input-page noselect\">\r\n            <div className=\"title-area ml-10\">\r\n                <h1>{day}</h1>\r\n                <div\r\n                    role=\"button\"\r\n                    className=\"form-button\"\r\n                    onClick={(e) => onFileInputWrapperClick(e)}\r\n                >\r\n                    <FileInput\r\n                        label=\"Ajouter .csv\"\r\n                        className=\"noselect\"\r\n                        value={file}\r\n                        onChange={onFileInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className=\"ml-10\">Tickets de tombola vendus:</span>\r\n                <input\r\n                    className=\"number-input ml-10\"\r\n                    pattern=\"[0-9]*\"\r\n                    type=\"number\"\r\n                    onChange={(event) => {\r\n                        setTombolaTicket(event.target.value);\r\n                    }}\r\n                    value={dayAccounting.tombolaTickets}\r\n                />\r\n            </div>\r\n            <div className=\"area-container\">\r\n                <div\r\n                    className=\"group-input customers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {customers.map((customer, index) => {\r\n                        const localMissedTransactions = missedTransactions[customer[0]];\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"customer-row row saved-row \" +\r\n                                    (!!(\r\n                                        localMissedTransactions &&\r\n                                        localMissedTransactions.paidSurplus &&\r\n                                        localMissedTransactions.paidSurplus.includes(Number(customer[3]))\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"customer_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"customer-row row new-row\" onKeyDown={onCustomerGroupInputKeyDown}>\r\n                        <input\r\n                            ref={customerFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newCustomer[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newCustomer[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newCustomer[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onKeyDown={onCustomerLastBoxKeyDown}\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newCustomer[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        Appuier sur 'Tab' pour naviguer entre les cases.\r\n                        Appuier sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"group-input suppliers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {suppliers.map((supplier, index) => {\r\n                        const localMissedTransactions = missedTransactions[supplier[1]];\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"supplier-row row saved-row \" +\r\n                                    (!!(\r\n                                        localMissedTransactions &&\r\n                                        localMissedTransactions.suppliedSurplus &&\r\n                                        localMissedTransactions.suppliedSurplus.includes(Number(supplier[3]))\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"supplier_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"supplier-row row new-row\" onKeyDown={onSupplierGroupInputKeyDown}>\r\n                        <input\r\n                            ref={supplierFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newSupplier[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newSupplier[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newSupplier[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onKeyDown={onSupplierLastBoxKeyDown}\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newSupplier[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        Appuier sur 'Tab' pour naviguer entre les cases.\r\n                        Appuier sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm({ eventExpenses, ticketPrice, save }) {\r\n\r\n    const [eventExpensesState, setEventExpensesState] = useState(eventExpenses || {});\r\n    const [ticketP, setTicketP] = useState(ticketPrice || 0);\r\n\r\n    // the names are only relevant in this context, the parent component will just make a sum of all those expenses.\r\n    const EXPENSE_TYPES = ['Salle', 'Transactions', 'Assurance', 'Papeterie', 'Timbres', 'Courses', 'Traiteur', 'Schmitz', 'Autre'];\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            save({\r\n                eventExpenses: eventExpensesState,\r\n                ticketPrice: ticketP,\r\n            });\r\n        }\r\n    }, [save, eventExpensesState, ticketP]);\r\n\r\n\r\n    function setExpense(expense, value) {\r\n        const accountingState = Object.assign({}, eventExpensesState);\r\n        accountingState[expense] = value;\r\n        setEventExpensesState(accountingState);\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventExpensesState[expense] || 0;\r\n    }\r\n\r\n    function renderEventExpenses() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div key={'input_container_'+expense}>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketP(Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form noselect\">\r\n                {renderEventExpenses()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./HelpBox.css\";\r\n\r\nfunction HelpBox() {\r\n\r\n    const [showVideo, setShowVideo] = useState(false);\r\n\r\n    const toggleVideo = () => {\r\n        setShowVideo(!showVideo);\r\n    }\r\n\r\n    return (\r\n        <div className=\"help noselect\">\r\n            <div className=\"help-link ml-auto\">\r\n                <a\r\n                    className=\"help-text\"\r\n                    target=\"new\"\r\n                    href=\"https://docs.google.com/spreadsheets/d/1UKT38_RUa3MQ_HEGtWgaPKvedD35wYksaj7-T0sc9N8/edit?usp=sharing\"\r\n                >\r\n                    Format accepté\r\n                </a>\r\n                <i className=\"fa fa-file-excel-o\" />\r\n            </div>\r\n            <div className=\"help-link ml-auto\" onClick={toggleVideo}>\r\n                <u>Vidéo d'explication</u>\r\n                <i className=\"fa fa-play\" />\r\n            </div>\r\n            {!!showVideo &&\r\n                (\r\n                    <iframe title=\"help video\" src=\"https://drive.google.com/file/d/1hk40AsnzUJ7gUevslwSnfZGkSvyJ0OKu/preview\" width=\"900\" height=\"500\"/>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HelpBox;\r\n\r\n","import React from \"react\";\r\nimport \"./Marche.css\";\r\n\r\nimport { newId, zip, cancelArrays, download, formattedDate } from \"../../utils/utils.js\";\r\nimport NavBar from \"../NavBar/NavBar.js\";\r\nimport Popups from \"../Popups/Popups.js\";\r\nimport PageData from \"../PageData/PageData.js\";\r\nimport DayForm from \"../DayForm/DayForm.js\";\r\nimport EventForm from \"../EventForm/EventForm.js\";\r\nimport HelpBox from \"../HelpBox/HelpBox.js\";\r\nimport FileInput from \"../FileInput/FileInput.js\";\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.DAYS = [\"Vendredi\", \"Samedi\", \"Dimanche\"]; // const\r\n        this.state = {\r\n            daysRawData: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n            ),\r\n            days: [], // { dayName, customers, missedPayments, missedTransactions, dailyLoss, customersAverage, obtainedAverage }\r\n            missedPaymentsByDay: {}, // the total amount missed by customers (negative meaning that they paid too much)\r\n            missedTransactionsByDay: {}, // { dayName: { customerId: { paidSurplus: [], suppliedSurplus: [] } } } unresolved payments.\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false, // toggle for the confirm/cancel buttons for removing files\r\n            loadRequested: false,\r\n            saveRequested: false,\r\n            showForm: false, // toggle for the accounting/event input form\r\n            showDayForm: false, // false or this.DAYS[*]\r\n            displayHelp: false, // toggle the \"help\" box\r\n            eventExpenses: {}, // {expenseName: <int>amount}\r\n            dailyAccounting: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n            ), // { dayName: {valuesDict} }\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n            popupIds: [],\r\n            popups: {}, // {content, type}\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        window.addEventListener('beforeunload', this.onClose);\r\n        await this._loadSave('saved-state-auto');\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.onClose);\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Loads the save from the localStorage.\r\n     */\r\n    _loadSave = async (saveName) => {\r\n        const saved = localStorage.getItem(saveName);\r\n        if (saved) {\r\n            await this.setState(JSON.parse(saved));\r\n        }\r\n        await this._addMessage(\r\n            \"Chargé\",\r\n            \"La dernière sauvegarde à été chargée\",\r\n            \"info\",\r\n            2000\r\n        );\r\n        await this._computeResults();\r\n    };\r\n    /**\r\n     *\r\n     * @param {blob} blob\r\n     * @return {file}\r\n     */\r\n    _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage(\"ERREUR\", error.message, \"error\");\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Saves part of the state to the localStorage.\r\n     */\r\n    _saveState = async (saveName) => {\r\n        localStorage.setItem(\r\n            saveName,\r\n            JSON.stringify({\r\n                daysRawData: this.state.daysRawData,\r\n                eventExpenses: this.state.eventExpenses,\r\n                dailyAccounting: this.state.dailyAccounting,\r\n                ticketPrice: this.state.ticketPrice,\r\n                costTotal: this.state.costTotal,\r\n            })\r\n        );\r\n        await this._addMessage(\r\n            \"Sauvegardé\",\r\n            \"Les informations ont été sauvegardées\",\r\n            \"info\",\r\n            3000\r\n        );\r\n    };\r\n    /**\r\n     * processes the days and updates the state.\r\n     */\r\n    _computeResults = async () => {\r\n        const {\r\n            days,\r\n            suppliers,\r\n            supplierTotal,\r\n            missedPaymentsByDay,\r\n            missedTransactionsByDay,\r\n        } = await this._processDays();\r\n        await this.setState({\r\n            days,\r\n            suppliers,\r\n            supplierTotal,\r\n            missedPaymentsByDay,\r\n            missedTransactionsByDay,\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} title\r\n     * @param {String} content text content of the message\r\n     * @param {String} [type] info | error\r\n     * @param {Number} [duration] amount of ms\r\n     */\r\n    _addMessage = async (title, content, type='info', duration=5000) => {\r\n        const id = newId(\"message\");\r\n        await this.setState({\r\n            popupIds: this.state.popupIds.concat(id),\r\n            popups: Object.assign({}, this.state.popups, {\r\n                [id]: {\r\n                    title,\r\n                    content,\r\n                    type,\r\n                },\r\n            }),\r\n        });\r\n        setTimeout(async () => {\r\n            const newPopupIds = this.state.popupIds.filter((filterId) => {\r\n                return filterId !== id;\r\n            });\r\n            const newPopups = Object.assign({}, this.state.popups);\r\n            delete newPopups[id];\r\n            await this.setState({\r\n                popupIds: newPopupIds,\r\n                popups: newPopups,\r\n            });\r\n        }, duration);\r\n    };\r\n    /**\r\n     * Extracts values from day raw data (state.daysRawData).\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    _processDays = async () => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        let supplierTotal = 0;\r\n        let missedPaymentsByDay = this.state.missedPaymentsByDay;\r\n        let missedTransactionsByDay = this.state.missedTransactionsByDay;\r\n        for (const [dayName, dayRaw] of Object.entries(\r\n            this.state.daysRawData\r\n        )) {\r\n            const computedDay = this._computeDay({ dayName, dayRaw, suppliers });\r\n            suppliers = computedDay.suppliers;\r\n            missedPaymentsByDay[dayName] = computedDay.missedPayments;\r\n            missedTransactionsByDay[dayName] = computedDay.missedTransactions;\r\n            days.push(computedDay.day);\r\n        }\r\n        // computes the total gross sale revenue of the suppliers, across all days.\r\n        Object.values(suppliers).forEach((supplier) => (supplierTotal += supplier.total));\r\n        return { days, suppliers, supplierTotal, missedPaymentsByDay, missedTransactionsByDay };\r\n    };\r\n    /**\r\n     * Computes\r\n     *\r\n     * @param {Object} param0\r\n     * @param {String} param0.dayName\r\n     * @param {Object} param0.dayRaw\r\n     * @param {Object} param0.suppliers\r\n     */\r\n    _computeDay = ({ dayName, dayRaw, suppliers }) => {\r\n        /* DATA FILL from dayRaw\r\n         *   paid\r\n         *   rawCustomers[*][0] purchase - customerId\r\n         *   rawCustomers[*][1] purchase - supplierId\r\n         *   rawCustomers[*][2] purchase - item Name\r\n         *   rawCustomers[*][3] purchase - item Price\r\n         *   supplied\r\n         *   rawSuppliers[*][0] payment - supplierId\r\n         *   rawSuppliers[*][1] payment - customerId\r\n         *   rawSuppliers[*][2] payment - item Name\r\n         *   rawSuppliers[*][3] payment - item Price\r\n         *\r\n         *\r\n         * suppliers = { supplierId : { total } }\r\n         *\r\n         */\r\n        const rawCustomers = dayRaw.customers;\r\n        const rawSuppliers = dayRaw.suppliers;\r\n        const customers = {};\r\n        /*\r\n         * customerKeys dataStructure\r\n         * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n         * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n         * paymentTransactions: Number[],\r\n         * recievedTransactions: Number[],\r\n         */\r\n        const customerKeys = {\r\n            paid: [],\r\n            paidTotal: 0,\r\n            paymentTransactions: [],\r\n            recievedTransactions: [],\r\n            supplied: [],\r\n            suppliedTotal: 0,\r\n        };\r\n\r\n        for (const rawCustomer of rawCustomers) {\r\n            if (rawCustomer[0]) {\r\n                // CUSTOMER SIDE\r\n                // creates the customer if it doesn't already exist.\r\n                customers[rawCustomer[0]] = customers[rawCustomer[0]] || Object.assign({}, customerKeys);\r\n                // adds the total paid by the customer\r\n                const paidValue = Number(rawCustomer[3]);\r\n                customers[rawCustomer[0]].paidTotal += paidValue || 0;\r\n                customers[rawCustomer[0]].paymentTransactions.push(paidValue);\r\n                // adds a line for what the customer paid\r\n                customers[rawCustomer[0]].paid.push({\r\n                    name: rawCustomer[2],\r\n                    price: rawCustomer[3],\r\n                    supplierId: rawCustomer[1],\r\n                });\r\n            }\r\n        }\r\n        for (const rawSupplier of rawSuppliers) {\r\n            if (rawSupplier[0] && rawSupplier[1]) {\r\n                // SUPPLIER SIDE\r\n                customers[rawSupplier[1]] = customers[rawSupplier[1]] || Object.assign({}, customerKeys);\r\n                // adds the total paid by the customer\r\n                const suppliedValue = Number(rawSupplier[3]);\r\n                customers[rawSupplier[1]].suppliedTotal += suppliedValue || 0;\r\n                customers[rawSupplier[1]].recievedTransactions.push(suppliedValue);\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[rawSupplier[1]].supplied.push({\r\n                    name: rawSupplier[2],\r\n                    price: rawSupplier[3],\r\n                    supplierId: rawSupplier[0],\r\n                });\r\n                // computes the total value of supplied by the supplier.\r\n                suppliers[rawSupplier[0]] = suppliers[rawSupplier[0]] || {\r\n                    total: 0,\r\n                };\r\n                suppliers[rawSupplier[0]].total += Number(rawSupplier[3]) || 0;\r\n            }\r\n        }\r\n\r\n        const {\r\n            missedPayments,\r\n            missedTransactions,\r\n            dailyLoss,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        } = this._computeDailyStats(customers);\r\n        return {\r\n            day: {\r\n                dayName,\r\n                customers,\r\n                missedPayments,\r\n                missedTransactions,\r\n                dailyLoss,\r\n                customersAverage,\r\n                obtainedAverage,\r\n            },\r\n            suppliers,\r\n            missedPayments,\r\n            missedTransactions,\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} customers\r\n     */\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        const missedTransactions = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        let obtainedTotal = 0;\r\n\r\n        const customerEntries = Object.entries(customers)\r\n        for (const [customerId, customer] of customerEntries) {\r\n\r\n            // cancels the payment and receipt transactions to find out which one don't have an equivalent.\r\n            const [paidSurplus, suppliedSurplus] = cancelArrays(customer.paymentTransactions, customer.recievedTransactions);\r\n            missedTransactions[customerId] = { paidSurplus, suppliedSurplus };\r\n\r\n            // amounts that customers didn't pay (can be negative, in which case, the customer is owed money).\r\n            const customerPaid = customer.paidTotal;\r\n            const customerSupplied = customer.suppliedTotal;\r\n            const balance = customerSupplied - customerPaid;\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n            // daily totals\r\n            obtainedTotal += Number(customerSupplied);\r\n            customersTotal += Number(customerPaid);\r\n\r\n        }\r\n        const customersAverage = customersTotal / (customerEntries.length || 0);\r\n        const obtainedAverage = obtainedTotal / (customerEntries.length || 0);\r\n        return {\r\n            missedPayments,\r\n            missedTransactions,\r\n            dailyLoss,\r\n            customersTotal,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        };\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     */\r\n    clearAll = async () => {\r\n        await this.setState({\r\n            daysRawData: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n            ),\r\n            showDayForm: false,\r\n            eventExpenses: {},\r\n            dailyAccounting: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n            ),\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n        });\r\n        await this._computeResults();\r\n        await this._addMessage(\r\n            \"\",\r\n            \"Tout le contenu a été réinitialisé\",\r\n            \"error\",\r\n            5000\r\n        );\r\n        await this.toggleReset();\r\n    };\r\n    onClickLoad = async () => {\r\n        await this._loadSave('saved-state-manual');\r\n        await this.toggleLoad();\r\n    }\r\n    onClickSave = async () => {\r\n        await this._saveState('saved-state-manual');\r\n        await this.toggleSave();\r\n    }\r\n    onClickSaveFile = async () => {\r\n        const data = JSON.stringify({\r\n            daysRawData: this.state.daysRawData,\r\n            eventExpenses: this.state.eventExpenses,\r\n            dailyAccounting: this.state.dailyAccounting,\r\n            ticketPrice: this.state.ticketPrice,\r\n            costTotal: this.state.costTotal,\r\n        })\r\n        download(\r\n            data,\r\n            `marche-de-noel-${formattedDate()}.json`,\r\n            'text/html'\r\n        );\r\n        await this.toggleSave();\r\n    }\r\n    onClose = async () => {\r\n        await this._saveState('saved-state-auto');\r\n    }\r\n    onFileInputChange = async (file) => {\r\n        const save = await this._readFile(file[0]);\r\n        const saveObject = JSON.parse(save);\r\n        if (Object.keys(saveObject).includes('daysRawData')) {\r\n            await this.setState(saveObject);\r\n            await this._addMessage(\r\n                \"Chargé\",\r\n                \"Le fichier a bien été chargé\",\r\n                \"info\",\r\n                2000\r\n            );\r\n            await this._computeResults();\r\n            await this.toggleLoad();\r\n        } else {\r\n            this._addMessage(\r\n                \"ERREUR\",\r\n                \"Le fichier n'a pas pu être chargé\",\r\n                \"error\"\r\n                );\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {mouseEvent} e\r\n     */\r\n    onFileInputWrapperClick = (e) => {\r\n        // allows clicking on the file input from the outside element.\r\n        if (e.currentTarget !== e.target) {\r\n            return;\r\n        }\r\n        const input = e.currentTarget.getElementsByTagName(\"input\");\r\n        if (input.length) {\r\n            e.stopPropagation();\r\n            input[0].click();\r\n        }\r\n    };\r\n    /**\r\n     * This is a handler given to the DayForm to propagate the raw daily data to here.\r\n     *\r\n     * @param {String} day\r\n     * @param {Object} data\r\n     * @param {Object} dayAccounting The additional accounting informations related to 1 single day (currently being the amount of ticket sold)\r\n     */\r\n    onSaveDayForm = async (day, data, dayAccounting) => {\r\n        const daysRawData = Object.assign({}, this.state.daysRawData);\r\n        daysRawData[day] = data;\r\n        await this.setState({\r\n            daysRawData,\r\n            dailyAccounting: Object.assign(this.state.dailyAccounting, {\r\n                [day]: dayAccounting,\r\n            }),\r\n        });\r\n        await this._computeResults();\r\n    };\r\n    /**\r\n     * Handler for event form.\r\n     */\r\n    onSaveEventForm = async ({ eventExpenses, ticketPrice }) => {\r\n        let costTotal = 0;\r\n        Object.values(eventExpenses).forEach((val) => (costTotal += val));\r\n        await this.setState({ eventExpenses, ticketPrice, costTotal });\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} day\r\n     */\r\n    toggleDay = async (day) => {\r\n        const isSameDay = this.state.showDayForm === day;\r\n        await this.setState({ showDayForm: false, showForm: false });\r\n        if (!isSameDay) {\r\n            await this.setState({ showDayForm: day });\r\n        }\r\n    };\r\n    toggleEventForm = async () => {\r\n        const isOpen = this.state.showForm;\r\n        await this.setState({ showForm: !isOpen, showDayForm: false });\r\n        if (isOpen) {\r\n            this._computeResults();\r\n        }\r\n    };\r\n    toggleHelp = async () => {\r\n        await this.setState({ displayHelp: !this.state.displayHelp });\r\n    };\r\n    toggleLoad = async () => {\r\n        await this.setState({ loadRequested: !this.state.loadRequested });\r\n    };\r\n    toggleReset = async () => {\r\n        await this.setState({ resetRequested: !this.state.resetRequested });\r\n    };\r\n    toggleSave = async () => {\r\n        await this.setState({ saveRequested: !this.state.saveRequested });\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Generates the buttons to be given to the top nav-bar.\r\n     *\r\n     * @returns {Array} buttons\r\n     */\r\n    _getButtons() {\r\n        // ACCOUNTING\r\n        const buttons = [\r\n            {\r\n                className: (this.state.showForm ? \"active\" : \"\") + \" purple\",\r\n                fa: \"fa-eur\",\r\n                content: \"Comptabilité\",\r\n                callBack: this.toggleEventForm,\r\n            },\r\n        ];\r\n\r\n        // ADD DAYS\r\n        for (const day of this.DAYS) {\r\n            buttons.push({\r\n                className:\r\n                    (this.state.showDayForm === day ? \"active \" : \"\") +\r\n                    (this.state.daysRawData[day].customers.length\r\n                        ? \"green\"\r\n                        : \"alert\"),\r\n                fa: \"fa-calendar\",\r\n                callBack: () => {\r\n                    this.toggleDay(day);\r\n                },\r\n                content: day,\r\n            });\r\n        }\r\n\r\n        // COMPUTE\r\n        /*\r\n        if (Object.keys(this.state.daysRawData).length && !this.state.showForm && !this.state.resetRequested) {\r\n            buttons.push({ content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this._computeResults });\r\n        }\r\n        */\r\n\r\n        // RIGHT\r\n        buttons.push({\r\n            content: \"Aide\",\r\n            fa: \"fa-info-circle\",\r\n            className: \"blue order-2 ml-auto\",\r\n            callBack: this.toggleHelp,\r\n        });\r\n\r\n        // REMOVE FILES\r\n        if (!(this.state.saveRequested || this.state.loadRequested)) {\r\n            let resetButtons = [\r\n                {\r\n                    content: \"Tout effacer\",\r\n                    fa: \"fa-trash\",\r\n                    className: \"warning\",\r\n                    callBack: this.toggleReset,\r\n                },\r\n            ];\r\n            if (this.state.resetRequested) {\r\n                resetButtons = [\r\n                    {\r\n                        content: \"Annuler\",\r\n                        fa: \"fa-times\",\r\n                        className: \"green\",\r\n                        callBack: this.toggleReset,\r\n                    },\r\n                    {\r\n                        content: \"Confirmer: Effacer l'encodage en cours\",\r\n                        fa: \"fa-check\",\r\n                        className: \"alert\",\r\n                        callBack: this.clearAll,\r\n                    },\r\n                ];\r\n            }\r\n            buttons.push(...resetButtons);\r\n        }\r\n\r\n        // SAVE\r\n        let saveButtons = [\r\n            {\r\n                content: \"Sauvegarder\",\r\n                fa: \"fa-upload\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleSave,\r\n            },\r\n        ];\r\n        if (this.state.saveRequested) {\r\n            saveButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"alert\",\r\n                    callBack: this.toggleSave,\r\n                },\r\n                {\r\n                    content: \"Sauvegarde locale\",\r\n                    fa: \"fa-check\",\r\n                    className: \"warning\",\r\n                    callBack: this.onClickSave,\r\n                },\r\n                {\r\n                    content: \"Télécharger la sauvegarde\",\r\n                    fa: \"fa-check\",\r\n                    className: \"warning\",\r\n                    callBack: this.onClickSaveFile,\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.loadRequested) {\r\n            buttons.push(...saveButtons);\r\n        }\r\n\r\n        // LOAD\r\n        let loadButtons = [\r\n            {\r\n                content: \"Charcher\",\r\n                fa: \"fa-download\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleLoad,\r\n            },\r\n        ];\r\n        if (this.state.loadRequested) {\r\n            loadButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"alert\",\r\n                    callBack: this.toggleLoad,\r\n                },\r\n                {\r\n                    content: \"Charger sauvegarde locale\",\r\n                    fa: \"fa-check\",\r\n                    className: \"warning\",\r\n                    callBack: this.onClickLoad,\r\n                },\r\n                {\r\n                    fa: \"fa-check\",\r\n                    className: \"warning\",\r\n                    callBack: (e) => this.onFileInputWrapperClick(e),\r\n                    content: (<FileInput label={`\"Charger depuis un fichier .JSON\"`} className=\"noselect\" value={undefined} onChange={this.onFileInputChange} />)\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.saveRequested) {\r\n            buttons.push(...loadButtons);\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar buttons={this._getButtons()} />\r\n                {!!this.state.popupIds.length && (\r\n                    <Popups\r\n                        messageIds={this.state.popupIds}\r\n                        messages={this.state.popups}\r\n                    />\r\n                )}\r\n                {!!this.state.displayHelp && (\r\n                    <HelpBox/>\r\n                )}\r\n                {!!this.DAYS.includes(this.state.showDayForm) && (\r\n                    <DayForm\r\n                        day={this.state.showDayForm}\r\n                        dayRawData={\r\n                            this.state.daysRawData[this.state.showDayForm]\r\n                        }\r\n                        save={this.onSaveDayForm}\r\n                        addMessage={this._addMessage}\r\n                        missedTransactions={ this.state.missedTransactionsByDay[this.state.showDayForm] }\r\n                        dailyAccounting={\r\n                            this.state.dailyAccounting[this.state.showDayForm]\r\n                        }\r\n                    />\r\n                )}\r\n                {!!this.state.showForm ? (\r\n                    <EventForm\r\n                        eventExpenses={this.state.eventExpenses}\r\n                        ticketPrice={this.state.ticketPrice}\r\n                        save={this.onSaveEventForm}\r\n                    />\r\n                ) : (\r\n                    <PageData\r\n                        days={this.state.days}\r\n                        dailyAccounting={this.state.dailyAccounting}\r\n                        ticketPrice={this.state.ticketPrice}\r\n                        costTotal={this.state.costTotal}\r\n                        suppliers={this.state.suppliers}\r\n                        openDay={this.state.showDayForm}\r\n                        supplierTotal={this.state.supplierTotal}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState, useEffect } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function openApp() {\n        setState({ open: true });\n    }\n\n    useEffect(() => {\n        setTimeout(async () => {\n            setState({ open: true });\n        }, 15000);\n        // willMount\n        return () => {\n            // willUnMount\n        }\n    }, [setState]);\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={openApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// turn service worker off\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}