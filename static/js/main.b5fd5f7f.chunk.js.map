{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","components/NavBar/NavBar.js","components/FileInput/FileInput.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","NavBar","buttons","map","value","index","key","onClick","callBack","fa","content","defaultChange","FileInput","label","onChange","rest","style","display","type","e","target","files","multiple","Marche","_readFile","blob","a","reader","FileReader","readAsText","Promise","resolve","onload","result","_processFiles","newDays","suppliers","Object","assign","state","file","page","_computeFile","push","day","days","concat","setState","lines","split","Array","shift","customers","length","currentLine","supplied","paid","name","price","supplierId","total","Number","replace","missedPayments","_computeMissedPayments","onFileInputChange","computeResults","resetFiles","pages","toggleReset","resetRequested","resetButtons","this","_getButtons","React","Component","App","useState","open","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b5fd5f7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n                multiple\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState } from 'react';\r\nimport './Marche.css';\r\n\r\nimport NavBar from '../NavBar/NavBar.js';\r\nimport FileInput from '../FileInput/FileInput.js';\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            files: [],\r\n            days: [], // { customers, missedPayments }\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false,\r\n        };\r\n    }\r\n    /**\r\n    *\r\n    * @param {blob} blob\r\n    * @return {file}\r\n    */\r\n    _readFile = async (blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsText(blob);\r\n        return new Promise((resolve) => {\r\n            reader.onload = (e) => {\r\n                resolve(reader.result);\r\n            };\r\n        });\r\n    }\r\n    _processFiles = async (files) => {\r\n        const newDays = [];\r\n        let suppliers = Object.assign({}, this.state.suppliers);\r\n        for (const file of files) {\r\n            const page = await this._readFile(file);\r\n            const result = this._computeFile(page, suppliers);\r\n            suppliers = result.suppliers;\r\n            newDays.push(result.day);\r\n        }\r\n        const days = this.state.days.concat(newDays);\r\n        this.setState({ days, suppliers });\r\n    }\r\n    /**\r\n     * Expected structure of page:\r\n     *\r\n     * ,,,,,,... // row0\r\n     * numeroClient,Fournisseur,achat,numeroFournisseur,numeroClient,prix,total,... n-1, n // row x\r\n     * 600,65,objet,56,576,55,110,... n-1, n // row X+1\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * . . .\r\n     * .\r\n     * .\r\n     * where:\r\n     *  x = OFFSET_HEIGHT\r\n     *  x + 1 = column names\r\n     *  m = CLIENT_COLS\r\n     *  n - m = FOURNISSEUR_COLS\r\n     *\r\n     * @param {String} page open text file\r\n     * @return {Object}\r\n     */\r\n    _computeFile = (page, suppliers) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        for (const i of Array(OFFSET_HEIGHT)) {\r\n            lines.shift();\r\n        }\r\n        const colNames = lines.shift().split(','); // removes and saves column titles.\r\n        /*\r\n        *\r\n        * customers = { clientId: { supplied , paid } }\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        *\r\n        * suppliers = { supplierId : { total } }\r\n        *\r\n        */\r\n        const customers = {};\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(',');\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   currentLine[0] purchase - customerId\r\n            *   currentLine[1] purchase - supplierId\r\n            *   currentLine[2] purchase - item Name\r\n            *   currentLine[3] purchase - item Price\r\n            *   supplied\r\n            *   currentLine[4] payment - supplierId\r\n            *   currentLine[5] payment - customerId\r\n            *   currentLine[6] payment - item Name\r\n            *   currentLine[7] payment - item Price\r\n            */\r\n\r\n            if (currentLine[0]) {\r\n                // creates the customer if it doesn't already exist.\r\n                customers[currentLine[0]] = customers[currentLine[0]] || {\r\n                    supplied: [],\r\n                    paid: [],\r\n                };\r\n                // adds a line for what the customer paid\r\n                customers[currentLine[0]].paid.push({\r\n                    name: currentLine[2],\r\n                    price: currentLine[3],\r\n                    supplierId: currentLine[1],\r\n                });\r\n            }\r\n\r\n            if (currentLine[4] && currentLine[5]) {\r\n                customers[currentLine[5]] = customers[currentLine[5]] || {\r\n                    supplied: [],\r\n                    paid: [],\r\n                };\r\n                // adds a line for what the customer paid\r\n                customers[currentLine[5]].supplied.push({\r\n                    name: currentLine[6],\r\n                    price: currentLine[7],\r\n                    supplierId: currentLine[4],\r\n                });\r\n                suppliers[currentLine[4]] = suppliers[currentLine[4]] || { total: 0 };\r\n                suppliers[currentLine[4]].total += Number(currentLine[7].replace(',','.'));\r\n            }\r\n        }\r\n        const missedPayments = this._computeMissedPayments(customers);\r\n        return {day: { customers, missedPayments }, suppliers };\r\n    }\r\n    _computeMissedPayments = (customers) => {\r\n        return [];\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    _getButtons() {\r\n        let resetButtons = [{content: 'Retirer les fichiers', fa: 'fa-trash', className: 'warning', callBack: this.toggleReset}]\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {content: 'Annuler', fa: 'fa-times', className: 'green', callBack: this.toggleReset},\r\n                {content: 'Confirmer', fa: 'fa-check', className: 'alert', callBack: this.resetFiles},\r\n            ];\r\n        }\r\n        const buttons = [\r\n            {className: 'blue', fa: 'fa-upload', content: (<FileInput label={`Ajouter | jours: ${this.state.days.length}`} className=\"noselect\" value={this.state.files} onChange={this.onFileInputChange} />)},\r\n        ].concat(resetButtons);\r\n\r\n        if (this.state.days) {\r\n            buttons.push({content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this.computeResults});\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n    * Handler for File Input onChange.\r\n    *\r\n    * @param {file[]} files\r\n    * @return {void}\r\n    */\r\n   onFileInputChange = async (files) => {\r\n        this.state.files = files;\r\n        await this._processFiles(files);\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    computeResults = () => {\r\n        // add up expenses\r\n        // add up suppliers sale totals\r\n        return;\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    resetFiles = () => {\r\n        this.setState({days: [], pages: []});\r\n        this.toggleReset();\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    toggleReset = () => {\r\n        this.setState({ resetRequested: !this.state.resetRequested });\r\n    }\r\n    /**\r\n     * add encodage popup with button toggle\r\n     * location salle, location bancontact et frais de transaction, assurance, papetrie, timbres, courses restaurant, traiteur, schmitz\r\n     * form component with callback to change state here with new data.\r\n     *\r\n     * Add full data (all prices + price computation)\r\n     *\r\n     */\r\n    render() {\r\n        return <div>\r\n            <NavBar\r\n                buttons={this._getButtons()}\r\n            />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function updateState(updates) {\n        setState({ ...state, ...updates });\n    }\n\n    function toggleApp() {\n        setState({ open: !state.open });\n    }\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={toggleApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// turn service worker off\nserviceWorker.unregister();\n"],"sourceRoot":""}