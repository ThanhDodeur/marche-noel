{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","utils/utils.js","utils/constants.js","store/marche.js","components/NavBar/NavBar.js","components/Popups/Popups.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/DayForm/DayForm.js","components/EventForm/EventForm.js","components/HelpBox/HelpBox.js","components/Marche/Marche.js","App.js","utils/hooks.js","store/index.js","index.js"],"names":["module","exports","Accueil","callBack","className","onClick","src","logo","alt","lastId","newId","prefix","times","x","f","zip","arr1","arr2","map","k","i","rounded","num","decimal","Number","exp","Math","abs","round","EPSILON","pow","percent","max","floor","cancelArrays","lowestLength","min","length","arrs","newArrs","ascSortedArrs","lowIndex","highIndex","element","includes","splice","indexOf","DAYS","EXPENSE_TYPES","loadState","saved","localStorage","getItem","savedObject","JSON","parse","BLANK_STATE","daysRawData","Object","fromEntries","Array","fill","customers","suppliers","eventExpenses","dailyAccounting","tombolaTickets","costTotal","ticketPrice","days","missedPaymentsByDay","missedTransactionsByDay","supplierTotal","supplierRealGain","_processDays","entries","dayName","dayRaw","computedDay","_computeDay","missedPayments","missedTransactions","push","day","values","forEach","supplier","total","realGain","rawCustomers","rawSuppliers","customerKeys","paid","paidTotal","paymentTransactions","recievedTransactions","supplied","suppliedTotal","rawCustomer","assign","paidValue","name","price","supplierId","rawSupplier","suppliedValue","_computeDailyStats","dailyLoss","customersAverage","obtainedAverage","customersTotal","obtainedTotal","customerEntries","customerId","customer","paidSurplus","suppliedSurplus","customerPaid","customerSupplied","balance","saveAccounting","value","type","payload","saveDay","feedCompute","newKeys","setStore","compute","clearStore","NavBar","buttons","useState","burgerOpen","setBurgerOpen","index","role","key","fa","content","Popups","messageIds","messages","messageId","message","title","CustomerData","keys","MissedPayments","DayData","dayAccounting","PageData","openDay","useSelector","store","marche","soldTickets","supplierTuples","sort","a","b","totalDiff","computeTotal","getBenefices","dailyArray","totalSpendings","totalObtained","totalCustomers","filter","obtainedPercentage","getStats","tuple","style","width","getSupplierLadder","dayIndex","getContent","defaultChange","FileInput","label","onChange","rest","display","e","target","files","DayForm","addMessage","dispatch","useDispatch","dayRawData","newCustomer","setNewCustomer","newSupplier","setNewSupplier","undefined","file","setFile","customerFirstInput","useRef","supplierFirstInput","_readFile","blob","reader","FileReader","readAsText","Promise","resolve","onload","result","_addMessage","_readPage","page","lines","split","shift","newCustomerLines","newSupplierLines","currentLine","_saveRow","newCustomerlocal","local","data","newSupplierlocal","onCustomerGroupInputKeyDown","current","focus","onCustomerLastBoxKeyDown","stopPropagation","preventDefault","onFileInputChange","newCustomerState","concat","newSupplierState","onSupplierGroupInputKeyDown","onSupplierLastBoxKeyDown","setCustomerValue","colIndex","localCustomers","localNewCustomer","setSupplierValue","localSuppliers","localNewSupplier","setTombolaTicket","val","currentTarget","input","getElementsByTagName","click","onFileInputWrapperClick","pattern","event","localMissedTransactions","onKeyDown","ref","EventForm","props","eventExpensesState","ticketP","expense","accountingState","getExpenseValue","setExpense","setTicketPrice","HelpBox","showVideo","setShowVideo","href","height","Marche","_loadSave","saveName","_saveState","setItem","stringify","duration","id","setState","popupIds","state","popups","setTimeout","newPopupIds","filterId","newPopups","_openFile","save","saveObject","clearAll","toggleReset","onClickLoad","toggleLoad","onClickSave","toggleSave","onClickSaveFile","filename","Blob","window","navigator","msSaveOrOpenBlob","document","createElement","url","URL","createObjectURL","download","body","appendChild","removeChild","revokeObjectURL","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","hh","getHours","getMinutes","formattedDate","onClose","onDrop","dt","dataTransfer","types","isDragHover","toggleDay","isSameDay","showDayForm","showForm","toggleEventForm","isOpen","toggleHelp","showHelp","loadRequested","resetRequested","saveRequested","addEventListener","this","removeEventListener","resetButtons","saveButtons","loadButtons","onDragOver","_getButtons","React","Component","connect","App","open","matchMedia","matches","mode","setMode","useEffect","mediaQuery","onMediaChange","addListener","removeListener","useDarkMode","globalReducer","combineReducers","action","computeResults","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fa6830b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil({ callBack }) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect clickable\" onClick={callBack}>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","let lastId = 0;\r\n\r\nexport { newId, times, zip, rounded, percent, cancelArrays, download, formattedDate }\r\n\r\n/**\r\n * generates a unique new id combining the prefix with a new <Number>, numbers are consecutive.\r\n *\r\n * @param {*} [prefix]\r\n * @returns {String}\r\n */\r\nfunction newId(prefix='id') {\r\n    lastId++;\r\n    return `${prefix}${lastId}`;\r\n}\r\n/**\r\n * times(10) (() => console.log('a')) this call will call console.log('a') 10 times.\r\n *\r\n * @param {Number} x the amount of time to call the callback function 'f'\r\n * @returns {function} the function takes a callback 'f' as argument to be called x times.\r\n */\r\nfunction times(x) {\r\n    return (f) => {\r\n        if (x > 0) {\r\n            f()\r\n            times (x - 1) (f)\r\n        }\r\n    }\r\n}\r\n/**\r\n * Equivalent to Python's Zip function, useful to merge two arrays into an array of Tuples to feed an Object.fromEntries()\r\n *\r\n * @param {*} arr1\r\n * @param {*} arr2\r\n * @returns {Array<Tuples>} [[arr1[0], arr2[0]], [arr1[1], arr2[1]], [arr1[2], arr2[2]], [...]]\r\n */\r\nfunction zip(arr1, arr2) {\r\n    return arr1.map((k, i) => [k, arr2[i]]);\r\n}\r\n/**\r\n * rounded(456, 3) => 456\r\n * rounded(234.1235632, 3) => 234.124\r\n * Essentially a toFixed() that doesn't generate unnecessary 0's.\r\n *\r\n * @param {Number} num the <Number> to round.\r\n * @param {Number} [decimal] the amount of decimal digits, defaults to 3.\r\n * @returns {Number} returns num rounded to the 3rd decimal, if necessary.\r\n */\r\nfunction rounded(num, decimal=3) {\r\n    if (!num) return 0;\r\n    num = Number(num);\r\n    const exp = Math.abs(decimal);\r\n    return Math.round((num + Number.EPSILON) * Math.pow(10, exp)) / Math.pow(10, exp);\r\n}\r\n/**\r\n *\r\n * @param {Number} num\r\n * @param {Number} max\r\n * @returns {Number} percentage\r\n */\r\nfunction percent(num=0, max) {\r\n    return Math.floor((num / (max || 100)) * 100);\r\n}\r\n/**\r\n * function used to cancel two arrays, the values uniquely in common between the two arrays are removed from both arrays.\r\n *\r\n * @param {Array} arr1\r\n * @param {Array} arr2\r\n * @returns {Array<Array>} [arr1, arr2]\r\n */\r\nfunction cancelArrays(arr1, arr2) {\r\n    const lowestLength = Math.min(arr1.length, arr2.length);\r\n    const arrs = [arr1, arr2];\r\n    const newArrs = [[...arr1], [...arr2]];\r\n    const ascSortedArrs = arrs[0].length === lowestLength ? [0, 1] : [1, 0];\r\n    const lowIndex = ascSortedArrs[0];\r\n    const highIndex = ascSortedArrs[1];\r\n    for (let i = 0; i < lowestLength; i++) {\r\n        const element = arrs[lowIndex][i];\r\n        if (arrs[highIndex].includes(element)) {\r\n            newArrs[0].splice(newArrs[0].indexOf(element), 1);\r\n            newArrs[1].splice(newArrs[1].indexOf(element), 1);\r\n        }\r\n    }\r\n    return newArrs;\r\n}\r\n/**\r\n * function from https://stackoverflow.com/a/30832210\r\n *\r\n * @param {*} data\r\n * @param {String} filename\r\n * @param {String} type mimetype\r\n */\r\nfunction download(data, filename, type) {\r\n    const file = new Blob([data], {type: type});\r\n    if (window.navigator.msSaveOrOpenBlob) // IE10+\r\n        window.navigator.msSaveOrOpenBlob(file, filename);\r\n    else { // Others\r\n        const a = document.createElement(\"a\"),\r\n                url = URL.createObjectURL(file);\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        setTimeout(function() {\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }, 0);\r\n    }\r\n}\r\n\r\nfunction formattedDate() {\r\n    const today = new Date();\r\n    const dd = String(today.getDate()).padStart(2, '0');\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    const yyyy = today.getFullYear();\r\n    const hh = today.getHours();\r\n    const min = today.getMinutes();\r\nreturn `${dd}-${mm}-${yyyy}-${hh}h${min}`;\r\n}\r\n","const DAYS = [\"Vendredi\", \"Samedi\", \"Dimanche\"];\r\nconst EXPENSE_TYPES = [\r\n    \"Salle\",\r\n    \"Transactions\",\r\n    \"Assurance\",\r\n    \"Papeterie\",\r\n    \"Timbres\",\r\n    \"Courses\",\r\n    \"Traiteur\",\r\n    \"Schmitz\",\r\n    \"Autre\",\r\n];\r\n\r\nexport { DAYS, EXPENSE_TYPES };\r\n","import { DAYS } from '../utils/constants.js'\r\nimport { zip, cancelArrays } from '../utils/utils.js'\r\n\r\nconst SAVE_EXPENSES = 'SAVE_EXPENSES';\r\nconst CLEAR_STORE = 'CLEAR_STORE';\r\nconst FEED_COMPUTE = 'FEED_COMPUTE';\r\nconst SET_STORE = 'SET_STORE';\r\nconst SAVE_DAY = 'SAVE_DAY';\r\nconst COMPUTE = 'COMPUTE';\r\n\r\nconst loadState = () => {\r\n    const saved = localStorage.getItem('saved-store-auto');\r\n    let savedObject = {};\r\n    if (saved) {\r\n        savedObject = JSON.parse(saved) || savedObject;\r\n    }\r\n    return {...BLANK_STATE, ...savedObject};\r\n}\r\n\r\nconst BLANK_STATE = {\r\n    daysRawData: Object.fromEntries(\r\n        zip(DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n    ),\r\n    eventExpenses: {},\r\n    dailyAccounting: Object.fromEntries(\r\n        zip(DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n    ),\r\n    costTotal: 0,\r\n    ticketPrice: 0,\r\n    days: [], // { dayName, customers, missedPayments, missedTransactions, dailyLoss, customersAverage, obtainedAverage }\r\n    suppliers: {}, // { supplierId : { total } }\r\n    missedPaymentsByDay: {}, // the total amount missed by customers (negative meaning that they paid too much)\r\n    missedTransactionsByDay: {}, // { dayName: { customerId: { paidSurplus: [], suppliedSurplus: [] } } } unresolved payments.\r\n    supplierTotal: 0,\r\n    supplierRealGain: 0,\r\n}\r\n\r\n/**\r\n * Extracts values from day raw data (state.daysRawData).\r\n *\r\n * @returns {Object}\r\n */\r\nconst _processDays = (missedPaymentsByDay, missedTransactionsByDay, daysRawData) => {\r\n    const days = [];\r\n    let suppliers = {};\r\n    let supplierTotal = 0;\r\n    let supplierRealGain = 0;\r\n    for (const [dayName, dayRaw] of Object.entries(\r\n        daysRawData\r\n    )) {\r\n        const computedDay = _computeDay({ dayName, dayRaw, suppliers });\r\n        suppliers = computedDay.suppliers;\r\n        missedPaymentsByDay[dayName] = computedDay.missedPayments;\r\n        missedTransactionsByDay[dayName] = computedDay.missedTransactions;\r\n        days.push(computedDay.day);\r\n    }\r\n    // computes the total gross sale revenue of the suppliers, across all days.\r\n    Object.values(suppliers).forEach((supplier) => {\r\n        supplierTotal += supplier.total;\r\n        supplierRealGain += supplier.realGain;\r\n    });\r\n    return { days, suppliers, supplierTotal, supplierRealGain, missedPaymentsByDay, missedTransactionsByDay };\r\n};\r\n/**\r\n * Computes\r\n *\r\n * @param {Object} param0\r\n * @param {String} param0.dayName\r\n * @param {Object} param0.dayRaw\r\n * @param {Object} param0.suppliers\r\n */\r\nconst _computeDay = ({ dayName, dayRaw, suppliers }) => {\r\n    /* DATA FILL from dayRaw\r\n        *   paid\r\n        *   rawCustomers[*][0] purchase - customerId\r\n        *   rawCustomers[*][1] purchase - supplierId\r\n        *   rawCustomers[*][2] purchase - item Name\r\n        *   rawCustomers[*][3] purchase - item Price\r\n        *   supplied\r\n        *   rawSuppliers[*][0] payment - supplierId\r\n        *   rawSuppliers[*][1] payment - customerId\r\n        *   rawSuppliers[*][2] payment - item Name\r\n        *   rawSuppliers[*][3] payment - item Price\r\n        *\r\n        *\r\n        * suppliers = { supplierId : { total, realGain } }\r\n        *\r\n        */\r\n    const rawCustomers = dayRaw.customers;\r\n    const rawSuppliers = dayRaw.suppliers;\r\n    const customers = {};\r\n    /*\r\n        * customerKeys dataStructure\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        * paymentTransactions: Number[],\r\n        * recievedTransactions: Number[],\r\n        */\r\n    const customerKeys = {\r\n        paid: [],\r\n        paidTotal: 0,\r\n        paymentTransactions: [],\r\n        recievedTransactions: [],\r\n        supplied: [],\r\n        suppliedTotal: 0,\r\n    };\r\n\r\n    for (const rawCustomer of rawCustomers) {\r\n        if (rawCustomer[0]) {\r\n            // CUSTOMER SIDE\r\n            // creates the customer if it doesn't already exist.\r\n            customers[rawCustomer[0]] = customers[rawCustomer[0]] || Object.assign({}, customerKeys);\r\n            // adds the total paid by the customer\r\n            const paidValue = Number(rawCustomer[3]);\r\n            customers[rawCustomer[0]].paidTotal += paidValue || 0;\r\n            customers[rawCustomer[0]].paymentTransactions.push(paidValue);\r\n            // adds a line for what the customer paid\r\n            customers[rawCustomer[0]].paid.push({\r\n                name: rawCustomer[2],\r\n                price: rawCustomer[3],\r\n                supplierId: rawCustomer[1],\r\n            });\r\n            // computes the total value of real gain by the supplier.\r\n            suppliers[rawCustomer[1]] = suppliers[rawCustomer[1]] || {\r\n                total: 0,\r\n                realGain: 0,\r\n            };\r\n            suppliers[rawCustomer[1]].realGain += Number(rawCustomer[3]) || 0;\r\n        }\r\n    }\r\n    for (const rawSupplier of rawSuppliers) {\r\n        if (rawSupplier[0] && rawSupplier[1]) {\r\n            // SUPPLIER SIDE\r\n            customers[rawSupplier[1]] = customers[rawSupplier[1]] || Object.assign({}, customerKeys);\r\n            // adds the total paid by the customer\r\n            const suppliedValue = Number(rawSupplier[3]);\r\n            customers[rawSupplier[1]].suppliedTotal += suppliedValue || 0;\r\n            customers[rawSupplier[1]].recievedTransactions.push(suppliedValue);\r\n            // adds a line for what the customer recieved (not a guarantee of payment)\r\n            customers[rawSupplier[1]].supplied.push({\r\n                name: rawSupplier[2],\r\n                price: rawSupplier[3],\r\n                supplierId: rawSupplier[0],\r\n            });\r\n            // computes the total value of supplied by the supplier.\r\n            suppliers[rawSupplier[0]] = suppliers[rawSupplier[0]] || {\r\n                total: 0,\r\n                realGain: 0,\r\n            };\r\n            suppliers[rawSupplier[0]].total += Number(rawSupplier[3]) || 0;\r\n        }\r\n    }\r\n\r\n    const {\r\n        missedPayments,\r\n        missedTransactions,\r\n        dailyLoss,\r\n        customersAverage,\r\n        obtainedAverage,\r\n    } = _computeDailyStats(customers);\r\n    return {\r\n        day: {\r\n            dayName,\r\n            customers,\r\n            missedPayments,\r\n            missedTransactions,\r\n            dailyLoss,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        },\r\n        suppliers,\r\n        missedPayments,\r\n        missedTransactions,\r\n    };\r\n};\r\n/**\r\n *\r\n * @param {Object} customers\r\n */\r\nconst _computeDailyStats = (customers) => {\r\n    const missedPayments = {};\r\n    const missedTransactions = {};\r\n    let dailyLoss = 0;\r\n    let customersTotal = 0;\r\n    let obtainedTotal = 0;\r\n\r\n    const customerEntries = Object.entries(customers)\r\n    for (const [customerId, customer] of customerEntries) {\r\n\r\n        // cancels the payment and receipt transactions to find out which one don't have an equivalent.\r\n        const [paidSurplus, suppliedSurplus] = cancelArrays(customer.paymentTransactions, customer.recievedTransactions);\r\n        missedTransactions[customerId] = { paidSurplus, suppliedSurplus };\r\n\r\n        // amounts that customers didn't pay (can be negative, in which case, the customer is owed money).\r\n        const customerPaid = customer.paidTotal;\r\n        const customerSupplied = customer.suppliedTotal;\r\n        const balance = customerSupplied - customerPaid;\r\n        if (balance !== 0) {\r\n            missedPayments[customerId] = balance;\r\n            dailyLoss += balance;\r\n        }\r\n        // daily totals\r\n        obtainedTotal += Number(customerSupplied);\r\n        customersTotal += Number(customerPaid);\r\n\r\n    }\r\n    const customersAverage = customersTotal / (customerEntries.length || 0);\r\n    const obtainedAverage = obtainedTotal / (customerEntries.length || 0);\r\n    return {\r\n        missedPayments,\r\n        missedTransactions,\r\n        dailyLoss,\r\n        customersTotal,\r\n        customersAverage,\r\n        obtainedAverage,\r\n    };\r\n};\r\n\r\nconst marcheReducer = (state=loadState(), action) => {\r\n    let computeResults = {};\r\n    switch (action.type) {\r\n\r\n        case SAVE_EXPENSES:\r\n            let costTotal = 0;\r\n            const eventExpenses = action.payload;\r\n            Object.values(eventExpenses).forEach((val) => (costTotal += val));\r\n            return {...state, ...{ eventExpenses, costTotal }};\r\n\r\n        case SAVE_DAY:\r\n            const { day, data, dayAccounting } = action.payload;\r\n            const daysRawData = {...state.daysRawData};\r\n            const dailyAccounting = {...state.dailyAccounting, ...{\r\n                [day]: dayAccounting,\r\n            }};\r\n            daysRawData[day] = data;\r\n            computeResults = _processDays(state.missedPaymentsByDay, state.missedTransactionsByDay, daysRawData);\r\n            return {...state, ...{ daysRawData, dailyAccounting }, ...computeResults};\r\n\r\n        case COMPUTE:\r\n            computeResults = _processDays(state.missedPaymentsByDay, state.missedTransactionsByDay, state.daysRawData);\r\n            return {...state, ...computeResults};\r\n\r\n        case FEED_COMPUTE:\r\n            computeResults  = _processDays(state.missedPaymentsByDay, state.missedTransactionsByDay, state.daysRawData);\r\n            return {...state, ...action.payload, ...computeResults};\r\n\r\n        case SET_STORE:\r\n            return {...state, ...action.payload};\r\n\r\n        case CLEAR_STORE:\r\n            return BLANK_STATE;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst saveAccounting = (value) => {\r\n    return {\r\n        type: SAVE_EXPENSES,\r\n        payload: value,\r\n    }\r\n};\r\n\r\nconst saveDay = (value) => {\r\n    return {\r\n        type: SAVE_DAY,\r\n        payload: value,\r\n    }\r\n};\r\n\r\n\r\nconst feedCompute = (newKeys={}) => {\r\n    return {\r\n        type: FEED_COMPUTE,\r\n        payload: newKeys,\r\n    }\r\n}\r\n\r\nconst setStore = (newKeys={}) => {\r\n    return {\r\n        type: SET_STORE,\r\n        payload: newKeys,\r\n    }\r\n}\r\n\r\nconst compute = () => {\r\n    return {\r\n        type: COMPUTE,\r\n    }\r\n}\r\n\r\nconst clearStore = () => {\r\n    return {\r\n        type: CLEAR_STORE,\r\n    }\r\n}\r\n\r\nexport {\r\n    marcheReducer,\r\n    saveAccounting,\r\n    saveDay,\r\n    compute,\r\n    feedCompute,\r\n    setStore,\r\n    clearStore,\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    const [burgerOpen, setBurgerOpen] = useState(true);\r\n\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            <div className=\"hamburger\" onClick={() => {setBurgerOpen(!burgerOpen)}}>\r\n                <div className=\"line\"/>\r\n                <div className=\"line\"/>\r\n                <div className=\"line\"/>\r\n            </div>\r\n            <div className={\"nav-buttons \" + (burgerOpen? 'open' : '')}>\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div role=\"button\" key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Popups.css\";\r\n\r\nfunction Popups({ messageIds, messages }) {\r\n\r\n    return (\r\n        <div className=\"popups\">\r\n            {messageIds.map((messageId) => {\r\n                const message = messages[messageId];\r\n                return (\r\n                    <div key={messageId} className={\"popup \" + message.type}>\r\n                        {!!message.title &&\r\n                            <span>{message.title}</span>\r\n                        }\r\n                        {message.content}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popups;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2><i className=\"fa fa-user spaced\"/> Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {rounded(customers[customerId].paidTotal, 3)}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {rounded(customers[customerId].suppliedTotal, 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2><i className=\"fa fa-exclamation-triangle spaced\"/> Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {rounded(missedPayments[customerId], 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dayAccounting }) {\r\n    if (!Object.keys(day.customers).length) {\r\n        return (<div></div>);\r\n    }\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {rounded(day.dailyLoss, 3)}€</div>\r\n                <div>Tickets de tombola vendus: {dayAccounting.tombolaTickets}</div>\r\n                <div>Moyenne des dépenses des clients: {rounded((day.customersAverage || 0), 3)}€</div>\r\n                <div>Moyenne des objets reçu par les clients: {rounded((day.obtainedAverage || 0), 3)}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\nimport { rounded, percent } from \"../../utils/utils.js\";\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ openDay }) {\r\n\r\n    const dailyAccounting = useSelector(store => store.marche.dailyAccounting);\r\n    const days = useSelector(store => store.marche.days);\r\n    const supplierTotal = useSelector(store => store.marche.supplierTotal);\r\n    const supplierRealGain = useSelector(store => store.marche.supplierRealGain);\r\n    const suppliers = useSelector(store => store.marche.suppliers);\r\n    const ticketPrice = useSelector(store => store.marche.ticketPrice);\r\n    const costTotal = useSelector(store => store.marche.costTotal);\r\n\r\n    function getContent() {\r\n        let soldTickets = 0;\r\n        const supplierTuples = Object.entries(suppliers);\r\n        supplierTuples.sort((a, b) => {\r\n            return b[1].realGain - a[1].realGain;\r\n        });\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += Number(value.tombolaTickets) || 0;\r\n        }\r\n        return(\r\n            <div className=\"content global-content\">\r\n                {getBenefices(soldTickets)}\r\n                {getStats(soldTickets)}\r\n                {!!supplierTuples.length && getSupplierLadder(supplierTuples)}\r\n                {getDayData()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getDayData() {\r\n        return(\r\n            <div>\r\n                {days.map((value, dayIndex) => {\r\n                    if (!(openDay && openDay !== value.dayName)) {\r\n                        return(<DayData day={value} key={dayIndex} dayAccounting={dailyAccounting[value.dayName]} index={dayIndex}/>);\r\n                    } else {\r\n                        return(<div key={'empty_'+dayIndex}/>)\r\n                    }\r\n                })}\r\n            </div>)\r\n    }\r\n\r\n    function getSupplierLadder(supplierTuples) {\r\n        const max = supplierTuples[0] && supplierTuples[0][1] && supplierTuples[0][1].realGain;\r\n        return (\r\n            <div className=\"global-stats\">\r\n            <h3><i className=\"fa fa-trophy spaced\"/> Classement des fournisseurs</h3>\r\n                {supplierTuples && supplierTuples.map((tuple, index) => {\r\n                    return(\r\n                        <div key={'ladder_'+index} className=\"ladder-entry\">\r\n                            <div className=\"progress-bar\" style={{width: percent(tuple[1].realGain, max) + '%'}}/>\r\n                            <span>{index+1}.</span>\r\n                            <span>[{tuple[0]}]</span>\r\n                            <span className=\"value\">{rounded(tuple[1].realGain, 3)}€</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getStats(soldTickets) {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalObtained = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage || 0;\r\n            totalObtained += day.obtainedAverage || 0;\r\n            totalCustomers += Object.values(day.customers).filter(customer => customer.paidTotal > 0).length;\r\n        }\r\n        let obtainedPercentage = percent(totalSpendings, totalObtained);\r\n        return (\r\n            <div className=\"global-stats\">\r\n                <h3><i className=\"fa fa-bar-chart spaced\"/> Statistiques (sur {days.length} jour(s))</h3>\r\n                <div className=\"daily-stats\">\r\n                    <div><span>Moyenne payée par les clients:</span> <span className=\"value-display\">{rounded((totalSpendings / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Moyenne des articles reçu:</span> <span className=\"value-display\">{rounded((totalObtained / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Taux de paiement:</span> <span className=\"value-display\">{obtainedPercentage}%</span></div>\r\n                    <div><span>Tickets de tombola Vendus:</span> <span className=\"value-display\">{soldTickets}</span></div>\r\n                    <div><span>Quantité de fiches payées:</span> <span className=\"value-display\">{totalCustomers}</span></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getBenefices(soldTickets) {\r\n        const totalDiff = rounded(-(supplierTotal-supplierRealGain), 3);\r\n        return (\r\n            <div className=\"global-stats profits\">\r\n                <h3><i className=\"fa fa-line-chart spaced\"/> Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span className=\"value-display\">{rounded(supplierTotal, 3)}€</span></div>\r\n                <div><span>{`Paiements ` + (totalDiff > 0 ? 'en excès' : 'manquants') + ':'}</span> <span className=\"value-display\">{totalDiff}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{soldTickets} x {ticketPrice}€: </span><span className=\"value-display\">{rounded(ticketPrice * (soldTickets), 3)}€ </span></div>\r\n                <div><span>Total des frais: </span><span className=\"value-display\">{rounded(-(costTotal), 3)}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché: </span><span className=\"value-display\">{rounded(computeTotal(soldTickets), 3)}€</span></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function computeTotal(soldTickets) {\r\n        return (supplierRealGain + (ticketPrice * (soldTickets))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div>{getContent()}</div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { saveDay } from \"../../store/marche.js\";\r\nimport FileInput from \"../FileInput/FileInput.js\";\r\nimport { times } from \"../../utils/utils.js\";\r\nimport \"./DayForm.css\";\r\n\r\n/*\r\n * dayRawData = { customers: [], suppliers: [] }\r\n */\r\nfunction DayForm({\r\n    day,\r\n    addMessage,\r\n}) {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const dailyAccounting = useSelector(store => store.marche.dailyAccounting[day] || { tombolaTickets: 0 });\r\n    const missedTransactions = useSelector(store => store.marche.missedTransactionsByDay[day] || {});\r\n    const dayRawData = useSelector(store => store.marche.daysRawData[day] || {});\r\n    const [newCustomer, setNewCustomer] = useState([]);\r\n    const [newSupplier, setNewSupplier] = useState([]);\r\n    const [file, setFile] = useState(undefined);\r\n    const customerFirstInput = useRef(null);\r\n    const supplierFirstInput = useRef(null);\r\n\r\n    const customers = dayRawData.customers || [];\r\n    const suppliers = dayRawData.suppliers || [];\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {blob} blob\r\n     * @return {file}\r\n     */\r\n    const _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage(\"ERREUR\", error.message, \"error\");\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Generates the raw daily data. A simple Array<Array> that represents two grids of entries (suppliers, customers).\r\n     *\r\n     * @param {String} page returned by a fileReader in \"reader.readAsText\"\r\n     */\r\n    const _readPage = async (page) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/); // splits the page (String) into an array of line (Array<String>).\r\n        times(OFFSET_HEIGHT)(() => lines.shift());\r\n        // colNames\r\n        lines.shift().split(\",\"); // removes and saves column titles.\r\n\r\n        const newCustomerLines = [];\r\n        const newSupplierLines = [];\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(\",\");\r\n\r\n            /* DATA FILL\r\n             *   paid\r\n             *   currentLine[0] purchase - customerId\r\n             *   currentLine[1] purchase - supplierId\r\n             *   currentLine[2] purchase - item Name\r\n             *   currentLine[3] purchase - item Price\r\n             *   supplied\r\n             *   currentLine[4] payment - supplierId\r\n             *   currentLine[5] payment - customerId\r\n             *   currentLine[6] payment - item Name\r\n             *   currentLine[7] payment - item Price\r\n             */\r\n\r\n            if (currentLine[0]) {\r\n                // CUSTOMER SIDE\r\n                newCustomerLines.push([\r\n                    Number(currentLine[0]),\r\n                    Number(currentLine[1]),\r\n                    currentLine[2],\r\n                    Number(currentLine[3]),\r\n                ]);\r\n            }\r\n            if (currentLine[4] && currentLine[5]) {\r\n                // SUPPLIER SIDE\r\n                newSupplierLines.push([\r\n                    Number(currentLine[4]),\r\n                    Number(currentLine[5]),\r\n                    currentLine[6],\r\n                    Number(currentLine[7]),\r\n                ]);\r\n            }\r\n        }\r\n        return { newCustomerLines, newSupplierLines };\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} type customer or supplier\r\n     */\r\n    const _saveRow = async (type) => {\r\n        let local;\r\n\r\n        if (type === \"customer\") {\r\n            const newCustomerlocal = newCustomer;\r\n            local = customers;\r\n            local.push(newCustomerlocal);\r\n            await dispatch(saveDay({\r\n                day,\r\n                data: { customers: local, suppliers },\r\n                dayAccounting: dailyAccounting,\r\n            }));\r\n            await setNewCustomer([\"\", \"\", \"\", \"\"]);\r\n        }\r\n        if (type === \"supplier\") {\r\n            const newSupplierlocal = newSupplier;\r\n            local = suppliers;\r\n            local.push(newSupplierlocal);\r\n            await dispatch(saveDay({\r\n                day,\r\n                data: { customers, suppliers: local },\r\n                dayAccounting: dailyAccounting,\r\n            }));\r\n            await setNewSupplier([\"\", \"\", \"\", \"\"]);\r\n        }\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onCustomerGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    };\r\n    const onCustomerLastBoxKeyDown = async (e) => {\r\n        if (e.key === \"Tab\") {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    }\r\n    /**\r\n     * Handler for File Input onChange.\r\n     *\r\n     * @param {file[]} files\r\n     * @return {void}\r\n     */\r\n    const onFileInputChange = async (files) => {\r\n        const file = files[0];\r\n        if (!file.name.includes(\".csv\")) {\r\n            addMessage(\"ERREUR\", \"Le fichier doit être un .csv\", \"error\", 8000);\r\n            return;\r\n        }\r\n        await setFile(file);\r\n        const page = await _readFile(file);\r\n        const { newCustomerLines, newSupplierLines } = await _readPage(page);\r\n        const newCustomerState = customers.concat(newCustomerLines);\r\n        const newSupplierState = suppliers.concat(newSupplierLines)\r\n        await dispatch(saveDay({\r\n            day,\r\n            data: { customers: newCustomerState, suppliers: newSupplierState },\r\n            dayAccounting: dailyAccounting,\r\n        }));\r\n    };\r\n    /**\r\n     *\r\n     * @param {mouseEvent} e\r\n     */\r\n    const onFileInputWrapperClick = (e) => {\r\n        // allows clicking on the file input from the outside element.\r\n        if (e.currentTarget !== e.target) {\r\n            return;\r\n        }\r\n        const input = e.currentTarget.getElementsByTagName(\"input\");\r\n        if (input.length) {\r\n            e.stopPropagation();\r\n            input[0].click();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onSupplierGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    };\r\n    const onSupplierLastBoxKeyDown = async (e) => {\r\n        if (e.key === \"Tab\") {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setCustomerValue = async (index, colIndex, value) => {\r\n        const localCustomers = customers || [];\r\n\r\n        if (index === false) {\r\n            const localNewCustomer = newCustomer.map((value) => value || \"\");\r\n            localNewCustomer[colIndex] = value;\r\n            setNewCustomer(localNewCustomer);\r\n            return;\r\n        }\r\n\r\n        if (!localCustomers[index]) {\r\n            localCustomers[index] = [];\r\n        }\r\n        localCustomers[index][colIndex] = value;\r\n        await dispatch(saveDay({\r\n            day,\r\n            data: { customers: localCustomers, suppliers },\r\n            dayAccounting: dailyAccounting,\r\n        }));\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setSupplierValue = async (index, colIndex, value) => {\r\n        const localSuppliers = suppliers || [];\r\n\r\n        if (index === false) {\r\n            const localNewSupplier = newSupplier.map((value) => value || \"\");\r\n            localNewSupplier[colIndex] = value;\r\n            setNewSupplier(localNewSupplier);\r\n            return;\r\n        }\r\n\r\n        if (!localSuppliers[index]) {\r\n            localSuppliers[index] = [];\r\n        }\r\n        localSuppliers[index][colIndex] = value;\r\n        await dispatch(saveDay({\r\n            day,\r\n            data: { customers, suppliers: localSuppliers },\r\n            dayAccounting: dailyAccounting,\r\n        }));\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number || String} val the value of the input\r\n     */\r\n    const setTombolaTicket = async (val) => {\r\n        await dispatch(saveDay({\r\n            day,\r\n            data: { customers, suppliers },\r\n            dayAccounting: { tombolaTickets: Number(val) }\r\n        }));\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    return (\r\n        <div className=\"content input-page noselect\">\r\n            <div className=\"title-area ml-10\">\r\n                <h1>{day}</h1>\r\n                <div\r\n                    role=\"button\"\r\n                    className=\"form-button\"\r\n                    onClick={(e) => onFileInputWrapperClick(e)}\r\n                >\r\n                    <FileInput\r\n                        label=\"Ajouter .csv\"\r\n                        className=\"noselect\"\r\n                        value={file}\r\n                        onChange={onFileInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className=\"ml-10\">Tickets de tombola vendus:</span>\r\n                <input\r\n                    className=\"number-input ml-10\"\r\n                    pattern=\"[0-9]*\"\r\n                    type=\"number\"\r\n                    onChange={(event) => {\r\n                        setTombolaTicket(event.target.value);\r\n                    }}\r\n                    value={dailyAccounting.tombolaTickets}\r\n                />\r\n                <i className=\"fa fa-ticket spaced\"/>\r\n            </div>\r\n            <div className=\"area-container\">\r\n                <div\r\n                    className=\"group-input customers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {customers.map((customer, index) => {\r\n                        const localMissedTransactions = missedTransactions[customer[0]];\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"customer-row row saved-row \" +\r\n                                    (!!(\r\n                                        localMissedTransactions &&\r\n                                        localMissedTransactions.paidSurplus &&\r\n                                        localMissedTransactions.paidSurplus.includes(Number(customer[3]))\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"customer_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"customer-row row new-row\" onKeyDown={onCustomerGroupInputKeyDown}>\r\n                        <input\r\n                            ref={customerFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newCustomer[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newCustomer[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newCustomer[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onKeyDown={onCustomerLastBoxKeyDown}\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newCustomer[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        Appuier sur 'Tab' pour naviguer entre les cases.\r\n                        Appuier sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"group-input suppliers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {suppliers.map((supplier, index) => {\r\n                        const localMissedTransactions = missedTransactions[supplier[1]];\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"supplier-row row saved-row \" +\r\n                                    (!!(\r\n                                        localMissedTransactions &&\r\n                                        localMissedTransactions.suppliedSurplus &&\r\n                                        localMissedTransactions.suppliedSurplus.includes(Number(supplier[3]))\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"supplier_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"supplier-row row new-row\" onKeyDown={onSupplierGroupInputKeyDown}>\r\n                        <input\r\n                            ref={supplierFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newSupplier[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newSupplier[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newSupplier[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onKeyDown={onSupplierLastBoxKeyDown}\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newSupplier[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        Appuier sur 'Tab' pour naviguer entre les cases.\r\n                        Appuier sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayForm;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { saveAccounting, feedCompute } from \"../../store/marche.js\";\r\nimport { EXPENSE_TYPES } from \"../../utils/constants.js\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm(props) {\r\n\r\n    const eventExpensesState = useSelector(store => store.marche.eventExpenses);\r\n    const ticketP = useSelector(store => store.marche.ticketPrice);\r\n    const dispatch = useDispatch();\r\n\r\n    async function setExpense(expense, value) {\r\n        const accountingState = eventExpensesState;\r\n        accountingState[expense] = value;\r\n        dispatch(saveAccounting(accountingState));\r\n    }\r\n\r\n    async function setTicketPrice(value) {\r\n        dispatch(feedCompute({ ticketPrice: Number(value) }));\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventExpensesState[expense] || 0;\r\n    }\r\n\r\n    function renderEventExpenses() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div key={'input_container_'+expense}>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketPrice(event.target.value) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form noselect\">\r\n                {renderEventExpenses()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./HelpBox.css\";\r\n\r\nfunction HelpBox() {\r\n\r\n    const [showVideo, setShowVideo] = useState(false);\r\n\r\n    const toggleVideo = () => {\r\n        setShowVideo(!showVideo);\r\n    }\r\n\r\n    return (\r\n        <div className=\"help noselect\">\r\n            <div className=\"help-link ml-auto\">\r\n                <a\r\n                    className=\"help-text\"\r\n                    target=\"new\"\r\n                    href=\"https://docs.google.com/spreadsheets/d/1UKT38_RUa3MQ_HEGtWgaPKvedD35wYksaj7-T0sc9N8/edit?usp=sharing\"\r\n                >\r\n                    Format accepté\r\n                </a>\r\n                <i className=\"fa fa-file-excel-o\" />\r\n            </div>\r\n            <div className=\"help-link ml-auto\" onClick={toggleVideo}>\r\n                <u>Vidéo d'explication</u>\r\n                <i className=\"fa fa-play\" />\r\n            </div>\r\n            {!!showVideo &&\r\n                (\r\n                    <iframe title=\"help video\" src=\"https://drive.google.com/file/d/1hk40AsnzUJ7gUevslwSnfZGkSvyJ0OKu/preview\" width=\"900\" height=\"500\"/>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HelpBox;\r\n\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport \"./Marche.css\";\r\n\r\nimport { newId, download, formattedDate } from \"../../utils/utils.js\";\r\nimport { setStore, compute, clearStore } from \"../../store/marche.js\";\r\nimport { DAYS } from \"../../utils/constants.js\";\r\nimport NavBar from \"../NavBar/NavBar.js\";\r\nimport Popups from \"../Popups/Popups.js\";\r\nimport PageData from \"../PageData/PageData.js\";\r\nimport DayForm from \"../DayForm/DayForm.js\";\r\nimport EventForm from \"../EventForm/EventForm.js\";\r\nimport HelpBox from \"../HelpBox/HelpBox.js\";\r\nimport FileInput from \"../FileInput/FileInput.js\";\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            // Buttons with confirm\r\n            resetRequested: false, // toggle for the confirm/cancel buttons for removing files\r\n            loadRequested: false,\r\n            saveRequested: false,\r\n            // Displays\r\n            showForm: false, // toggle for the accounting/event input form\r\n            showDayForm: false, // false or DAYS[*]\r\n            showHelp: false, // toggle the \"help\" box\r\n            // POPUPS\r\n            popupIds: [],\r\n            popups: {}, // {content, type}\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        window.addEventListener('beforeunload', this.onClose);\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.onClose);\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Loads the save from the localStorage.\r\n     *\r\n     * @param {String} saveName\r\n     */\r\n    _loadSave = (saveName) => {\r\n        const saved = localStorage.getItem(saveName);\r\n        if (saved) {\r\n            this.props.setStore(JSON.parse(saved));\r\n        }\r\n        this._addMessage(\r\n            \"Chargé\",\r\n            \"La dernière sauvegarde à été chargée\",\r\n            \"info\",\r\n            2000\r\n        );\r\n    };\r\n    /**\r\n     *\r\n     * @param {blob} blob\r\n     * @return {file}\r\n     */\r\n    _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage(\"ERREUR\", error.message, \"error\");\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Saves part of the state to the localStorage.\r\n     *\r\n     * @param {String} saveName\r\n     */\r\n    _saveState = (saveName) => {\r\n        const store = this.props.store;\r\n        localStorage.setItem(\r\n            saveName,\r\n            JSON.stringify({\r\n                days: store.days,\r\n                suppliers: store.suppliers,\r\n                missedPaymentsByDay: store.missedPaymentsByDay,\r\n                missedTransactionsByDay: store.missedTransactionsByDay,\r\n                supplierTotal: store.supplierTotal,\r\n                supplierRealGain: store.supplierRealGain,\r\n                daysRawData: store.daysRawData,\r\n                eventExpenses: store.eventExpenses,\r\n                dailyAccounting: store.dailyAccounting,\r\n                ticketPrice: store.ticketPrice,\r\n                costTotal: store.costTotal,\r\n            })\r\n        );\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} title\r\n     * @param {String} content text content of the message\r\n     * @param {String} [type] info | error\r\n     * @param {Number} [duration] amount of ms\r\n     */\r\n    _addMessage = async (title, content, type='info', duration=5000) => {\r\n        const id = newId(\"message\");\r\n        await this.setState({\r\n            popupIds: this.state.popupIds.concat(id),\r\n            popups: Object.assign({}, this.state.popups, {\r\n                [id]: {\r\n                    title,\r\n                    content,\r\n                    type,\r\n                },\r\n            }),\r\n        });\r\n        setTimeout(async () => {\r\n            const newPopupIds = this.state.popupIds.filter((filterId) => {\r\n                return filterId !== id;\r\n            });\r\n            const newPopups = Object.assign({}, this.state.popups);\r\n            delete newPopups[id];\r\n            await this.setState({\r\n                popupIds: newPopupIds,\r\n                popups: newPopups,\r\n            });\r\n        }, duration);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Blob} file\r\n     */\r\n    _openFile = async (file) => {\r\n        if (file.type !== 'application/json') {\r\n            this._addMessage(\r\n                \"ERREUR\",\r\n                \"Le fichier n'est pas un de type .json\",\r\n                \"error\"\r\n                );\r\n            return false;\r\n        }\r\n        const save = await this._readFile(file);\r\n        const saveObject = JSON.parse(save);\r\n        if (Object.keys(saveObject).includes('daysRawData')) {\r\n            await this.props.setStore(saveObject);\r\n            await this._addMessage(\r\n                \"Chargé\",\r\n                \"Le fichier a bien été chargé\",\r\n                \"info\",\r\n                2000\r\n            );\r\n            await this.props.compute();\r\n            return true;\r\n        } else {\r\n            this._addMessage(\r\n                \"ERREUR\",\r\n                \"Le fichier n'a pas pu être chargé\",\r\n                \"error\"\r\n            );\r\n            return false;\r\n        }\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     */\r\n    clearAll = async () => {\r\n        this.props.clearStore();\r\n        await this._addMessage(\r\n            \"\",\r\n            \"Tout le contenu a été réinitialisé\",\r\n            \"error\",\r\n            5000\r\n        );\r\n        await this.toggleReset();\r\n    };\r\n    onClickLoad = async () => {\r\n        this._loadSave('saved-state-manual');\r\n        await this.toggleLoad();\r\n    }\r\n    onClickSave = () => {\r\n        this._saveState('saved-state-manual');\r\n        this._addMessage(\r\n            \"Sauvegardé\",\r\n            \"Les informations ont été sauvegardées\",\r\n            \"info\",\r\n            3000\r\n        );\r\n        this.toggleSave();\r\n    }\r\n    onClickSaveFile = () => {\r\n        const data = JSON.stringify({\r\n            daysRawData: this.props.store.daysRawData,\r\n            eventExpenses: this.props.store.eventExpenses,\r\n            dailyAccounting: this.props.store.dailyAccounting,\r\n            ticketPrice: this.props.store.ticketPrice,\r\n            costTotal: this.props.store.costTotal,\r\n        })\r\n        download(\r\n            data,\r\n            `marche-de-noel-${formattedDate()}.json`,\r\n            'application/json'\r\n        );\r\n        this.toggleSave();\r\n    }\r\n    onClose = () => {\r\n        this._saveState('saved-store-auto');\r\n    }\r\n    /**\r\n     *\r\n     * @param {DropEvent} event\r\n     */\r\n    onDrop = async (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const dt = event.dataTransfer;\r\n        if (!dt || !dt.types.includes('Files')) {\r\n            return;\r\n        } else {\r\n            await this._openFile(dt.files[0]);\r\n        }\r\n        this.setState({ isDragHover: false });\r\n    }\r\n    /**\r\n     * Handles the change in the file input that is used to load a saved .json file.\r\n     *\r\n     * @param {Blob} file\r\n     */\r\n    onFileInputChange = async (files) => {\r\n        const file = files[0];\r\n        const success = await this._openFile(file);\r\n        if (success) {\r\n            await this.toggleLoad();\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {mouseEvent} e\r\n     */\r\n    onFileInputWrapperClick = (e) => {\r\n        // allows clicking on the file input from the outside element.\r\n        if (e.currentTarget !== e.target) {\r\n            return;\r\n        }\r\n        const input = e.currentTarget.getElementsByTagName(\"input\");\r\n        if (input.length) {\r\n            e.stopPropagation();\r\n            input[0].click();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} day\r\n     */\r\n    toggleDay = async (day) => {\r\n        const isSameDay = this.state.showDayForm === day;\r\n        await this.setState({ showDayForm: false, showForm: false });\r\n        if (!isSameDay) {\r\n            await this.setState({ showDayForm: day });\r\n        }\r\n    };\r\n    toggleEventForm = async () => {\r\n        const isOpen = this.state.showForm;\r\n        await this.setState({ showForm: !isOpen, showDayForm: false });\r\n        if (isOpen) {\r\n            this.props.compute();\r\n        }\r\n    };\r\n    toggleHelp = async () => {\r\n        await this.setState({ showHelp: !this.state.showHelp });\r\n    };\r\n    toggleLoad = async () => {\r\n        await this.setState({ loadRequested: !this.state.loadRequested });\r\n    };\r\n    toggleReset = async () => {\r\n        await this.setState({ resetRequested: !this.state.resetRequested });\r\n    };\r\n    toggleSave = () => {\r\n        this.setState({ saveRequested: !this.state.saveRequested });\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Generates the buttons to be given to the top nav-bar.\r\n     *\r\n     * @returns {Array} buttons\r\n     */\r\n    _getButtons() {\r\n        // ACCOUNTING\r\n        const buttons = [\r\n            {\r\n                className: (this.state.showForm ? \"active\" : \"\") + \" purple\",\r\n                fa: \"fa-eur\",\r\n                content: \"Comptabilité\",\r\n                callBack: this.toggleEventForm,\r\n            },\r\n        ];\r\n\r\n        // ADD DAYS\r\n        for (const day of DAYS) {\r\n            buttons.push({\r\n                className:\r\n                    (this.state.showDayForm === day ? \"active \" : \"\") +\r\n                    ((this.props.store.daysRawData[day] && this.props.store.daysRawData[day].customers.length)\r\n                        ? \"green\"\r\n                        : \"alert\"),\r\n                fa: \"fa-calendar\",\r\n                callBack: () => {\r\n                    this.toggleDay(day);\r\n                },\r\n                content: day,\r\n            });\r\n        }\r\n\r\n        // RIGHT\r\n        buttons.push({\r\n            content: \"Aide\",\r\n            fa: \"fa-info-circle\",\r\n            className: (\"blue order-2 ml-auto \" + (!!this.state.showHelp && 'active')),\r\n            callBack: this.toggleHelp,\r\n        });\r\n\r\n        // REMOVE FILES\r\n        if (!(this.state.saveRequested || this.state.loadRequested)) {\r\n            let resetButtons = [\r\n                {\r\n                    content: \"Tout effacer\",\r\n                    fa: \"fa-trash\",\r\n                    className: \"warning\",\r\n                    callBack: this.toggleReset,\r\n                },\r\n            ];\r\n            if (this.state.resetRequested) {\r\n                resetButtons = [\r\n                    {\r\n                        content: \"Annuler\",\r\n                        fa: \"fa-times\",\r\n                        className: \"green\",\r\n                        callBack: this.toggleReset,\r\n                    },\r\n                    {\r\n                        content: \"Confirmer: Effacer l'encodage en cours\",\r\n                        fa: \"fa-check\",\r\n                        className: \"alert\",\r\n                        callBack: this.clearAll,\r\n                    },\r\n                ];\r\n            }\r\n            buttons.push(...resetButtons);\r\n        }\r\n\r\n        // SAVE\r\n        let saveButtons = [\r\n            {\r\n                content: \"Sauvegarder\",\r\n                fa: \"fa-floppy-o\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleSave,\r\n            },\r\n        ];\r\n        if (this.state.saveRequested) {\r\n            saveButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"alert\",\r\n                    callBack: this.toggleSave,\r\n                },\r\n                {\r\n                    content: \"Sauvegarde locale\",\r\n                    fa: \"fa-cloud-download\",\r\n                    className: \"warning\",\r\n                    callBack: this.onClickSave,\r\n                },\r\n                {\r\n                    content: \"Télécharger la sauvegarde\",\r\n                    fa: \"fa-download\",\r\n                    className: \"warning\",\r\n                    callBack: this.onClickSaveFile,\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.loadRequested) {\r\n            buttons.push(...saveButtons);\r\n        }\r\n\r\n        // LOAD\r\n        let loadButtons = [\r\n            {\r\n                content: \"Charger\",\r\n                fa: \"fa-upload\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleLoad,\r\n            },\r\n        ];\r\n        if (this.state.loadRequested) {\r\n            loadButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"alert\",\r\n                    callBack: this.toggleLoad,\r\n                },\r\n                {\r\n                    content: \"Charger sauvegarde locale\",\r\n                    fa: \"fa-cloud-upload\",\r\n                    className: \"warning\",\r\n                    callBack: this.onClickLoad,\r\n                },\r\n                {\r\n                    fa: \"fa-upload\",\r\n                    className: \"warning\",\r\n                    callBack: (e) => this.onFileInputWrapperClick(e),\r\n                    content: (<FileInput label={`\"Charger depuis un fichier .JSON\"`} className=\"noselect\" value={undefined} onChange={this.onFileInputChange} />)\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.saveRequested) {\r\n            buttons.push(...loadButtons);\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className='marche-page'\r\n                onDrop={(e) => this.onDrop(e)}\r\n                onDragOver={\r\n                    (e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                    }\r\n                }\r\n            >\r\n                <NavBar buttons={this._getButtons()} />\r\n                {!!this.state.popupIds.length && (\r\n                    <Popups\r\n                        messageIds={this.state.popupIds}\r\n                        messages={this.state.popups}\r\n                    />\r\n                )}\r\n                {!!this.state.showHelp && (\r\n                    <HelpBox/>\r\n                )}\r\n                {!!DAYS.includes(this.state.showDayForm) && (\r\n                    <DayForm\r\n                        day={this.state.showDayForm}\r\n                        addMessage={this._addMessage}\r\n                    />\r\n                )}\r\n                {!!this.state.showForm && (\r\n                    <EventForm/>\r\n                )}\r\n                <PageData\r\n                    openDay={this.state.showDayForm}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStoreToProps = (store) => {\r\n    return {\r\n        store: store.marche,\r\n    }\r\n}\r\nconst mapDispatchToProps = () => {\r\n    return { setStore, compute, clearStore };\r\n}\r\n\r\nexport default connect(mapStoreToProps, mapDispatchToProps())(Marche);\r\n","import React, { useState } from \"react\";\nimport { useDarkMode } from \"./utils/hooks.js\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n    const [mode, setMode] = useDarkMode();\n\n    function openApp() {\n        setState({ open: true });\n    }\n\n    return (\n        <div className={`page ${mode}`}>\n            {state.open ? (\n                <Marche/>\n            ) : (\n                <div className=\"page accueil-wrapper\" >\n                    <div role='button' className='light-icon-wrapper clickable noselect' onClick={() => setMode(mode === 'light' ? 'dark' : 'light')}>\n                    <i className={'light-icon fa ' + (mode === 'light' ? 'fa-sun-o' : 'fa-moon-o')}></i>\n                    </div>\n                    <Accueil callBack={openApp}/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\r\n\r\nexport { useDarkMode };\r\n\r\nfunction useDarkMode() {\r\n    const preferDarkMedia = \"(prefers-color-scheme: dark)\";\r\n    const [mode, setMode] = React.useState(() => {\r\n        return (\r\n            window.localStorage.getItem(\"color-scheme-option\") ||\r\n            (window.matchMedia(preferDarkMedia).matches ? \"dark\" : \"light\")\r\n        );\r\n    });\r\n    React.useEffect(() => {\r\n        const mediaQuery = window.matchMedia(preferDarkMedia);\r\n        const onMediaChange = () =>\r\n            setMode(mediaQuery.matches ? \"dark\" : \"light\");\r\n        mediaQuery.addListener(onMediaChange);\r\n        window.localStorage.setItem(\"color-scheme-option\", mode);\r\n        return () => mediaQuery.removeListener(onMediaChange);\r\n    }, [mode]);\r\n\r\n    return [mode, setMode];\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { marcheReducer } from './marche.js';\r\n\r\nconst globalReducer = combineReducers({\r\n    marche: marcheReducer,\r\n})\r\n\r\nexport { globalReducer };\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { globalReducer } from './store';\r\n\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\n//const store = createStore(globalReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nconst store = createStore(globalReducer);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// turn service worker off\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}