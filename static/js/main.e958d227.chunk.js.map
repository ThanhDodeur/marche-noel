{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","utils/utils.js","components/NavBar/NavBar.js","components/Popups/Popups.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/DayForm/DayForm.js","components/EventForm/EventForm.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","lastId","newId","prefix","times","x","f","zip","arr1","arr2","map","k","i","NavBar","buttons","value","index","key","onClick","callBack","fa","content","Popups","messageIds","messages","messageId","message","type","title","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dayAccounting","dayName","dailyLoss","tombolaTickets","customersAverage","toFixed","obtainedAverage","PageData","days","costTotal","supplierTotal","dailyAccounting","ticketPrice","soldTickets","values","Number","computeTotal","length","dayIndex","getBenefices","dailyArray","totalSpendings","totalObtained","totalCustomers","getStats","getContent","defaultChange","FileInput","label","onChange","rest","style","display","e","target","files","DayForm","dayRawData","save","addMessage","useState","concat","setCustomers","newCustomer","setNewCustomer","suppliers","setSuppliers","newSupplier","setNewSupplier","undefined","file","setFile","setDayAccounting","customerFirstInput","useRef","supplierFirstInput","useEffect","setTombolaTicket","val","a","saveRow","newCustomerlocal","local","push","newSupplierlocal","setCustomerValue","colIndex","localCustomers","localNewCustomer","setSupplierValue","localSuppliers","localNewSupplier","cKeyDownHandler","current","focus","sKeyDownHandler","onFileInputChange","name","includes","_readFile","page","_readPage","newCustomers","newSuppliers","blob","reader","FileReader","readAsText","Promise","resolve","onload","result","_addMessage","lines","split","shift","currentLine","pattern","event","onKeyDown","customer","ref","supplier","EventForm","eventExpenses","eventExpensesState","setEventExpensesState","ticketP","setTicketP","EXPENSE_TYPES","getExpenseValue","expense","accountingState","assign","setExpense","Marche","loadSave","saved","localStorage","getItem","setState","JSON","parse","_computeResults","saveState","setItem","stringify","daysRawData","state","setDayRawData","data","duration","id","popupIds","popups","setTimeout","newPopupIds","filter","filterId","newPopups","_processDays","entries","dayRaw","_computeDay","forEach","total","rawCustomers","rawSuppliers","rawCustomer","paid","supplied","price","supplierId","rawSupplier","_computeDailyStats","customersTotal","obtainedTotal","customerKeys","customerPaid","customerSupplied","balance","onEventFormSave","clearAll","fromEntries","DAYS","Array","fill","showDayForm","toggleReset","toggleDay","isSameDay","resetRequested","toggleEventForm","isOpen","showForm","_toggleHelp","displayHelp","this","resetButtons","_getButtons","href","React","Component","App","open","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e958d227.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","let lastId = 0;\r\n\r\nexport { newId, times, zip }\r\n\r\nfunction newId(prefix='id') {\r\n    lastId++;\r\n    return `${prefix}${lastId}`;\r\n}\r\nfunction times(x) {\r\n    return (f) => {\r\n        if (x > 0) {\r\n            f()\r\n            times (x - 1) (f)\r\n        }\r\n    }\r\n}\r\n\r\nfunction zip(arr1, arr2) {\r\n    return arr1.map((k, i) => [k, arr2[i]]);\r\n}\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Popups.css\";\r\n\r\nfunction Popups({ messageIds, messages }) {\r\n\r\n    return (\r\n        <div className=\"popups\">\r\n            {messageIds.map((messageId) => {\r\n                const message = messages[messageId];\r\n                return (\r\n                    <div key={messageId} className={\"popup \" + message.type}>\r\n                        <span>{message.title}</span>\r\n                        {message.content}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popups;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {customers[customerId].paidTotal}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {customers[customerId].suppliedTotal}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {missedPayments[customerId]}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dayAccounting }) {\r\n\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {day.dailyLoss}€</div>\r\n                <div>Tickets de tombola vendus: {dayAccounting.tombolaTickets}</div>\r\n                <div>Moyenne des dépenses des clients: {(day.customersAverage || 0).toFixed(3)}€</div>\r\n                <div>Moyenne des objets reçu par les clients: {(day.obtainedAverage || 0).toFixed(3)}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, supplierTotal, dailyAccounting, ticketPrice }) {\r\n\r\n    function getContent() {\r\n        let soldTickets = 0;\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += Number(value.tombolaTickets) || 0;\r\n        }\r\n        return(\r\n            <div className=\"content\">\r\n                {getBenefices(soldTickets)}\r\n                {getStats(soldTickets)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getStats(soldTickets) {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalObtained = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage || 0;\r\n            totalObtained += day.obtainedAverage || 0;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div className=\"global-stats\">\r\n                <h3>Statistiques (sur {days.length} jour(s))</h3>\r\n                <div className=\"daily-stats\">\r\n                    <div><span>Moyenne payée par les clients:</span> <span className=\"value-display\">{(totalSpendings / (dailyArray.length || 1)).toFixed(3)}€</span></div>\r\n                    <div><span>Moyenne des articles reçu:</span> <span className=\"value-display\">{(totalObtained / (dailyArray.length || 1)).toFixed(3)}€</span></div>\r\n                    <div><span>Tickets de tombola Vendus:</span> <span className=\"value-display\">{soldTickets}</span></div>\r\n                    <div><span>Quantité de fiches payées:</span> <span className=\"value-display\">{totalCustomers}</span></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getBenefices(soldTickets) {\r\n        return (\r\n            <div className=\"global-stats\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span className=\"value-display\">{supplierTotal}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{soldTickets} x {ticketPrice}€: </span><span className=\"value-display\">{ticketPrice * (soldTickets)}€ </span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais: </span><span className=\"value-display\">{costTotal}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché: </span><span className=\"value-display\">{computeTotal(soldTickets)}€</span></div>\r\n                {!!days.length &&\r\n                    <span className=\"divider\">_________________________________________________________</span>\r\n                }\r\n                {days.map((value, dayIndex) => {\r\n                    return(<DayData day={value} key={dayIndex} dayAccounting={dailyAccounting[value.dayName]} index={dayIndex}/>)\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function computeTotal(soldTickets) {\r\n        return (supplierTotal + (ticketPrice * (soldTickets))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div>{getContent()}</div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport FileInput from '../FileInput/FileInput.js';\r\nimport { times } from '../../utils/utils.js';\r\nimport \"./DayForm.css\";\r\n\r\n/*\r\n * dayRawData = { customers: [], suppliers: [] }\r\n */\r\nfunction DayForm({ day, dayRawData = {}, save, addMessage, dailyAccounting }) {\r\n\r\n    const [customers, setCustomers] = useState([].concat(dayRawData.customers));\r\n    const [newCustomer, setNewCustomer] = useState([]);\r\n    const [suppliers, setSuppliers] = useState([].concat(dayRawData.suppliers));\r\n    const [newSupplier, setNewSupplier] = useState([]);\r\n    const [file, setFile] = useState(undefined);\r\n    const [dayAccounting, setDayAccounting] = useState(dailyAccounting);\r\n    const customerFirstInput = useRef(null);\r\n    const supplierFirstInput = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            //save(day, { customers, suppliers });\r\n        }\r\n    }, [save, day, customers, suppliers]);\r\n\r\n    const setTombolaTicket = async (val) => {\r\n        await setDayAccounting({tombolaTickets: Number(val)});\r\n        await save(day, { customers, suppliers }, {tombolaTickets: Number(val)});\r\n    }\r\n\r\n    const saveRow = async (type) => {\r\n        let local;\r\n\r\n        if (type === 'customer') {\r\n            const newCustomerlocal = newCustomer;\r\n            await setNewCustomer(['', '', '', '']);\r\n            local = customers;\r\n            local.push(newCustomerlocal)\r\n            await setCustomers(local);\r\n        }\r\n        if (type === 'supplier') {\r\n            const newSupplierlocal = newSupplier;\r\n            await setNewSupplier(['', '', '', '']);\r\n            local = suppliers;\r\n            local.push(newSupplierlocal)\r\n            await setSuppliers(local);\r\n        }\r\n        await save(day, { customers, suppliers }, dayAccounting);\r\n    }\r\n\r\n    const setCustomerValue = (index, colIndex, value) => {\r\n        const localCustomers = customers || [];\r\n\r\n        if (index === false) {\r\n            const localNewCustomer = newCustomer.map(value => value || '');\r\n            localNewCustomer[colIndex] = value;\r\n            setNewCustomer(localNewCustomer)\r\n            return;\r\n        }\r\n\r\n        if (!localCustomers[index]) {\r\n            localCustomers[index] = [];\r\n        }\r\n        localCustomers[index][colIndex] = value;\r\n        setCustomers(localCustomers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    }\r\n\r\n    const setSupplierValue = (index, colIndex, value) => {\r\n        const localSuppliers = suppliers || [];\r\n\r\n        if (index === false) {\r\n            const localNewSupplier = newSupplier.map(value => value || '');;\r\n            localNewSupplier[colIndex] = value;\r\n            setNewSupplier(localNewSupplier)\r\n            return;\r\n        }\r\n\r\n        if (!localSuppliers[index]) {\r\n            localSuppliers[index] = [];\r\n        }\r\n        localSuppliers[index][colIndex] = value;\r\n        setSuppliers(localSuppliers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    }\r\n\r\n    const cKeyDownHandler = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            customerFirstInput.current.focus();\r\n            await saveRow('customer');\r\n        }\r\n    }\r\n\r\n    const sKeyDownHandler = async (e) => {\r\n        if (e.key === 'Enter') {\r\n            supplierFirstInput.current.focus();\r\n            await saveRow('supplier');\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Handler for File Input onChange.\r\n    *\r\n    * @param {file[]} files\r\n    * @return {void}\r\n    */\r\n    const onFileInputChange = async (files) => {\r\n        const file = files[0];\r\n        if (!file.name.includes('.csv')) {\r\n            addMessage('ERREUR', 'Le fichier doit être un .csv', 'error', 8000);\r\n            return;\r\n        }\r\n        await setFile(file);\r\n        const page = await _readFile(file);\r\n        const { newCustomers, newSuppliers } = await _readPage(page);\r\n        setCustomers(newCustomers);\r\n        setSuppliers(newSuppliers);\r\n        save(day, { customers: newCustomers, suppliers: newSuppliers }, dayAccounting);\r\n    }\r\n    /**\r\n    *\r\n    * @param {blob} blob\r\n    * @return {file}\r\n    */\r\n    const _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage('ERREUR', error.message, 'error');\r\n            return false;\r\n        }\r\n    }\r\n    const _readPage = async (page) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        times(OFFSET_HEIGHT) (() => lines.shift());\r\n        // colNames\r\n        lines.shift().split(','); // removes and saves column titles.\r\n        /*\r\n        *\r\n        * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        *\r\n        * suppliers = { supplierId : { total } }\r\n        *\r\n        */\r\n        const newCustomers = [];\r\n        const newSuppliers = [];\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(',');\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   currentLine[0] purchase - customerId\r\n            *   currentLine[1] purchase - supplierId\r\n            *   currentLine[2] purchase - item Name\r\n            *   currentLine[3] purchase - item Price\r\n            *   supplied\r\n            *   currentLine[4] payment - supplierId\r\n            *   currentLine[5] payment - customerId\r\n            *   currentLine[6] payment - item Name\r\n            *   currentLine[7] payment - item Price\r\n            */\r\n\r\n            if (currentLine[0]) { // CUSTOMER SIDE\r\n                newCustomers.push([Number(currentLine[0]), Number(currentLine[1]), currentLine[2], Number(currentLine[3])])\r\n            }\r\n            if (currentLine[4] && currentLine[5]) { // SUPPLIER SIDE\r\n                newSuppliers.push([Number(currentLine[4]), Number(currentLine[5]), currentLine[6], Number(currentLine[7])])\r\n            }\r\n        }\r\n        return { newCustomers, newSuppliers }\r\n    }\r\n\r\n    return (\r\n        <div className=\"content input-page\">\r\n            <div className=\"title-area\">\r\n                <h1>{day}</h1>\r\n                <div className=\"form-button\">\r\n                    <FileInput label=\"Ajouter .csv\"\r\n                        className=\"noselect\"\r\n                        value={file}\r\n                        onChange={onFileInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className=\"ml-10\">Tickets de tombola vendus:</span>\r\n                <input className=\"number-input ml-10\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setTombolaTicket(event.target.value) }} value={ dayAccounting.tombolaTickets }/>\r\n            </div>\r\n            <div className=\"area-container\">\r\n                <div onKeyDown={cKeyDownHandler} className=\"group-input customers\">\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Client</div><div className=\"number\">Fournisseur</div><div className=\"string\">Article</div><div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {customers.map((customer, index) => {\r\n                        return (\r\n                            <div className=\"customer-row row saved-row\" key={'customer_'+index}>\r\n                                <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setCustomerValue(index, 0, event.target.value) }} value={customer[0]}/>\r\n                                <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setCustomerValue(index, 1, event.target.value) }} value={customer[1]}/>\r\n                                <input className=\"string-input\" onChange={event => { setCustomerValue(index, 2, event.target.value) }} value={customer[2]}/>\r\n                                <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setCustomerValue(index, 3, event.target.value) }} value={customer[3]}/>€\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <div className=\"customer-row row new-row\">\r\n                        <input ref={customerFirstInput} className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setCustomerValue(false, 0, event.target.value) }} value={newCustomer[0]}/>\r\n                        <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setCustomerValue(false, 1, event.target.value) }} value={newCustomer[1]}/>\r\n                        <input className=\"string-input\" onChange={event => { setCustomerValue(false, 2, event.target.value) }} value={newCustomer[2]}/>\r\n                        <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setCustomerValue(false, 3, event.target.value) }} value={newCustomer[3]}/>€\r\n                    </div>\r\n                    <div>\r\n                        appuiez sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n                <div onKeyDown={sKeyDownHandler} className=\"group-input suppliers\">\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Fournisseur</div><div className=\"number\">Client</div><div className=\"string\">Article</div><div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {suppliers.map((supplier, index) => {\r\n                        return (\r\n                            <div className=\"supplier-row row saved-row\" key={'supplier_'+index}>\r\n                                <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setSupplierValue(index, 0, event.target.value) }} value={supplier[0]}/>\r\n                                <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setSupplierValue(index, 1, event.target.value) }} value={supplier[1]}/>\r\n                                <input className=\"string-input\" onChange={event => { setSupplierValue(index, 2, event.target.value) }} value={supplier[2]}/>\r\n                                <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setSupplierValue(index, 3, event.target.value) }} value={supplier[3]}/>€\r\n                            </div>\r\n                        )\r\n                    })}\r\n                    <div className=\"supplier-row row new-row\">\r\n                        <input ref={supplierFirstInput} className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setSupplierValue(false, 0, event.target.value) }} value={newSupplier[0]}/>\r\n                        <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setSupplierValue(false, 1, event.target.value) }} value={newSupplier[1]}/>\r\n                        <input className=\"string-input\" onChange={event => { setSupplierValue(false, 2, event.target.value) }} value={newSupplier[2]}/>\r\n                        <input className=\"number-input\" pattern=\"[0-9]*\" type=\"number\" onChange={event => { setSupplierValue(false, 3, event.target.value) }} value={newSupplier[3]}/>€\r\n                    </div>\r\n                    <div>\r\n                        appuiez sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayForm;","import React, { useState, useEffect } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm({ eventExpenses, ticketPrice, save }) {\r\n\r\n    const [eventExpensesState, setEventExpensesState] = useState(eventExpenses || {});\r\n    const [ticketP, setTicketP] = useState(ticketPrice || 0);\r\n\r\n    // the names are only relevant in this context, the parent component will just make a sum of all those expenses.\r\n    const EXPENSE_TYPES = ['Salle', 'Transactions', 'Assurance', 'Papeterie', 'Timbres', 'Courses', 'Traiteur', 'Schmitz', 'Autre'];\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            save({\r\n                eventExpenses: eventExpensesState,\r\n                ticketPrice: ticketP,\r\n            });\r\n        }\r\n    }, [save, eventExpensesState, ticketP]);\r\n\r\n\r\n    function setExpense(expense, value) {\r\n        const accountingState = Object.assign({}, eventExpensesState);\r\n        accountingState[expense] = value;\r\n        setEventExpensesState(accountingState);\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventExpensesState[expense] || 0;\r\n    }\r\n\r\n    function renderEventExpenses() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketP(Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form\">\r\n                {renderEventExpenses()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React from 'react';\r\nimport './Marche.css';\r\n\r\nimport { newId, zip } from '../../utils/utils.js';\r\nimport NavBar from '../NavBar/NavBar.js';\r\nimport Popups from '../Popups/Popups.js';\r\nimport PageData from '../PageData/PageData.js';\r\nimport DayForm from '../DayForm/DayForm.js';\r\nimport EventForm from '../EventForm/EventForm.js';\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.DAYS = ['Vendredi', 'Samedi', 'Dimanche']; // const\r\n        this.state = {\r\n            daysRawData: Object.fromEntries(zip(this.DAYS, Array(3).fill({'customers': [], 'suppliers': []}))),\r\n            days: [], // { dayName, customers, missedPayments, dailyLoss, customersAverage, obtainedAverage }\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false, // toggle for the confirm/cancel buttons for removing files\r\n            showForm: false, // toggle for the accounting/event input form\r\n            showDayForm: false, // false or this.DAYS[*]\r\n            displayHelp: false, // toggle the \"help\" box\r\n            eventExpenses: {}, // {expenseName: <int>amount}\r\n            dailyAccounting: Object.fromEntries(zip(this.DAYS, Array(3).fill({'tombolaTickets': 0}))), // { dayName: {valuesDict} }\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n            popupIds: [],\r\n            popups: {}, // {content, type}\r\n        };\r\n    }\r\n\r\n    loadSave = async () => {\r\n        const saved = localStorage.getItem('saved-state');\r\n        if (saved) {\r\n            await this.setState(JSON.parse(saved));\r\n        }\r\n        await this._addMessage('Chargé', 'La dernière sauvegarde à été chargée', 'info', 5000);\r\n        await this._computeResults();\r\n    }\r\n    saveState = async () => {\r\n        localStorage.setItem('saved-state', JSON.stringify({\r\n            daysRawData: this.state.daysRawData,\r\n            eventExpenses: this.state.eventExpenses,\r\n            dailyAccounting: this.state.dailyAccounting,\r\n            ticketPrice: this.state.ticketPrice,\r\n        }));\r\n        await this._addMessage('Sauvegardé', 'Les informations ont été sauvegardées', 'info', 5000);\r\n    }\r\n    /**\r\n     *\r\n     * @param {String} day\r\n     * @param {Object} data\r\n     * @param {Object} dayAccounting\r\n     */\r\n    setDayRawData = async (day, data, dayAccounting) => {\r\n        const daysRawData = Object.assign({}, this.state.daysRawData);\r\n        daysRawData[day] = data;\r\n        await this.setState({ daysRawData, dailyAccounting: Object.assign(this.state.dailyAccounting, {[day]: dayAccounting}) });\r\n    }\r\n    /**\r\n     *\r\n     * @param {String} title\r\n     * @param {String} content text content of the message\r\n     * @param {String} [type] info | error\r\n     * @param {Number} [duration] amount of ms\r\n     */\r\n    _addMessage = async (title, content, type, duration) => {\r\n        duration = duration || 5000;\r\n        type = type || 'info';\r\n        const id = newId('message');\r\n        await this.setState({\r\n            popupIds: this.state.popupIds.concat(id),\r\n            popups: Object.assign({}, this.state.popups, {\r\n                [id]: {\r\n                    title,\r\n                    content,\r\n                    type,\r\n                },\r\n            }),\r\n        });\r\n        setTimeout(async () => {\r\n            const newPopupIds = this.state.popupIds.filter((filterId) => {\r\n                return filterId !== id;\r\n            });\r\n            const newPopups = Object.assign({}, this.state.popups);\r\n            delete newPopups[id];\r\n            await this.setState({\r\n                popupIds: newPopupIds,\r\n                popups: newPopups,\r\n            });\r\n        }, duration);\r\n    }\r\n    /**\r\n     * Extracts values from day raw data.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    _processDays = async () => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        let supplierTotal = 0;\r\n        for (const [dayName, dayRaw] of Object.entries(this.state.daysRawData)) {\r\n            const result = this._computeDay({ dayName, dayRaw, suppliers });\r\n            suppliers = result.suppliers;\r\n            days.push(result.day);\r\n        }\r\n        Object.values(suppliers).forEach(val => supplierTotal += val.total);\r\n        return { days, suppliers, supplierTotal };\r\n    }\r\n    /**\r\n     *\r\n     * @param {Object} param0\r\n     * @param {String} param0.dayName\r\n     * @param {Object} param0.dayRaw\r\n     * @param {Object} param0.suppliers\r\n     */\r\n    _computeDay = ({ dayName, dayRaw, suppliers }) => {\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   rawCustomers[*][0] purchase - customerId\r\n            *   rawCustomers[*][1] purchase - supplierId\r\n            *   rawCustomers[*][2] purchase - item Name\r\n            *   rawCustomers[*][3] purchase - item Price\r\n            *   supplied\r\n            *   rawSuppliers[*][0] payment - supplierId\r\n            *   rawSuppliers[*][1] payment - customerId\r\n            *   rawSuppliers[*][2] payment - item Name\r\n            *   rawSuppliers[*][3] payment - item Price\r\n            */\r\n            const rawCustomers = dayRaw.customers;\r\n            const rawSuppliers = dayRaw.suppliers;\r\n            const customers = {};\r\n\r\n            for (const rawCustomer of rawCustomers) {\r\n                if (rawCustomer[0]) { // CUSTOMER SIDE\r\n                    // creates the customer if it doesn't already exist.\r\n                    customers[rawCustomer[0]] = customers[rawCustomer[0]] || {\r\n                        paid: [],\r\n                        paidTotal: 0,\r\n                        supplied: [],\r\n                        suppliedTotal: 0,\r\n                    };\r\n                    // adds the total paid by the customer\r\n                    customers[rawCustomer[0]].paidTotal += Number(rawCustomer[3]) || 0;\r\n                    // adds a line for what the customer paid\r\n                    customers[rawCustomer[0]].paid.push({\r\n                        name: rawCustomer[2],\r\n                        price: rawCustomer[3],\r\n                        supplierId: rawCustomer[1],\r\n                    });\r\n                }\r\n            }\r\n            for (const rawSupplier of rawSuppliers) {\r\n                if (rawSupplier[0] && rawSupplier[1]) { // SUPPLIER SIDE\r\n                    customers[rawSupplier[1]] = customers[rawSupplier[1]] || {\r\n                        paid: [],\r\n                        paidTotal: 0,\r\n                        supplied: [],\r\n                        suppliedTotal: 0,\r\n                    };\r\n                    // adds the total paid by the customer\r\n                    customers[rawSupplier[1]].suppliedTotal += Number(rawSupplier[3]) || 0;\r\n                    // adds a line for what the customer recieved (not a guarantee of payment)\r\n                    customers[rawSupplier[1]].supplied.push({\r\n                        name: rawSupplier[2],\r\n                        price: rawSupplier[3],\r\n                        supplierId: rawSupplier[0],\r\n                    });\r\n                    // computes the total value of supplied by the supplier.\r\n                    suppliers[rawSupplier[0]] = suppliers[rawSupplier[0]] || { total: 0 };\r\n                    suppliers[rawSupplier[0]].total += Number(rawSupplier[3]) || 0;\r\n                }\r\n            }\r\n\r\n        const { missedPayments, dailyLoss, customersAverage, obtainedAverage } = this._computeDailyStats(customers);\r\n        return {day: { dayName, customers, missedPayments, dailyLoss, customersAverage, obtainedAverage }, suppliers };\r\n    }\r\n    /**\r\n     *\r\n     * @param {Object} customers\r\n     */\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        let obtainedTotal = 0;\r\n        const customerKeys = Object.keys(customers);\r\n        for (const customerId of customerKeys) {\r\n            const customerPaid = customers[customerId].paidTotal;\r\n            const customerSupplied = customers[customerId].suppliedTotal;\r\n            const balance =  customerSupplied - customerPaid;\r\n            obtainedTotal += Number(customerSupplied);\r\n            customersTotal += Number(customerPaid);\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n        }\r\n        const customersAverage = customersTotal / (customerKeys.length || 0);\r\n        const obtainedAverage = obtainedTotal / (customerKeys.length || 0);\r\n        return { missedPayments, dailyLoss, customersTotal, customersAverage, obtainedAverage };\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n    * Handler for event form.\r\n    */\r\n    onEventFormSave = async ({ eventExpenses, ticketPrice }) => {\r\n        let costTotal = 0;\r\n        Object.values(eventExpenses).forEach(val => costTotal += val);\r\n        await this.setState({ eventExpenses, ticketPrice, costTotal });\r\n    }\r\n    /**\r\n    * processes the days and updates the state.\r\n    */\r\n    _computeResults = async () => {\r\n        const { days, suppliers, supplierTotal } = await this._processDays();\r\n        await this.setState({ days, suppliers, supplierTotal });\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    clearAll = async () => {\r\n        await this.setState({\r\n            daysRawData: Object.fromEntries(zip(this.DAYS, Array(3).fill({'customers': [], 'suppliers': []}))),\r\n            showDayForm: false,\r\n            eventExpenses: {},\r\n            dailyAccounting: Object.fromEntries(zip(this.DAYS, Array(3).fill({'tombolaTickets': 0}))),\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n        });\r\n        await this._computeResults();\r\n        await this._addMessage('', 'Tout le contenu a été réinitialisé', 'error', 5000);\r\n        await this.toggleReset();\r\n    }\r\n    /**\r\n     *\r\n     * @param {String} day\r\n     */\r\n   toggleDay = async (day) => {\r\n        const isSameDay = this.state.showDayForm === day;\r\n        await this.setState({ showDayForm: false });\r\n        if (!isSameDay) {\r\n            await this.setState({ showDayForm: day });\r\n        }\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    toggleReset = async () => {\r\n        await this.setState({ resetRequested: !this.state.resetRequested });\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    toggleEventForm = async () => {\r\n        const isOpen = this.state.showForm;\r\n        await this.setState({ showForm: !isOpen });\r\n        if (isOpen) {\r\n            this._computeResults();\r\n        }\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    _toggleHelp = async () => {\r\n        await this.setState({ displayHelp: !this.state.displayHelp });\r\n    }\r\n    /**\r\n     * @returns {Array} buttons\r\n     */\r\n   _getButtons() {\r\n\r\n        // MAIN\r\n        const buttons = [\r\n            {className: ((this.state.showForm ? 'active' : '') + ' purple'), fa: 'fa-eur', content: 'Comptabilité', callBack: this.toggleEventForm},\r\n        ]\r\n\r\n        // ADD DAYS\r\n        for (const day of this.DAYS) {\r\n            buttons.push({\r\n                className: ((this.state.showDayForm === day ? 'active' : '') + ' green'),\r\n                fa: 'fa-calendar',\r\n                callBack: () => { this.toggleDay(day) },\r\n                content: day,\r\n            });\r\n        }\r\n\r\n        // REMOVE FILES\r\n        let resetButtons = [{content: 'Tout effacer', fa: 'fa-trash', className: 'warning', callBack: this.toggleReset}];\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {content: 'Annuler', fa: 'fa-times', className: 'green', callBack: this.toggleReset},\r\n                {content: 'Confirmer', fa: 'fa-check', className: 'alert', callBack: this.clearAll},\r\n            ];\r\n        }\r\n        buttons.push(...resetButtons);\r\n\r\n        // COMPUTE\r\n        if (Object.keys(this.state.daysRawData).length && !this.state.showForm && !this.state.resetRequested) {\r\n            buttons.push({ content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this._computeResults });\r\n        }\r\n\r\n        buttons.push(...[\r\n            { content: 'Aide', fa: 'fa-info-circle', className: 'blue order-2 ml-auto', callBack: this._toggleHelp },\r\n            { content: 'Charcher', fa: 'fa-download', className: 'green order-2', callBack: this.loadSave },\r\n            { content: 'Sauvegarder', fa: 'fa-upload', className: 'green order-2', callBack: this.saveState },\r\n        ]);\r\n        return buttons;\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <NavBar\r\n                buttons={this._getButtons()}\r\n            />\r\n            {!!this.state.popupIds.length &&\r\n                <Popups messageIds={this.state.popupIds} messages={this.state.popups}/>\r\n            }\r\n            {!! this.state.displayHelp &&\r\n                <div className=\"help\">\r\n                    <div className=\"help-link ml-auto\">\r\n                        <a className=\"help-text\" target=\"new\" href=\"https://docs.google.com/spreadsheets/d/1UKT38_RUa3MQ_HEGtWgaPKvedD35wYksaj7-T0sc9N8/edit?usp=sharing\">\r\n                            Fiche à remplire\r\n                        </a>\r\n                        <i className=\"fa fa-file-excel-o\"/>\r\n                    </div>\r\n                    <div className=\"help-link ml-auto\">\r\n                        <a className=\"help-text\" target=\"new\" href=\"https://drive.google.com/file/d/18Cs7Gyetq9kGnfS8gg4BnLfDHVo5YATV/view?usp=sharing\">\r\n                            Vidéo d'explication\r\n                        </a>\r\n                        <i className=\"fa fa-play\"/>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {!!this.DAYS.includes(this.state.showDayForm) && (\r\n                <DayForm\r\n                    day={this.state.showDayForm}\r\n                    dayRawData={this.state.daysRawData[this.state.showDayForm]}\r\n                    save={this.setDayRawData}\r\n                    addMessage={this._addMessage}\r\n                    dailyAccounting={this.state.dailyAccounting[this.state.showDayForm]}\r\n                />\r\n            )}\r\n            {!!this.state.showForm ? (\r\n                <EventForm\r\n                    eventExpenses={this.state.eventExpenses}\r\n                    ticketPrice={this.state.ticketPrice}\r\n                    save={this.onEventFormSave}\r\n                />\r\n            ) : (\r\n                <PageData\r\n                    days={this.state.days}\r\n                    dailyAccounting={this.state.dailyAccounting}\r\n                    ticketPrice={this.state.ticketPrice}\r\n                    costTotal={this.state.costTotal}\r\n                    supplierTotal={this.state.supplierTotal}\r\n                />\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function toggleApp() {\n        setState({ open: !state.open });\n    }\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={toggleApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// turn service worker off\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}