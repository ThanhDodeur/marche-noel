{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","utils/utils.js","components/NavBar/NavBar.js","components/Popups/Popups.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/DayForm/DayForm.js","components/EventForm/EventForm.js","components/HelpBox/HelpBox.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","lastId","newId","prefix","times","x","f","zip","arr1","arr2","map","k","i","rounded","num","decimal","Number","exp","Math","abs","round","EPSILON","pow","NavBar","buttons","value","index","key","onClick","callBack","fa","content","Popups","messageIds","messages","messageId","message","type","title","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dayAccounting","length","dayName","dailyLoss","tombolaTickets","customersAverage","obtainedAverage","PageData","days","costTotal","suppliers","openDay","supplierTotal","dailyAccounting","ticketPrice","soldTickets","supplierTuples","entries","sort","a","b","total","values","computeTotal","dayIndex","getBenefices","dailyArray","totalSpendings","totalObtained","totalCustomers","getStats","tuple","getSupplierLadder","getContent","defaultChange","FileInput","label","onChange","rest","style","display","e","target","files","DayForm","dayRawData","save","addMessage","useState","concat","setCustomers","newCustomer","setNewCustomer","setSuppliers","newSupplier","setNewSupplier","undefined","file","setFile","setDayAccounting","customerFirstInput","useRef","supplierFirstInput","_readFile","blob","reader","FileReader","readAsText","Promise","resolve","onload","result","_addMessage","_readPage","page","lines","split","shift","newCustomers","newSuppliers","currentLine","push","_saveRow","newCustomerlocal","local","newSupplierlocal","onCustomerGroupInputKeyDown","current","focus","onFileInputChange","name","includes","onSupplierGroupInputKeyDown","setCustomerValue","colIndex","localCustomers","localNewCustomer","setSupplierValue","localSuppliers","localNewSupplier","setTombolaTicket","val","input","currentTarget","getElementsByTagName","click","onFileInputWrapperClick","pattern","event","onKeyDown","customer","ref","supplier","EventForm","eventExpenses","eventExpensesState","setEventExpensesState","ticketP","setTicketP","EXPENSE_TYPES","getExpenseValue","expense","useEffect","accountingState","assign","setExpense","HelpBox","showVideo","setShowVideo","href","width","height","Marche","_loadSave","saveName","saved","localStorage","getItem","setState","JSON","parse","_computeResults","_saveState","setItem","stringify","daysRawData","state","_processDays","missedPaymentsByDay","duration","id","popupIds","popups","setTimeout","newPopupIds","filter","filterId","newPopups","dayRaw","_computeDay","forEach","rawCustomers","rawSuppliers","rawCustomer","paid","supplied","price","supplierId","rawSupplier","_computeDailyStats","customersTotal","obtainedTotal","customerKeys","customerPaid","customerSupplied","balance","clearAll","fromEntries","DAYS","Array","fill","showDayForm","toggleReset","onClickLoad","toggleLoad","onClickSave","onClose","onSaveDayForm","data","onSaveEventForm","toggleDay","isSameDay","showForm","toggleEventForm","isOpen","toggleHelp","displayHelp","loadRequested","resetRequested","toggleSave","saveRequested","window","addEventListener","this","removeEventListener","resetButtons","saveButtons","loadButtons","_getButtons","React","Component","App","open","menu","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab5ec6a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","let lastId = 0;\r\n\r\nexport { newId, times, zip, rounded }\r\n\r\nfunction newId(prefix='id') {\r\n    lastId++;\r\n    return `${prefix}${lastId}`;\r\n}\r\nfunction times(x) {\r\n    return (f) => {\r\n        if (x > 0) {\r\n            f()\r\n            times (x - 1) (f)\r\n        }\r\n    }\r\n}\r\n\r\nfunction zip(arr1, arr2) {\r\n    return arr1.map((k, i) => [k, arr2[i]]);\r\n}\r\n\r\nfunction rounded(num, decimal) {\r\n    if (!num) return 0;\r\n    num = Number(num);\r\n    const exp = Math.abs(decimal);\r\n    return Math.round((num + Number.EPSILON) * Math.pow(10, exp)) / Math.pow(10, exp);\r\n}","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Popups.css\";\r\n\r\nfunction Popups({ messageIds, messages }) {\r\n\r\n    return (\r\n        <div className=\"popups\">\r\n            {messageIds.map((messageId) => {\r\n                const message = messages[messageId];\r\n                return (\r\n                    <div key={messageId} className={\"popup \" + message.type}>\r\n                        <span>{message.title}</span>\r\n                        {message.content}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popups;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {rounded(customers[customerId].paidTotal, 3)}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {rounded(customers[customerId].suppliedTotal, 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {rounded(missedPayments[customerId], 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dayAccounting }) {\r\n    if (!Object.keys(day.customers).length) {\r\n        return (<div></div>);\r\n    }\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {rounded(day.dailyLoss, 3)}€</div>\r\n                <div>Tickets de tombola vendus: {dayAccounting.tombolaTickets}</div>\r\n                <div>Moyenne des dépenses des clients: {rounded((day.customersAverage || 0), 3)}€</div>\r\n                <div>Moyenne des objets reçu par les clients: {rounded((day.obtainedAverage || 0), 3)}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, suppliers, openDay, supplierTotal, dailyAccounting, ticketPrice }) {\r\n\r\n    function getContent() {\r\n        let soldTickets = 0;\r\n        const supplierTuples = Object.entries(suppliers);\r\n        supplierTuples.sort((a, b) => {\r\n            if (a[1].total < b[1].total) {\r\n                return 1;\r\n            }\r\n            if (a[1].total > b[1].total) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += Number(value.tombolaTickets) || 0;\r\n        }\r\n        return(\r\n            <div className=\"content\">\r\n                {getBenefices(soldTickets)}\r\n                {getStats(soldTickets)}\r\n                {!!supplierTuples.length && getSupplierLadder(supplierTuples)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getSupplierLadder(supplierTuples) {\r\n        return (\r\n            <div className=\"global-stats\">\r\n               <h3>Classement des fournisseurs</h3>\r\n                {supplierTuples && supplierTuples.map((tuple, index) => {\r\n                    return(\r\n                        <div className=\"ladder-entry\">\r\n                            <span>{index+1}.</span>\r\n                            <span>[{tuple[0]}]</span>\r\n                            <span className=\"value\">{rounded(tuple[1].total, 3)}€</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getStats(soldTickets) {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalObtained = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage || 0;\r\n            totalObtained += day.obtainedAverage || 0;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div className=\"global-stats\">\r\n                <h3>Statistiques (sur {days.length} jour(s))</h3>\r\n                <div className=\"daily-stats\">\r\n                    <div><span>Moyenne payée par les clients:</span> <span className=\"value-display\">{rounded((totalSpendings / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Moyenne des articles reçu:</span> <span className=\"value-display\">{rounded((totalObtained / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Tickets de tombola Vendus:</span> <span className=\"value-display\">{soldTickets}</span></div>\r\n                    <div><span>Quantité de fiches payées:</span> <span className=\"value-display\">{totalCustomers}</span></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getBenefices(soldTickets) {\r\n        return (\r\n            <div className=\"global-stats profits\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span className=\"value-display\">{rounded(supplierTotal, 3)}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{soldTickets} x {ticketPrice}€: </span><span className=\"value-display\">{rounded(ticketPrice * (soldTickets), 3)}€ </span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais: </span><span className=\"value-display\">-{rounded(costTotal, 3)}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché: </span><span className=\"value-display\">{rounded(computeTotal(soldTickets), 3)}€</span></div>\r\n                {days.map((value, dayIndex) => {\r\n                    if (!(openDay && openDay !== value.dayName)) {\r\n                        return(<DayData day={value} key={dayIndex} dayAccounting={dailyAccounting[value.dayName]} index={dayIndex}/>);\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function computeTotal(soldTickets) {\r\n        return (supplierTotal + (ticketPrice * (soldTickets))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div>{getContent()}</div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useRef } from \"react\";\r\nimport FileInput from \"../FileInput/FileInput.js\";\r\nimport { times } from \"../../utils/utils.js\";\r\nimport \"./DayForm.css\";\r\n\r\n/*\r\n * dayRawData = { customers: [], suppliers: [] }\r\n */\r\nfunction DayForm({\r\n    day,\r\n    dayRawData = {},\r\n    save,\r\n    addMessage,\r\n    dailyAccounting,\r\n    missedPayments,\r\n}) {\r\n    const [customers, setCustomers] = useState([].concat(dayRawData.customers));\r\n    const [newCustomer, setNewCustomer] = useState([]);\r\n    const [suppliers, setSuppliers] = useState([].concat(dayRawData.suppliers));\r\n    const [newSupplier, setNewSupplier] = useState([]);\r\n    const [file, setFile] = useState(undefined);\r\n    const [dayAccounting, setDayAccounting] = useState(dailyAccounting);\r\n    const customerFirstInput = useRef(null);\r\n    const supplierFirstInput = useRef(null);\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {blob} blob\r\n     * @return {file}\r\n     */\r\n    const _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage(\"ERREUR\", error.message, \"error\");\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} page returned by a fileReader in \"reader.readAsText\"\r\n     */\r\n    const _readPage = async (page) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        times(OFFSET_HEIGHT)(() => lines.shift());\r\n        // colNames\r\n        lines.shift().split(\",\"); // removes and saves column titles.\r\n        /*\r\n         *\r\n         * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n         * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n         * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n         *\r\n         * suppliers = { supplierId : { total } }\r\n         *\r\n         */\r\n        const newCustomers = [];\r\n        const newSuppliers = [];\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(\",\");\r\n\r\n            /* DATA FILL\r\n             *   paid\r\n             *   currentLine[0] purchase - customerId\r\n             *   currentLine[1] purchase - supplierId\r\n             *   currentLine[2] purchase - item Name\r\n             *   currentLine[3] purchase - item Price\r\n             *   supplied\r\n             *   currentLine[4] payment - supplierId\r\n             *   currentLine[5] payment - customerId\r\n             *   currentLine[6] payment - item Name\r\n             *   currentLine[7] payment - item Price\r\n             */\r\n\r\n            if (currentLine[0]) {\r\n                // CUSTOMER SIDE\r\n                newCustomers.push([\r\n                    Number(currentLine[0]),\r\n                    Number(currentLine[1]),\r\n                    currentLine[2],\r\n                    Number(currentLine[3]),\r\n                ]);\r\n            }\r\n            if (currentLine[4] && currentLine[5]) {\r\n                // SUPPLIER SIDE\r\n                newSuppliers.push([\r\n                    Number(currentLine[4]),\r\n                    Number(currentLine[5]),\r\n                    currentLine[6],\r\n                    Number(currentLine[7]),\r\n                ]);\r\n            }\r\n        }\r\n        return { newCustomers, newSuppliers };\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} type customer or supplier\r\n     */\r\n    const _saveRow = async (type) => {\r\n        let local;\r\n\r\n        if (type === \"customer\") {\r\n            const newCustomerlocal = newCustomer;\r\n            await setNewCustomer([\"\", \"\", \"\", \"\"]);\r\n            local = customers;\r\n            local.push(newCustomerlocal);\r\n            await setCustomers(local);\r\n        }\r\n        if (type === \"supplier\") {\r\n            const newSupplierlocal = newSupplier;\r\n            await setNewSupplier([\"\", \"\", \"\", \"\"]);\r\n            local = suppliers;\r\n            local.push(newSupplierlocal);\r\n            await setSuppliers(local);\r\n        }\r\n        await save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onCustomerGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    };\r\n    /**\r\n     * Handler for File Input onChange.\r\n     *\r\n     * @param {file[]} files\r\n     * @return {void}\r\n     */\r\n    const onFileInputChange = async (files) => {\r\n        const file = files[0];\r\n        if (!file.name.includes(\".csv\")) {\r\n            addMessage(\"ERREUR\", \"Le fichier doit être un .csv\", \"error\", 8000);\r\n            return;\r\n        }\r\n        await setFile(file);\r\n        const page = await _readFile(file);\r\n        const { newCustomers, newSuppliers } = await _readPage(page);\r\n        setCustomers(newCustomers);\r\n        setSuppliers(newSuppliers);\r\n        save(\r\n            day,\r\n            { customers: newCustomers, suppliers: newSuppliers },\r\n            dayAccounting\r\n        );\r\n    };\r\n    /**\r\n     *\r\n     * @param {mouseEvent} e\r\n     */\r\n    const onFileInputWrapperClick = (e) => {\r\n        // allows clicking on the file input from the outside element.\r\n        const input = e.currentTarget.getElementsByTagName(\"input\");\r\n        if (input.length) {\r\n            input[0].click();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onSupplierGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setCustomerValue = (index, colIndex, value) => {\r\n        const localCustomers = customers || [];\r\n\r\n        if (index === false) {\r\n            const localNewCustomer = newCustomer.map((value) => value || \"\");\r\n            localNewCustomer[colIndex] = value;\r\n            setNewCustomer(localNewCustomer);\r\n            return;\r\n        }\r\n\r\n        if (!localCustomers[index]) {\r\n            localCustomers[index] = [];\r\n        }\r\n        localCustomers[index][colIndex] = value;\r\n        setCustomers(localCustomers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setSupplierValue = (index, colIndex, value) => {\r\n        const localSuppliers = suppliers || [];\r\n\r\n        if (index === false) {\r\n            const localNewSupplier = newSupplier.map((value) => value || \"\");\r\n            localNewSupplier[colIndex] = value;\r\n            setNewSupplier(localNewSupplier);\r\n            return;\r\n        }\r\n\r\n        if (!localSuppliers[index]) {\r\n            localSuppliers[index] = [];\r\n        }\r\n        localSuppliers[index][colIndex] = value;\r\n        setSuppliers(localSuppliers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number || String} val the value of the input\r\n     */\r\n    const setTombolaTicket = async (val) => {\r\n        await setDayAccounting({ tombolaTickets: Number(val) });\r\n        await save(\r\n            day,\r\n            { customers, suppliers },\r\n            { tombolaTickets: Number(val) }\r\n        );\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    return (\r\n        <div className=\"content input-page\">\r\n            <div className=\"title-area ml-10\">\r\n                <h1>{day}</h1>\r\n                <div\r\n                    className=\"form-button\"\r\n                    onClick={(e) => onFileInputWrapperClick(e)}\r\n                >\r\n                    <FileInput\r\n                        label=\"Ajouter .csv\"\r\n                        className=\"noselect\"\r\n                        value={file}\r\n                        onChange={onFileInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className=\"ml-10\">Tickets de tombola vendus:</span>\r\n                <input\r\n                    className=\"number-input ml-10\"\r\n                    pattern=\"[0-9]*\"\r\n                    type=\"number\"\r\n                    onChange={(event) => {\r\n                        setTombolaTicket(event.target.value);\r\n                    }}\r\n                    value={dayAccounting.tombolaTickets}\r\n                />\r\n            </div>\r\n            <div className=\"area-container\">\r\n                <div\r\n                    onKeyDown={onCustomerGroupInputKeyDown}\r\n                    className=\"group-input customers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {customers.map((customer, index) => {\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"customer-row row saved-row \" +\r\n                                    (!!(\r\n                                        missedPayments &&\r\n                                        missedPayments[customer[0]]\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"customer_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"customer-row row new-row\">\r\n                        <input\r\n                            ref={customerFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newCustomer[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newCustomer[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newCustomer[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newCustomer[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        appuiez sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    onKeyDown={onSupplierGroupInputKeyDown}\r\n                    className=\"group-input suppliers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {suppliers.map((supplier, index) => {\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"supplier-row row saved-row \" +\r\n                                    (!!(\r\n                                        missedPayments &&\r\n                                        missedPayments[supplier[1]]\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"supplier_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"supplier-row row new-row\">\r\n                        <input\r\n                            ref={supplierFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newSupplier[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newSupplier[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newSupplier[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newSupplier[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        appuiez sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm({ eventExpenses, ticketPrice, save }) {\r\n\r\n    const [eventExpensesState, setEventExpensesState] = useState(eventExpenses || {});\r\n    const [ticketP, setTicketP] = useState(ticketPrice || 0);\r\n\r\n    // the names are only relevant in this context, the parent component will just make a sum of all those expenses.\r\n    const EXPENSE_TYPES = ['Salle', 'Transactions', 'Assurance', 'Papeterie', 'Timbres', 'Courses', 'Traiteur', 'Schmitz', 'Autre'];\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            save({\r\n                eventExpenses: eventExpensesState,\r\n                ticketPrice: ticketP,\r\n            });\r\n        }\r\n    }, [save, eventExpensesState, ticketP]);\r\n\r\n\r\n    function setExpense(expense, value) {\r\n        const accountingState = Object.assign({}, eventExpensesState);\r\n        accountingState[expense] = value;\r\n        setEventExpensesState(accountingState);\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventExpensesState[expense] || 0;\r\n    }\r\n\r\n    function renderEventExpenses() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketP(Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form\">\r\n                {renderEventExpenses()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./HelpBox.css\";\r\n\r\nfunction HelpBox() {\r\n\r\n    const [showVideo, setShowVideo] = useState(false);\r\n\r\n    const toggleVideo = () => {\r\n        setShowVideo(!showVideo);\r\n    }\r\n\r\n    return (\r\n        <div className=\"help\">\r\n            <div className=\"help-link ml-auto\">\r\n                <a\r\n                    className=\"help-text\"\r\n                    target=\"new\"\r\n                    href=\"https://docs.google.com/spreadsheets/d/1UKT38_RUa3MQ_HEGtWgaPKvedD35wYksaj7-T0sc9N8/edit?usp=sharing\"\r\n                >\r\n                    Format accepté\r\n                </a>\r\n                <i className=\"fa fa-file-excel-o\" />\r\n            </div>\r\n            <div className=\"help-link ml-auto\" onClick={toggleVideo}>\r\n                <u>Vidéo d'explication</u>\r\n                <i className=\"fa fa-play\" />\r\n            </div>\r\n            {!!showVideo &&\r\n                (\r\n                    <iframe src=\"https://drive.google.com/file/d/1hk40AsnzUJ7gUevslwSnfZGkSvyJ0OKu/preview\" width=\"900\" height=\"500\"/>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HelpBox;\r\n\r\n","import React from \"react\";\r\nimport \"./Marche.css\";\r\n\r\nimport { newId, zip } from \"../../utils/utils.js\";\r\nimport NavBar from \"../NavBar/NavBar.js\";\r\nimport Popups from \"../Popups/Popups.js\";\r\nimport PageData from \"../PageData/PageData.js\";\r\nimport DayForm from \"../DayForm/DayForm.js\";\r\nimport EventForm from \"../EventForm/EventForm.js\";\r\nimport HelpBox from \"../HelpBox/HelpBox.js\";\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.DAYS = [\"Vendredi\", \"Samedi\", \"Dimanche\"]; // const\r\n        this.state = {\r\n            daysRawData: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n            ),\r\n            days: [], // { dayName, customers, missedPayments, dailyLoss, customersAverage, obtainedAverage }\r\n            missedPaymentsByDay: {},\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false, // toggle for the confirm/cancel buttons for removing files\r\n            loadRequested: false,\r\n            saveRequested: false,\r\n            showForm: false, // toggle for the accounting/event input form\r\n            showDayForm: false, // false or this.DAYS[*]\r\n            displayHelp: false, // toggle the \"help\" box\r\n            eventExpenses: {}, // {expenseName: <int>amount}\r\n            dailyAccounting: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n            ), // { dayName: {valuesDict} }\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n            popupIds: [],\r\n            popups: {}, // {content, type}\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        window.addEventListener('beforeunload', this.onClose);\r\n        await this._loadSave('saved-state-auto');\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.onClose);\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Loads the save from the localStorage.\r\n     */\r\n    _loadSave = async (saveName) => {\r\n        const saved = localStorage.getItem(saveName);\r\n        if (saved) {\r\n            await this.setState(JSON.parse(saved));\r\n        }\r\n        await this._addMessage(\r\n            \"Chargé\",\r\n            \"La dernière sauvegarde à été chargée\",\r\n            \"info\",\r\n            2000\r\n        );\r\n        await this._computeResults();\r\n    };\r\n    /**\r\n     * Saves part of the state to the localStorage.\r\n     */\r\n    _saveState = async (saveName) => {\r\n        localStorage.setItem(\r\n            saveName,\r\n            JSON.stringify({\r\n                daysRawData: this.state.daysRawData,\r\n                eventExpenses: this.state.eventExpenses,\r\n                dailyAccounting: this.state.dailyAccounting,\r\n                ticketPrice: this.state.ticketPrice,\r\n                costTotal: this.state.costTotal,\r\n            })\r\n        );\r\n        await this._addMessage(\r\n            \"Sauvegardé\",\r\n            \"Les informations ont été sauvegardées\",\r\n            \"info\",\r\n            5000\r\n        );\r\n    };\r\n    /**\r\n     * processes the days and updates the state.\r\n     */\r\n    _computeResults = async () => {\r\n        const {\r\n            days,\r\n            suppliers,\r\n            supplierTotal,\r\n            missedPaymentsByDay,\r\n        } = await this._processDays();\r\n        await this.setState({\r\n            days,\r\n            suppliers,\r\n            supplierTotal,\r\n            missedPaymentsByDay,\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} title\r\n     * @param {String} content text content of the message\r\n     * @param {String} [type] info | error\r\n     * @param {Number} [duration] amount of ms\r\n     */\r\n    _addMessage = async (title, content, type='info', duration=5000) => {\r\n        const id = newId(\"message\");\r\n        await this.setState({\r\n            popupIds: this.state.popupIds.concat(id),\r\n            popups: Object.assign({}, this.state.popups, {\r\n                [id]: {\r\n                    title,\r\n                    content,\r\n                    type,\r\n                },\r\n            }),\r\n        });\r\n        setTimeout(async () => {\r\n            const newPopupIds = this.state.popupIds.filter((filterId) => {\r\n                return filterId !== id;\r\n            });\r\n            const newPopups = Object.assign({}, this.state.popups);\r\n            delete newPopups[id];\r\n            await this.setState({\r\n                popupIds: newPopupIds,\r\n                popups: newPopups,\r\n            });\r\n        }, duration);\r\n    };\r\n    /**\r\n     * Extracts values from day raw data.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    _processDays = async () => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        let supplierTotal = 0;\r\n        let missedPaymentsByDay = this.state.missedPaymentsByDay;\r\n        for (const [dayName, dayRaw] of Object.entries(\r\n            this.state.daysRawData\r\n        )) {\r\n            const result = this._computeDay({ dayName, dayRaw, suppliers });\r\n            suppliers = result.suppliers;\r\n            missedPaymentsByDay[dayName] = result.missedPayments;\r\n            days.push(result.day);\r\n        }\r\n        Object.values(suppliers).forEach((val) => (supplierTotal += val.total));\r\n        return { days, suppliers, supplierTotal, missedPaymentsByDay };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} param0\r\n     * @param {String} param0.dayName\r\n     * @param {Object} param0.dayRaw\r\n     * @param {Object} param0.suppliers\r\n     */\r\n    _computeDay = ({ dayName, dayRaw, suppliers }) => {\r\n        /* DATA FILL\r\n         *   paid\r\n         *   rawCustomers[*][0] purchase - customerId\r\n         *   rawCustomers[*][1] purchase - supplierId\r\n         *   rawCustomers[*][2] purchase - item Name\r\n         *   rawCustomers[*][3] purchase - item Price\r\n         *   supplied\r\n         *   rawSuppliers[*][0] payment - supplierId\r\n         *   rawSuppliers[*][1] payment - customerId\r\n         *   rawSuppliers[*][2] payment - item Name\r\n         *   rawSuppliers[*][3] payment - item Price\r\n         */\r\n        const rawCustomers = dayRaw.customers;\r\n        const rawSuppliers = dayRaw.suppliers;\r\n        const customers = {};\r\n\r\n        for (const rawCustomer of rawCustomers) {\r\n            if (rawCustomer[0]) {\r\n                // CUSTOMER SIDE\r\n                // creates the customer if it doesn't already exist.\r\n                customers[rawCustomer[0]] = customers[rawCustomer[0]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[rawCustomer[0]].paidTotal +=\r\n                    Number(rawCustomer[3]) || 0;\r\n                // adds a line for what the customer paid\r\n                customers[rawCustomer[0]].paid.push({\r\n                    name: rawCustomer[2],\r\n                    price: rawCustomer[3],\r\n                    supplierId: rawCustomer[1],\r\n                });\r\n            }\r\n        }\r\n        for (const rawSupplier of rawSuppliers) {\r\n            if (rawSupplier[0] && rawSupplier[1]) {\r\n                // SUPPLIER SIDE\r\n                customers[rawSupplier[1]] = customers[rawSupplier[1]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[rawSupplier[1]].suppliedTotal +=\r\n                    Number(rawSupplier[3]) || 0;\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[rawSupplier[1]].supplied.push({\r\n                    name: rawSupplier[2],\r\n                    price: rawSupplier[3],\r\n                    supplierId: rawSupplier[0],\r\n                });\r\n                // computes the total value of supplied by the supplier.\r\n                suppliers[rawSupplier[0]] = suppliers[rawSupplier[0]] || {\r\n                    total: 0,\r\n                };\r\n                suppliers[rawSupplier[0]].total += Number(rawSupplier[3]) || 0;\r\n            }\r\n        }\r\n\r\n        const {\r\n            missedPayments,\r\n            dailyLoss,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        } = this._computeDailyStats(customers);\r\n        return {\r\n            day: {\r\n                dayName,\r\n                customers,\r\n                missedPayments,\r\n                dailyLoss,\r\n                customersAverage,\r\n                obtainedAverage,\r\n            },\r\n            suppliers,\r\n            missedPayments,\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} customers\r\n     */\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        let obtainedTotal = 0;\r\n        const customerKeys = Object.keys(customers);\r\n        for (const customerId of customerKeys) {\r\n            const customerPaid = customers[customerId].paidTotal;\r\n            const customerSupplied = customers[customerId].suppliedTotal;\r\n            const balance = customerSupplied - customerPaid;\r\n            obtainedTotal += Number(customerSupplied);\r\n            customersTotal += Number(customerPaid);\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n        }\r\n        const customersAverage = customersTotal / (customerKeys.length || 0);\r\n        const obtainedAverage = obtainedTotal / (customerKeys.length || 0);\r\n        return {\r\n            missedPayments,\r\n            dailyLoss,\r\n            customersTotal,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        };\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     */\r\n    clearAll = async () => {\r\n        await this.setState({\r\n            daysRawData: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n            ),\r\n            showDayForm: false,\r\n            eventExpenses: {},\r\n            dailyAccounting: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n            ),\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n        });\r\n        await this._computeResults();\r\n        await this._addMessage(\r\n            \"\",\r\n            \"Tout le contenu a été réinitialisé\",\r\n            \"error\",\r\n            5000\r\n        );\r\n        await this.toggleReset();\r\n    };\r\n    onClickLoad = async () => {\r\n        await this._loadSave('saved-state-manual');\r\n        await this.toggleLoad();\r\n    }\r\n    onClickSave = async () => {\r\n        await this._saveState('saved-state-manual');\r\n        await this.toggleLoad();\r\n    }\r\n    onClose = async () => {\r\n        await this._saveState('saved-state-auto');\r\n    }\r\n    /**\r\n     * This is a handler given to the DayForm to propagate the raw daily data to here.\r\n     *\r\n     * @param {String} day\r\n     * @param {Object} data\r\n     * @param {Object} dayAccounting The additional accounting informations related to 1 single day (currently being the amount of ticket sold)\r\n     */\r\n    onSaveDayForm = async (day, data, dayAccounting) => {\r\n        const daysRawData = Object.assign({}, this.state.daysRawData);\r\n        daysRawData[day] = data;\r\n        await this.setState({\r\n            daysRawData,\r\n            dailyAccounting: Object.assign(this.state.dailyAccounting, {\r\n                [day]: dayAccounting,\r\n            }),\r\n        });\r\n        await this._computeResults();\r\n    };\r\n    /**\r\n     * Handler for event form.\r\n     */\r\n    onSaveEventForm = async ({ eventExpenses, ticketPrice }) => {\r\n        let costTotal = 0;\r\n        Object.values(eventExpenses).forEach((val) => (costTotal += val));\r\n        await this.setState({ eventExpenses, ticketPrice, costTotal });\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} day\r\n     */\r\n    toggleDay = async (day) => {\r\n        const isSameDay = this.state.showDayForm === day;\r\n        await this.setState({ showDayForm: false, showForm: false });\r\n        if (!isSameDay) {\r\n            await this.setState({ showDayForm: day });\r\n        }\r\n    };\r\n    toggleEventForm = async () => {\r\n        const isOpen = this.state.showForm;\r\n        await this.setState({ showForm: !isOpen, showDayForm: false });\r\n        if (isOpen) {\r\n            this._computeResults();\r\n        }\r\n    };\r\n    toggleHelp = async () => {\r\n        await this.setState({ displayHelp: !this.state.displayHelp });\r\n    };\r\n    toggleLoad = async () => {\r\n        await this.setState({ loadRequested: !this.state.loadRequested });\r\n    };\r\n    toggleReset = async () => {\r\n        await this.setState({ resetRequested: !this.state.resetRequested });\r\n    };\r\n    toggleSave = async () => {\r\n        await this.setState({ saveRequested: !this.state.saveRequested });\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Generates the buttons to be given to the top nav-bar.\r\n     *\r\n     * @returns {Array} buttons\r\n     */\r\n    _getButtons() {\r\n        // ACCOUNTING\r\n        const buttons = [\r\n            {\r\n                className: (this.state.showForm ? \"active\" : \"\") + \" purple\",\r\n                fa: \"fa-eur\",\r\n                content: \"Comptabilité\",\r\n                callBack: this.toggleEventForm,\r\n            },\r\n        ];\r\n\r\n        // ADD DAYS\r\n        for (const day of this.DAYS) {\r\n            buttons.push({\r\n                className:\r\n                    (this.state.showDayForm === day ? \"active \" : \"\") +\r\n                    (this.state.daysRawData[day].customers.length\r\n                        ? \"green\"\r\n                        : \"alert\"),\r\n                fa: \"fa-calendar\",\r\n                callBack: () => {\r\n                    this.toggleDay(day);\r\n                },\r\n                content: day,\r\n            });\r\n        }\r\n\r\n        // COMPUTE\r\n        /*\r\n        if (Object.keys(this.state.daysRawData).length && !this.state.showForm && !this.state.resetRequested) {\r\n            buttons.push({ content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this._computeResults });\r\n        }\r\n        */\r\n\r\n        // RIGHT\r\n        buttons.push({\r\n            content: \"Aide\",\r\n            fa: \"fa-info-circle\",\r\n            className: \"blue order-2 ml-auto\",\r\n            callBack: this.toggleHelp,\r\n        });\r\n\r\n        // REMOVE FILES\r\n        let resetButtons = [\r\n            {\r\n                content: \"Tout effacer\",\r\n                fa: \"fa-trash\",\r\n                className: \"warning\",\r\n                callBack: this.toggleReset,\r\n            },\r\n        ];\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"green\",\r\n                    callBack: this.toggleReset,\r\n                },\r\n                {\r\n                    content: \"Confirmer: Effacer l'encodage en cours\",\r\n                    fa: \"fa-check\",\r\n                    className: \"alert\",\r\n                    callBack: this.clearAll,\r\n                },\r\n            ];\r\n        }\r\n        buttons.push(...resetButtons);\r\n\r\n        // SAVE\r\n        let saveButtons = [\r\n            {\r\n                content: \"Sauvegarder\",\r\n                fa: \"fa-upload\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleSave,\r\n            },\r\n        ];\r\n        if (this.state.saveRequested) {\r\n            saveButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"green\",\r\n                    callBack: this.toggleSave,\r\n                },\r\n                {\r\n                    content: \"Confirmer: Sauvegarder\",\r\n                    fa: \"fa-check\",\r\n                    className: \"alert\",\r\n                    callBack: this.onClickSave,\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.loadRequested) {\r\n            buttons.push(...saveButtons);\r\n        }\r\n\r\n        // LOAD\r\n        let loadButtons = [\r\n            {\r\n                content: \"Charcher\",\r\n                fa: \"fa-download\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleLoad,\r\n            },\r\n        ];\r\n        if (this.state.loadRequested) {\r\n            loadButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"green\",\r\n                    callBack: this.toggleLoad,\r\n                },\r\n                {\r\n                    content: \"Confirmer: Charder la Sauvegarde\",\r\n                    fa: \"fa-check\",\r\n                    className: \"alert\",\r\n                    callBack: this.onClickLoad,\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.saveRequested) {\r\n            buttons.push(...loadButtons);\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar buttons={this._getButtons()} />\r\n                {!!this.state.popupIds.length && (\r\n                    <Popups\r\n                        messageIds={this.state.popupIds}\r\n                        messages={this.state.popups}\r\n                    />\r\n                )}\r\n                {!!this.state.displayHelp && (\r\n                    <HelpBox/>\r\n                )}\r\n                {!!this.DAYS.includes(this.state.showDayForm) && (\r\n                    <DayForm\r\n                        day={this.state.showDayForm}\r\n                        dayRawData={\r\n                            this.state.daysRawData[this.state.showDayForm]\r\n                        }\r\n                        save={this.onSaveDayForm}\r\n                        addMessage={this._addMessage}\r\n                        missedPayments={\r\n                            this.state.missedPaymentsByDay[\r\n                                this.state.showDayForm\r\n                            ]\r\n                        }\r\n                        dailyAccounting={\r\n                            this.state.dailyAccounting[this.state.showDayForm]\r\n                        }\r\n                    />\r\n                )}\r\n                {!!this.state.showForm ? (\r\n                    <EventForm\r\n                        eventExpenses={this.state.eventExpenses}\r\n                        ticketPrice={this.state.ticketPrice}\r\n                        save={this.onSaveEventForm}\r\n                    />\r\n                ) : (\r\n                    <PageData\r\n                        days={this.state.days}\r\n                        dailyAccounting={this.state.dailyAccounting}\r\n                        ticketPrice={this.state.ticketPrice}\r\n                        costTotal={this.state.costTotal}\r\n                        suppliers={this.state.suppliers}\r\n                        openDay={this.state.showDayForm}\r\n                        supplierTotal={this.state.supplierTotal}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState, useEffect } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function openApp() {\n        setState({ open: true });\n    }\n\n    useEffect(() => {\n        setTimeout(async () => {\n            setState({ open: true });\n        }, 15000);\n        // willMount\n        return () => {\n            // willUnMount\n        }\n    }, [setState]);\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={openApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// turn service worker off\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}