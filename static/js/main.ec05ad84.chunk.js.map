{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","components/NavBar/NavBar.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/EventForm/EventForm.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","NavBar","buttons","map","value","index","key","onClick","callBack","fa","content","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dailyLoss","customersAverage","PageData","days","costTotal","supplierTotal","class","dayIndex","dailyArray","values","totalSpendings","totalCustomers","length","getStats","defaultChange","FileInput","label","onChange","rest","style","display","type","e","target","files","multiple","EventForm","eventAccounting","save","useState","room","setRoom","transaction","setTransaction","insurance","setInsurance","paper","setPaper","stamps","setStamps","groceries","setGroceries","traiteur","setTraiteur","schmitz","setSchmitz","other","setOther","event","Number","pattern","Marche","_readFile","blob","a","reader","FileReader","readAsText","Promise","resolve","onload","result","_processFiles","suppliers","file","page","_computeFile","push","setState","lines","split","Array","shift","currentLine","paid","supplied","replace","name","price","supplierId","total","_computeDailyStats","customersTotal","customerKeys","customerPaid","balance","onFileInputChange","state","onEventFormSave","forEach","val","showForm","computeResults","resetFiles","pages","toggleReset","resetRequested","toggleEventForm","resetButtons","this","concat","_getButtons","React","Component","App","open","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ec05ad84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {customers[customerId].paidTotal}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {customers[customerId].suppliedTotal}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {missedPayments[customerId]}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index }) {\r\n\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>Jour {index + 1}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {day.dailyLoss}€</div>\r\n                <div>Moyenne de dépense des clients: {day.customersAverage}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, supplierTotal }) {\r\n\r\n    function getStats() {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div>\r\n                <div><span>Moyenne des dépenses:</span> <span>{totalSpendings / (dailyArray.length || 1)}€</span></div>\r\n                <div><span>Quantité de fiches payées:</span> <span>{totalCustomers}</span></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"global-stats\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span>{supplierTotal}€</span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais:</span> <span>{costTotal}€</span></div>\r\n                <div>_________________________</div>\r\n                <div><span>Bénéfices net du marché:</span> <span>{supplierTotal - costTotal}€</span></div>\r\n                <div class=\"divider\">_________________________________________________________</div>\r\n                {days.map((value, dayIndex) => {\r\n                    return(<DayData day={value} key={dayIndex} index={dayIndex}/>)\r\n                })}\r\n            </div>\r\n            <div className=\"global-stats\">\r\n                <h3>Statistiques</h3>\r\n                {getStats()}\r\n                <div>_________________________</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n                multiple\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useRef, useState } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n * eventAccounting: {\r\n        room: 0,\r\n        transaction: 0,\r\n        insurance: 0,\r\n        paper: 0,\r\n        stamps: 0,\r\n        groceries: 0,\r\n        traiteur: 0,\r\n        schmitz: 0,\r\n    },\r\n */\r\nfunction EventForm({ eventAccounting, save }) {\r\n\r\n    const [room, setRoom] = useState( eventAccounting.room || 0 );\r\n    const [transaction, setTransaction] = useState( eventAccounting.transaction || 0 );\r\n    const [insurance, setInsurance] = useState( eventAccounting.insurance || 0 );\r\n    const [paper, setPaper] = useState( eventAccounting.paper || 0 );\r\n    const [stamps, setStamps] = useState( eventAccounting.stamps || 0 );\r\n    const [groceries, setGroceries] = useState( eventAccounting.groceries || 0 );\r\n    const [traiteur, setTraiteur] = useState( eventAccounting.traiteur || 0 );\r\n    const [schmitz, setSchmitz] = useState( eventAccounting.schmitz || 0 );\r\n    const [other, setOther] = useState( eventAccounting.other || 0 );\r\n\r\n    function process() {\r\n        save({\r\n            room,\r\n            transaction,\r\n            insurance,\r\n            paper,\r\n            stamps,\r\n            groceries,\r\n            traiteur,\r\n            schmitz,\r\n            other,\r\n        });\r\n    }\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form\">\r\n            <h1>Dépenses</h1>\r\n                <div className=\"input-grid\">\r\n                    <div>\r\n                        <span>Salle: </span>\r\n                        <input onChange={event => { setRoom(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={room}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Transactions: </span>\r\n                        <input onChange={event => { setTransaction(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={transaction}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Assurance: </span>\r\n                        <input onChange={event => { setInsurance(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={insurance}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Papeterie: </span>\r\n                        <input onChange={event => { setPaper(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={paper}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Timbres: </span>\r\n                        <input onChange={event => { setStamps(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={stamps}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Courses: </span>\r\n                        <input onChange={event => { setGroceries(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={groceries}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Traiteur: </span>\r\n                        <input onChange={event => { setTraiteur(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={traiteur}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Schmitz: </span>\r\n                        <input onChange={event => { setSchmitz(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={schmitz}/> €\r\n                    </div>\r\n                    <div>\r\n                        <span>Autre: </span>\r\n                        <input onChange={event => { setOther(Number(event.target.value))}} pattern=\"[0-9]*\" type=\"number\" value={other}/> €\r\n                    </div>\r\n                </div>\r\n                <div className=\"form-button noselect\" onClick={process}>\r\n                    <span>ENREGISTRER</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React from 'react';\r\nimport './Marche.css';\r\n\r\nimport NavBar from '../NavBar/NavBar.js';\r\nimport PageData from '../PageData/PageData.js';\r\nimport FileInput from '../FileInput/FileInput.js';\r\nimport EventForm from '../EventForm/EventForm.js';\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            files: [],\r\n            days: [], // { customers, missedPayments, dailyLoss, customersAverage }\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false,\r\n            showForm: false,\r\n            eventAccounting: {},\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n        };\r\n    }\r\n    /**\r\n    *\r\n    * @param {blob} blob\r\n    * @return {file}\r\n    */\r\n    _readFile = async (blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsText(blob);\r\n        return new Promise((resolve) => {\r\n            reader.onload = (e) => {\r\n                resolve(reader.result);\r\n            };\r\n        });\r\n    }\r\n    _processFiles = async (files) => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        for (const file of files) {\r\n            const page = await this._readFile(file);\r\n            const result = this._computeFile(page, suppliers);\r\n            suppliers = result.suppliers;\r\n            days.push(result.day);\r\n        }\r\n        this.setState({ days, suppliers });\r\n    }\r\n    /**\r\n     * Expected structure of page:\r\n     *\r\n     * ,,,,,,... // row0\r\n     * numeroClient,Fournisseur,achat,numeroFournisseur,numeroClient,prix,total,... n-1, n // row x\r\n     * 600,65,objet,56,576,55,110,... n-1, n // row X+1\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * . . .\r\n     * .\r\n     * .\r\n     * where:\r\n     *  x = OFFSET_HEIGHT\r\n     *  x + 1 = column names\r\n     *  m = CLIENT_COLS\r\n     *  n - m = FOURNISSEUR_COLS\r\n     *\r\n     * @param {String} page open text file\r\n     * @return {Object}\r\n     */\r\n    _computeFile = (page, suppliers) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        for (const i of Array(OFFSET_HEIGHT)) {\r\n            lines.shift();\r\n        }\r\n        const colNames = lines.shift().split(','); // removes and saves column titles.\r\n        /*\r\n        *\r\n        * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        *\r\n        * suppliers = { supplierId : { total } }\r\n        *\r\n        */\r\n        const customers = {};\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(',');\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   currentLine[0] purchase - customerId\r\n            *   currentLine[1] purchase - supplierId\r\n            *   currentLine[2] purchase - item Name\r\n            *   currentLine[3] purchase - item Price\r\n            *   supplied\r\n            *   currentLine[4] payment - supplierId\r\n            *   currentLine[5] payment - customerId\r\n            *   currentLine[6] payment - item Name\r\n            *   currentLine[7] payment - item Price\r\n            */\r\n\r\n            if (currentLine[0]) { // CUSTOMER SIDE\r\n                // creates the customer if it doesn't already exist.\r\n                customers[currentLine[0]] = customers[currentLine[0]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[0]].paidTotal += Number(currentLine[3].replace(',','.'));\r\n                // adds a line for what the customer paid\r\n                customers[currentLine[0]].paid.push({\r\n                    name: currentLine[2],\r\n                    price: currentLine[3],\r\n                    supplierId: currentLine[1],\r\n                });\r\n            }\r\n\r\n            if (currentLine[4] && currentLine[5]) { // SUPPLIER SIDE\r\n                customers[currentLine[5]] = customers[currentLine[5]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[5]].suppliedTotal += Number(currentLine[7].replace(',','.'));\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[currentLine[5]].supplied.push({\r\n                    name: currentLine[6],\r\n                    price: currentLine[7],\r\n                    supplierId: currentLine[4],\r\n                });\r\n                suppliers[currentLine[4]] = suppliers[currentLine[4]] || { total: 0 };\r\n                suppliers[currentLine[4]].total += Number(currentLine[7].replace(',','.'));\r\n            }\r\n        }\r\n        const { missedPayments, dailyLoss, customersAverage } = this._computeDailyStats(customers);\r\n        return {day: { customers, missedPayments, dailyLoss, customersAverage }, suppliers };\r\n    }\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        const customerKeys = Object.keys(customers);\r\n        for (const customerId of customerKeys) {\r\n            const customerPaid = customers[customerId].paidTotal;\r\n            const balance = customers[customerId].suppliedTotal - customerPaid;\r\n            customersTotal += customerPaid;\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n        }\r\n        const customersAverage = customersTotal / (customerKeys.length || 0);\r\n        return { missedPayments, dailyLoss, customersTotal, customersAverage };\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    _getButtons() {\r\n        let resetButtons = [];\r\n        if (this.state.files.length) {\r\n            resetButtons = [{content: 'Retirer les fichiers', fa: 'fa-trash', className: 'warning', callBack: this.toggleReset}];\r\n        }\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {content: 'Annuler', fa: 'fa-times', className: 'green', callBack: this.toggleReset},\r\n                {content: 'Confirmer', fa: 'fa-check', className: 'alert', callBack: this.resetFiles},\r\n            ];\r\n        }\r\n        const buttons = [\r\n            {className: 'blue', fa: 'fa-upload', content: (<FileInput label={`Ajouter | jours: ${this.state.files.length}`} className=\"noselect\" value={this.state.files} onChange={this.onFileInputChange} />)},\r\n            {className: ((this.state.showForm ? 'active' : '') + ' purple'), fa: 'fa-eur', content: 'Comptabilité', callBack: this.toggleEventForm},\r\n        ].concat(resetButtons);\r\n\r\n        if (this.state.files.length && !this.state.showForm) {\r\n            buttons.push({content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this.computeResults});\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n    * Handler for File Input onChange.\r\n    *\r\n    * @param {file[]} files\r\n    * @return {void}\r\n    */\r\n   onFileInputChange = async (files) => {\r\n        this.setState({ files: [...this.state.files, ...files]});\r\n    }\r\n    /**\r\n    * Handler for event form.\r\n    */\r\n    onEventFormSave = async (eventAccounting) => {\r\n        let costTotal = 0;\r\n        Object.values(eventAccounting).forEach(val => costTotal += val);\r\n        this.setState({ eventAccounting, costTotal, showForm: false });\r\n        this.computeResults();\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    computeResults = async () => {\r\n        // add up expenses\r\n        // add up suppliers sale totals\r\n        await this._processFiles(this.state.files);\r\n        let supplierTotal = 0;\r\n        Object.values(this.state.suppliers).forEach(val => supplierTotal += val.total);\r\n        this.setState({ supplierTotal });\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    resetFiles = () => {\r\n        this.setState({files: [], days: [], pages: [], supplierTotal: 0});\r\n        this.toggleReset();\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    toggleReset = () => {\r\n        this.setState({ resetRequested: !this.state.resetRequested });\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    toggleEventForm = () => {\r\n        this.setState({ showForm: !this.state.showForm });\r\n    }\r\n    /**\r\n     * add encodage popup with button toggle\r\n     * location salle, location bancontact et frais de transaction, assurance, papetrie, timbres, courses restaurant, traiteur, schmitz\r\n     * form component with callback to change state here with new data.\r\n     *\r\n     * Add full data (all prices + price computation)\r\n     *\r\n     */\r\n    render() {\r\n        return <div>\r\n            <NavBar\r\n                buttons={this._getButtons()}\r\n            />\r\n            {!!this.state.showForm ? (\r\n                <EventForm eventAccounting={this.state.eventAccounting} save={this.onEventFormSave}/>\r\n            ) : (\r\n                <PageData days={this.state.days} costTotal={this.state.costTotal} supplierTotal={this.state.supplierTotal}/>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function toggleApp() {\n        setState({ open: !state.open });\n    }\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={toggleApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// turn service worker off\nserviceWorker.unregister();\n"],"sourceRoot":""}