{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","components/NavBar/NavBar.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/EventForm/EventForm.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","NavBar","buttons","map","value","index","key","onClick","callBack","fa","content","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dailyAccounting","dayName","dailyLoss","tombolaTickets","getTicketSold","customersAverage","PageData","days","costTotal","supplierTotal","ticketPrice","getTombolaSold","soldTickets","values","dayIndex","dailyArray","totalSpendings","totalCustomers","length","getStats","defaultChange","FileInput","label","onChange","rest","style","display","type","e","target","files","EventForm","eventAccounting","dayList","save","useState","eventAccountingState","setEventAccountingState","ticketP","setTicketP","dailyAccountingState","setDailyAccountingState","EXPENSE_TYPES","getTombolaTicketValue","getExpenseValue","expense","useEffect","event","accountingState","assign","setExpense","Number","pattern","dailyState","setTombolaTickets","Marche","_readFile","blob","a","reader","FileReader","readAsText","Promise","resolve","onload","result","_processFiles","suppliers","entries","file","page","_computeFile","push","setState","lines","split","Array","shift","currentLine","paid","supplied","replace","name","price","supplierId","total","_computeDailyStats","customersTotal","customerKeys","customerPaid","balance","onFileInputChange","state","onEventFormSave","forEach","val","computeResults","resetFiles","pages","toggleReset","resetRequested","toggleEventForm","isOpen","showForm","DAYS","resetButtons","this","dayButtons","concat","_getButtons","React","Component","App","open","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d9693722.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {customers[customerId].paidTotal}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {customers[customerId].suppliedTotal}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {missedPayments[customerId]}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dailyAccounting }) {\r\n\r\n    function getTicketSold(day) {\r\n        return dailyAccounting[day] && dailyAccounting[day].tombolaTickets;\r\n    }\r\n\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {day.dailyLoss}€</div>\r\n                <div>Tickets de tombola vendus: {getTicketSold(day.dayName)}</div>\r\n                <div>Moyenne de dépense des clients: {day.customersAverage}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, supplierTotal, dailyAccounting, ticketPrice }) {\r\n\r\n    function getStats() {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div>\r\n                <div><span>Moyenne des dépenses:</span> <span>{totalSpendings / (dailyArray.length || 1)}€</span></div>\r\n                <div><span>Tickets de tombola Vendus:</span> <span>{getTombolaSold()}</span></div>\r\n                <div><span>Quantité de fiches payées:</span> <span>{totalCustomers}</span></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getTombolaSold() {\r\n        let soldTickets = 0;\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += value.tombolaTickets || 0;\r\n        }\r\n        return soldTickets;\r\n    }\r\n\r\n    function computeTotal() {\r\n        return (supplierTotal + (ticketPrice * (getTombolaSold()))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"global-stats\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span>{supplierTotal}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{getTombolaSold()} x {ticketPrice}€: </span><span> {ticketPrice * (getTombolaSold())}€ </span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais:</span> <span>{costTotal}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché:</span> <span>{computeTotal()}€</span></div>\r\n                <div className=\"divider\">_________________________________________________________</div>\r\n                {days.map((value, dayIndex) => {\r\n                    return(<DayData day={value} key={dayIndex} dailyAccounting={dailyAccounting} index={dayIndex}/>)\r\n                })}\r\n            </div>\r\n            <div className=\"global-stats\">\r\n                <h3>Statistiques</h3>\r\n                {getStats()}\r\n                <div>_________________________</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm({ eventAccounting, dailyAccounting, ticketPrice, dayList, save }) {\r\n\r\n    const [eventAccountingState, setEventAccountingState] = useState(eventAccounting || {});\r\n    const [ticketP, setTicketP] = useState(ticketPrice || 0);\r\n    const [dailyAccountingState, setDailyAccountingState] = useState(dailyAccounting || {});\r\n\r\n    const EXPENSE_TYPES = ['Salle', 'Transactions', 'Assurance', 'Papeterie', 'Timbres', 'Courses', 'Traiteur', 'Schmitz', 'Autre'];\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            save({\r\n                eventAccounting: eventAccountingState,\r\n                ticketPrice: ticketP,\r\n                dailyAccounting: dailyAccountingState,\r\n            });\r\n        }\r\n    }, [eventAccountingState, ticketP, dailyAccountingState]);\r\n\r\n    function setTombolaTickets(day, value) {\r\n        const dailyState = Object.assign({}, dailyAccountingState);\r\n        if (!dailyState[day]) {\r\n            dailyState[day] = {};\r\n        }\r\n\r\n        dailyState[day].tombolaTickets = value;\r\n        setDailyAccountingState(dailyState);\r\n    }\r\n\r\n    function getTombolaTicketValue(day) {\r\n        if (dailyAccountingState && dailyAccountingState[day]) {\r\n            return dailyAccountingState[day].tombolaTickets || 0;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setExpense(expense, value) {\r\n        const accountingState = Object.assign({}, eventAccountingState);\r\n        accountingState[expense] = value;\r\n        setEventAccountingState(accountingState);\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventAccountingState[expense] || 0;\r\n    }\r\n\r\n    function renderEventAccounting() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketP(Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n                {dayList.map(day => {\r\n                    return(<div>\r\n                        <h3>{day}</h3>\r\n                        <div>\r\n                            <span className=\"accounting-span\"> Tickets de tombola: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setTombolaTickets(day, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getTombolaTicketValue(day)}/>\r\n                        </div>\r\n                    </div>\r\n                )})}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form\">\r\n                {renderEventAccounting()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React from 'react';\r\nimport './Marche.css';\r\n\r\nimport NavBar from '../NavBar/NavBar.js';\r\nimport PageData from '../PageData/PageData.js';\r\nimport FileInput from '../FileInput/FileInput.js';\r\nimport EventForm from '../EventForm/EventForm.js';\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            files: {}, // { dayName: file, }\r\n            days: [], // { dayName, customers, missedPayments, dailyLoss, customersAverage }\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false,\r\n            showForm: false,\r\n            eventAccounting: {},\r\n            dailyAccounting: {}, // { dayName: {valuesDict} }\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n        };\r\n        this.DAYS = ['Vendredi', 'Samedi', 'Dimanche']; // const\r\n    }\r\n    /**\r\n    *\r\n    * @param {blob} blob\r\n    * @return {file}\r\n    */\r\n    _readFile = async (blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsText(blob);\r\n        return new Promise((resolve) => {\r\n            reader.onload = (e) => {\r\n                resolve(reader.result);\r\n            };\r\n        });\r\n    }\r\n    _processFiles = async (files) => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        for (const [dayName, file] of Object.entries(files)) {\r\n            const page = await this._readFile(file);\r\n            const result = this._computeFile({ dayName, page, suppliers });\r\n            suppliers = result.suppliers;\r\n            days.push(result.day);\r\n        }\r\n        this.setState({ days, suppliers });\r\n    }\r\n    /**\r\n     * Expected structure of page:\r\n     *\r\n     * ,,,,,,... // row0\r\n     * numeroClient,Fournisseur,achat,numeroFournisseur,numeroClient,prix,total,... n-1, n // row x\r\n     * 600,65,objet,56,576,55,110,... n-1, n // row X+1\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * . . .\r\n     * .\r\n     * .\r\n     * where:\r\n     *  x = OFFSET_HEIGHT\r\n     *  x + 1 = column names\r\n     *  m = CLIENT_COLS\r\n     *  n - m = FOURNISSEUR_COLS\r\n     *\r\n     * @param {String} page open text file\r\n     * @return {Object}\r\n     */\r\n    _computeFile = ({ dayName, page, suppliers }) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        for (const i of Array(OFFSET_HEIGHT)) {\r\n            lines.shift();\r\n        }\r\n        const colNames = lines.shift().split(','); // removes and saves column titles.\r\n        /*\r\n        *\r\n        * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        *\r\n        * suppliers = { supplierId : { total } }\r\n        *\r\n        */\r\n        const customers = {};\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(',');\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   currentLine[0] purchase - customerId\r\n            *   currentLine[1] purchase - supplierId\r\n            *   currentLine[2] purchase - item Name\r\n            *   currentLine[3] purchase - item Price\r\n            *   supplied\r\n            *   currentLine[4] payment - supplierId\r\n            *   currentLine[5] payment - customerId\r\n            *   currentLine[6] payment - item Name\r\n            *   currentLine[7] payment - item Price\r\n            */\r\n\r\n            if (currentLine[0]) { // CUSTOMER SIDE\r\n                // creates the customer if it doesn't already exist.\r\n                customers[currentLine[0]] = customers[currentLine[0]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[0]].paidTotal += Number(currentLine[3].replace(',','.'));\r\n                // adds a line for what the customer paid\r\n                customers[currentLine[0]].paid.push({\r\n                    name: currentLine[2],\r\n                    price: currentLine[3],\r\n                    supplierId: currentLine[1],\r\n                });\r\n            }\r\n\r\n            if (currentLine[4] && currentLine[5]) { // SUPPLIER SIDE\r\n                customers[currentLine[5]] = customers[currentLine[5]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[5]].suppliedTotal += Number(currentLine[7].replace(',','.'));\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[currentLine[5]].supplied.push({\r\n                    name: currentLine[6],\r\n                    price: currentLine[7],\r\n                    supplierId: currentLine[4],\r\n                });\r\n                suppliers[currentLine[4]] = suppliers[currentLine[4]] || { total: 0 };\r\n                suppliers[currentLine[4]].total += Number(currentLine[7].replace(',','.'));\r\n            }\r\n        }\r\n        const { missedPayments, dailyLoss, customersAverage } = this._computeDailyStats(customers);\r\n        return {day: { dayName, customers, missedPayments, dailyLoss, customersAverage }, suppliers };\r\n    }\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        const customerKeys = Object.keys(customers);\r\n        for (const customerId of customerKeys) {\r\n            const customerPaid = customers[customerId].paidTotal;\r\n            const balance = customers[customerId].suppliedTotal - customerPaid;\r\n            customersTotal += customerPaid;\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n        }\r\n        const customersAverage = customersTotal / (customerKeys.length || 0);\r\n        return { missedPayments, dailyLoss, customersTotal, customersAverage };\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    _getButtons() {\r\n        let resetButtons = [];\r\n        if (Object.keys(this.state.files).length) {\r\n            resetButtons = [{content: 'Retirer les fichiers', fa: 'fa-trash', className: 'warning', callBack: this.toggleReset}];\r\n        }\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {content: 'Annuler', fa: 'fa-times', className: 'green', callBack: this.toggleReset},\r\n                {content: 'Confirmer', fa: 'fa-check', className: 'alert', callBack: this.resetFiles},\r\n            ];\r\n        }\r\n        const dayButtons = [];\r\n        for (const day of this.DAYS) {\r\n            dayButtons.push(\r\n                {className: (this.state.files[day] ? 'green' : 'alert'), fa: 'fa-upload', content: (<FileInput label={day} className=\"noselect\" value={this.state.files[day]} onChange={val => {this.onFileInputChange(val, day)}} />)},\r\n            )\r\n        }\r\n        const buttons = [\r\n            {className: ((this.state.showForm ? 'active' : '') + ' purple'), fa: 'fa-eur', content: 'Comptabilité', callBack: this.toggleEventForm},\r\n        ].concat(dayButtons, resetButtons);\r\n\r\n        if (Object.keys(this.state.files).length && !this.state.showForm && !this.state.resetRequested) {\r\n            buttons.push({ content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this.computeResults });\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n    * Handler for File Input onChange.\r\n    *\r\n    * @param {file[]} files\r\n    * @return {void}\r\n    */\r\n   onFileInputChange = async (files, name) => {\r\n       const file = files[0];\r\n        this.setState({ files: Object.assign({}, this.state.files, {[name]: file})});\r\n    }\r\n    /**\r\n    * Handler for event form.\r\n    */\r\n    onEventFormSave = async ({ eventAccounting, dailyAccounting, ticketPrice }) => {\r\n        let costTotal = 0;\r\n        Object.values(eventAccounting).forEach(val => costTotal += val);\r\n        this.setState({ eventAccounting, ticketPrice, dailyAccounting, costTotal });\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    computeResults = async () => {\r\n        // add up expenses\r\n        // add up suppliers sale totals\r\n        await this._processFiles(this.state.files);\r\n        let supplierTotal = 0;\r\n        Object.values(this.state.suppliers).forEach(val => supplierTotal += val.total);\r\n        this.setState({ supplierTotal });\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    resetFiles = () => {\r\n        this.setState({files: [], days: [], pages: [], supplierTotal: 0});\r\n        this.toggleReset();\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    toggleReset = () => {\r\n        this.setState({ resetRequested: !this.state.resetRequested });\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    toggleEventForm = () => {\r\n        const isOpen = this.state.showForm;\r\n        this.setState({ showForm: !isOpen });\r\n        if (isOpen) {\r\n            this.computeResults();\r\n        }\r\n    }\r\n    /**\r\n     * add encodage popup with button toggle\r\n     * location salle, location bancontact et frais de transaction, assurance, papetrie, timbres, courses restaurant, traiteur, schmitz\r\n     * form component with callback to change state here with new data.\r\n     *\r\n     * Add full data (all prices + price computation)\r\n     *\r\n     */\r\n    render() {\r\n        return <div>\r\n            <NavBar\r\n                buttons={this._getButtons()}\r\n            />\r\n            {!!this.state.showForm ? (\r\n                <EventForm eventAccounting={this.state.eventAccounting} dailyAccounting={this.state.dailyAccounting} dayList={this.DAYS} ticketPrice={this.state.ticketPrice} save={this.onEventFormSave}/>\r\n            ) : (\r\n                <PageData days={this.state.days} dailyAccounting={this.state.dailyAccounting} ticketPrice={this.state.ticketPrice} costTotal={this.state.costTotal} supplierTotal={this.state.supplierTotal}/>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function toggleApp() {\n        setState({ open: !state.open });\n    }\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={toggleApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// turn service worker off\nserviceWorker.unregister();\n"],"sourceRoot":""}