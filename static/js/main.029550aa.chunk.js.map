{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","utils/utils.js","components/NavBar/NavBar.js","components/Popups/Popups.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/EventForm/EventForm.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","lastId","newId","prefix","NavBar","buttons","map","value","index","key","onClick","callBack","fa","content","Popups","messageIds","messages","messageId","message","type","title","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dailyAccounting","dayName","dailyLoss","tombolaTickets","getTicketSold","customersAverage","obtainedAverage","PageData","days","costTotal","supplierTotal","ticketPrice","getTombolaSold","soldTickets","values","length","dayIndex","dailyArray","totalSpendings","totalObtained","totalCustomers","getStats","defaultChange","FileInput","label","onChange","rest","style","display","e","target","files","EventForm","eventExpenses","dayList","save","useState","eventExpensesState","setEventExpensesState","ticketP","setTicketP","dailyAccountingState","setDailyAccountingState","EXPENSE_TYPES","getTombolaTicketValue","getExpenseValue","expense","useEffect","event","accountingState","assign","setExpense","Number","pattern","dailyState","setTombolaTickets","Marche","_addMessage","duration","a","id","setState","popupIds","state","concat","popups","setTimeout","newPopupIds","filter","filterId","newPopups","_readFile","blob","reader","FileReader","readAsText","Promise","resolve","onload","result","_removeFile","_processFiles","suppliers","entries","file","page","_computeFile","push","forEach","val","total","lines","split","times","x","f","shift","currentLine","paid","supplied","replace","name","price","supplierId","_computeDailyStats","customersTotal","obtainedTotal","customerKeys","customerPaid","customerSupplied","balance","onFileInputChange","includes","onEventFormSave","_computeResults","resetFiles","pages","toggleReset","resetRequested","toggleEventForm","isOpen","showForm","DAYS","resetButtons","this","dayButtons","_getButtons","React","Component","App","open","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.029550aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","let lastId = 0;\r\n\r\nexport { newId, times }\r\n\r\nfunction newId(prefix='id') {\r\n    lastId++;\r\n    return `${prefix}${lastId}`;\r\n}\r\nfunction times(x) {\r\n    return (f) => {\r\n        if (x > 0) {\r\n            f()\r\n            times (x - 1) (f)\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Popups.css\";\r\n\r\nfunction Popups({ messageIds, messages }) {\r\n\r\n    return (\r\n        <div className=\"popups\">\r\n            {messageIds.map((messageId) => {\r\n                const message = messages[messageId];\r\n                return (\r\n                    <div key={messageId} className={\"popup \" + message.type}>\r\n                        <span>{message.title}</span>\r\n                        {message.content}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popups;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {customers[customerId].paidTotal}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {customers[customerId].suppliedTotal}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {missedPayments[customerId]}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dailyAccounting }) {\r\n\r\n    function getTicketSold(day) {\r\n        return dailyAccounting[day] && dailyAccounting[day].tombolaTickets;\r\n    }\r\n\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {day.dailyLoss}€</div>\r\n                <div>Tickets de tombola vendus: {getTicketSold(day.dayName)}</div>\r\n                <div>Moyenne des dépenses des clients: {day.customersAverage}€</div>\r\n                <div>Moyenne des objets reçu par les clients: {day.obtainedAverage}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, supplierTotal, dailyAccounting, ticketPrice }) {\r\n\r\n    function getStats() {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalObtained = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage;\r\n            totalObtained += day.obtainedAverage;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div className=\"daily-stats\">\r\n                <div><span>Moyenne payée par les clients:</span> <span className=\"value-display\">{totalSpendings / (dailyArray.length || 1)}€</span></div>\r\n                <div><span>Moyenne des articles reçu:</span> <span className=\"value-display\">{totalObtained / (dailyArray.length || 1)}€</span></div>\r\n                <div><span>Tickets de tombola Vendus:</span> <span className=\"value-display\">{getTombolaSold()}</span></div>\r\n                <div><span>Quantité de fiches payées:</span> <span className=\"value-display\">{totalCustomers}</span></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getTombolaSold() {\r\n        let soldTickets = 0;\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += value.tombolaTickets || 0;\r\n        }\r\n        return soldTickets;\r\n    }\r\n\r\n    function computeTotal() {\r\n        return (supplierTotal + (ticketPrice * (getTombolaSold()))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"global-stats\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span className=\"value-display\">{supplierTotal}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{getTombolaSold()} x {ticketPrice}€: </span><span className=\"value-display\">{ticketPrice * (getTombolaSold())}€ </span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais: </span><span className=\"value-display\">{costTotal}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché: </span><span className=\"value-display\">{computeTotal()}€</span></div>\r\n                {!!days.length &&\r\n                    <span className=\"divider\">_________________________________________________________</span>\r\n                }\r\n                {days.map((value, dayIndex) => {\r\n                    return(<DayData day={value} key={dayIndex} dailyAccounting={dailyAccounting} index={dayIndex}/>)\r\n                })}\r\n            </div>\r\n            <div className=\"global-stats\">\r\n            <h3>Statistiques (sur {days.length} jour(s))</h3>\r\n                {getStats()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm({ eventExpenses, dailyAccounting, ticketPrice, dayList, save }) {\r\n\r\n    const [eventExpensesState, setEventExpensesState] = useState(eventExpenses || {});\r\n    const [ticketP, setTicketP] = useState(ticketPrice || 0);\r\n    const [dailyAccountingState, setDailyAccountingState] = useState(dailyAccounting || {});\r\n\r\n    // the names are only relevant in this context, the parent component will just make a sum of all those expenses.\r\n    const EXPENSE_TYPES = ['Salle', 'Transactions', 'Assurance', 'Papeterie', 'Timbres', 'Courses', 'Traiteur', 'Schmitz', 'Autre'];\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            save({\r\n                eventExpenses: eventExpensesState,\r\n                ticketPrice: ticketP,\r\n                dailyAccounting: dailyAccountingState,\r\n            });\r\n        }\r\n    }, [save, eventExpensesState, ticketP, dailyAccountingState]);\r\n\r\n    function setTombolaTickets(day, value) {\r\n        const dailyState = Object.assign({}, dailyAccountingState);\r\n        if (!dailyState[day]) {\r\n            dailyState[day] = {};\r\n        }\r\n\r\n        dailyState[day].tombolaTickets = value;\r\n        setDailyAccountingState(dailyState);\r\n    }\r\n\r\n    function getTombolaTicketValue(day) {\r\n        if (dailyAccountingState && dailyAccountingState[day]) {\r\n            return dailyAccountingState[day].tombolaTickets || 0;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setExpense(expense, value) {\r\n        const accountingState = Object.assign({}, eventExpensesState);\r\n        accountingState[expense] = value;\r\n        setEventExpensesState(accountingState);\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventExpensesState[expense] || 0;\r\n    }\r\n\r\n    function renderEventExpenses() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketP(Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n                {dayList.map(day => {\r\n                    return(<div>\r\n                        <h3>{day}</h3>\r\n                        <div>\r\n                            <span className=\"accounting-span\"> Tickets de tombola: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setTombolaTickets(day, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getTombolaTicketValue(day)}/>\r\n                        </div>\r\n                    </div>\r\n                )})}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form\">\r\n                {renderEventExpenses()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React from 'react';\r\nimport './Marche.css';\r\n\r\nimport { newId, times } from '../../utils/utils.js';\r\nimport NavBar from '../NavBar/NavBar.js';\r\nimport Popups from '../Popups/Popups.js';\r\nimport PageData from '../PageData/PageData.js';\r\nimport FileInput from '../FileInput/FileInput.js';\r\nimport EventForm from '../EventForm/EventForm.js';\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            files: {}, // { dayName: file, }\r\n            days: [], // { dayName, customers, missedPayments, dailyLoss, customersAverage, obtainedAverage }\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false, // toggle for the confirm/cancel buttons for removing files\r\n            showForm: false, // toggle for the accounting/event input form\r\n            eventExpenses: {}, // {expenseName: <int>amount}\r\n            dailyAccounting: {}, // { dayName: {valuesDict} }\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n            popupIds: [],\r\n            popups: {}, // {content, type}\r\n        };\r\n        this.DAYS = ['Vendredi', 'Samedi', 'Dimanche']; // const\r\n    }\r\n    /**\r\n     *\r\n     * @param {String} title\r\n     * @param {String} content text content of the message\r\n     * @param {String} [type] info | error\r\n     * @param {Number} [duration] amount of ms\r\n     */\r\n    _addMessage = async (title, content, type, duration) => {\r\n        duration = duration || 5000;\r\n        type = type || 'info';\r\n        const id = newId('message');\r\n        await this.setState({\r\n            popupIds: this.state.popupIds.concat(id),\r\n            popups: Object.assign({}, this.state.popups, {\r\n                [id]: {\r\n                    title,\r\n                    content,\r\n                    type,\r\n                },\r\n            }),\r\n        });\r\n        setTimeout(async () => {\r\n            const newPopupIds = this.state.popupIds.filter((filterId) => {\r\n                return filterId !== id;\r\n            });\r\n            const newPopups = Object.assign({}, this.state.popups);\r\n            delete newPopups[id];\r\n            await this.setState({\r\n                popupIds: newPopupIds,\r\n                popups: newPopups,\r\n            });\r\n        }, duration);\r\n    }\r\n    /**\r\n    *\r\n    * @param {blob} blob\r\n    * @return {file}\r\n    */\r\n    _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage('ERREUR', error.message, 'error');\r\n            return false;\r\n        }\r\n    }\r\n    _removeFile = async (dayName) => {\r\n        const files = Object.assign({}, this.state.files);\r\n        delete files[dayName];\r\n        await this.setState({ files });\r\n    }\r\n    /**\r\n     * Extracts values from files.\r\n     *\r\n     * @param {Array} files\r\n     * @returns {Object}\r\n     */\r\n    _processFiles = async (files) => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        let supplierTotal = 0;\r\n        for (const [dayName, file] of Object.entries(files)) {\r\n            const page = await this._readFile(file);\r\n            if (!page) {\r\n                await this._removeFile(dayName);\r\n                continue;\r\n            }\r\n            const result = this._computeFile({ dayName, page, suppliers });\r\n            suppliers = result.suppliers;\r\n            days.push(result.day);\r\n        }\r\n        Object.values(suppliers).forEach(val => supplierTotal += val.total);\r\n        return { days, suppliers, supplierTotal };\r\n    }\r\n    /**\r\n     * Expected structure of page:\r\n     *\r\n     * ,,,,,,... // row0\r\n     * numeroClient,Fournisseur,achat,numeroFournisseur,numeroClient,prix,total,... n-1, n // row x\r\n     * 600,65,objet,56,576,55,110,... n-1, n // row X+1\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * . . .\r\n     * .\r\n     * .\r\n     * where:\r\n     *  x = OFFSET_HEIGHT\r\n     *  x + 1 = column names\r\n     *  m = CLIENT_COLS\r\n     *  n - m = FOURNISSEUR_COLS\r\n     *\r\n     * @param {String} page open text file\r\n     * @return {Object}\r\n     */\r\n    _computeFile = ({ dayName, page, suppliers }) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        times(OFFSET_HEIGHT) (() => lines.shift());\r\n        // colNames\r\n        lines.shift().split(','); // removes and saves column titles.\r\n        /*\r\n        *\r\n        * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        *\r\n        * suppliers = { supplierId : { total } }\r\n        *\r\n        */\r\n        const customers = {};\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(',');\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   currentLine[0] purchase - customerId\r\n            *   currentLine[1] purchase - supplierId\r\n            *   currentLine[2] purchase - item Name\r\n            *   currentLine[3] purchase - item Price\r\n            *   supplied\r\n            *   currentLine[4] payment - supplierId\r\n            *   currentLine[5] payment - customerId\r\n            *   currentLine[6] payment - item Name\r\n            *   currentLine[7] payment - item Price\r\n            */\r\n\r\n            if (currentLine[0]) { // CUSTOMER SIDE\r\n                // creates the customer if it doesn't already exist.\r\n                customers[currentLine[0]] = customers[currentLine[0]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[0]].paidTotal += Number(currentLine[3].replace(',','.'));\r\n                // adds a line for what the customer paid\r\n                customers[currentLine[0]].paid.push({\r\n                    name: currentLine[2],\r\n                    price: currentLine[3],\r\n                    supplierId: currentLine[1],\r\n                });\r\n            }\r\n\r\n            if (currentLine[4] && currentLine[5]) { // SUPPLIER SIDE\r\n                customers[currentLine[5]] = customers[currentLine[5]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[5]].suppliedTotal += Number(currentLine[7].replace(',','.'));\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[currentLine[5]].supplied.push({\r\n                    name: currentLine[6],\r\n                    price: currentLine[7],\r\n                    supplierId: currentLine[4],\r\n                });\r\n                // computes the total value of supplied by the supplier.\r\n                suppliers[currentLine[4]] = suppliers[currentLine[4]] || { total: 0 };\r\n                suppliers[currentLine[4]].total += Number(currentLine[7].replace(',','.'));\r\n            }\r\n        }\r\n        const { missedPayments, dailyLoss, customersAverage, obtainedAverage } = this._computeDailyStats(customers);\r\n        return {day: { dayName, customers, missedPayments, dailyLoss, customersAverage, obtainedAverage }, suppliers };\r\n    }\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        let obtainedTotal = 0;\r\n        const customerKeys = Object.keys(customers);\r\n        for (const customerId of customerKeys) {\r\n            const customerPaid = customers[customerId].paidTotal;\r\n            const customerSupplied = customers[customerId].suppliedTotal;\r\n            const balance =  customerSupplied - customerPaid;\r\n            obtainedTotal += customerSupplied;\r\n            customersTotal += customerPaid;\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n        }\r\n        const customersAverage = customersTotal / (customerKeys.length || 0);\r\n        const obtainedAverage = obtainedTotal / (customerKeys.length || 0);\r\n        return { missedPayments, dailyLoss, customersTotal, customersAverage, obtainedAverage };\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    _getButtons() {\r\n        let resetButtons = [];\r\n        if (Object.keys(this.state.files).length) {\r\n            resetButtons = [{content: 'Retirer les fichiers', fa: 'fa-trash', className: 'warning', callBack: this.toggleReset}];\r\n        }\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {content: 'Annuler', fa: 'fa-times', className: 'green', callBack: this.toggleReset},\r\n                {content: 'Confirmer', fa: 'fa-check', className: 'alert', callBack: this.resetFiles},\r\n            ];\r\n        }\r\n        const dayButtons = [];\r\n        for (const day of this.DAYS) {\r\n            dayButtons.push(\r\n                {className: (this.state.files[day] ? 'green' : 'alert'), fa: 'fa-upload', content: (<FileInput label={day} className=\"noselect\" value={this.state.files[day]} onChange={val => {this.onFileInputChange(val, day)}} />)},\r\n            )\r\n        }\r\n        const buttons = [\r\n            {className: ((this.state.showForm ? 'active' : '') + ' purple'), fa: 'fa-eur', content: 'Comptabilité', callBack: this.toggleEventForm},\r\n        ].concat(dayButtons, resetButtons);\r\n\r\n        if (Object.keys(this.state.files).length && !this.state.showForm && !this.state.resetRequested) {\r\n            buttons.push({ content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this._computeResults });\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n    * Handler for File Input onChange.\r\n    *\r\n    * @param {file[]} files\r\n    * @return {void}\r\n    */\r\n   onFileInputChange = async (files, name) => {\r\n        const file = files[0];\r\n        if (!file.name.includes('.csv')) {\r\n            this._addMessage('ERREUR', 'Le fichier doit être un .csv', 'error');\r\n            return;\r\n        }\r\n        await this.setState({ files: Object.assign({}, this.state.files, {[name]: file})});\r\n    }\r\n    /**\r\n    * Handler for event form.\r\n    */\r\n    onEventFormSave = async ({ eventExpenses, dailyAccounting, ticketPrice }) => {\r\n        let costTotal = 0;\r\n        Object.values(eventExpenses).forEach(val => costTotal += val);\r\n        await this.setState({ eventExpenses, ticketPrice, dailyAccounting, costTotal });\r\n    }\r\n    /**\r\n    * processes the files and updates the state.\r\n    */\r\n    _computeResults = async () => {\r\n        const { days, suppliers, supplierTotal } = await this._processFiles(this.state.files);\r\n        await this.setState({ days, suppliers, supplierTotal });\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    resetFiles = async () => {\r\n        await this.setState({files: [], days: [], pages: [], supplierTotal: 0});\r\n        this.toggleReset();\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    toggleReset = async () => {\r\n        await this.setState({ resetRequested: !this.state.resetRequested });\r\n    }\r\n    /**\r\n    *\r\n    */\r\n    toggleEventForm = async () => {\r\n        const isOpen = this.state.showForm;\r\n        await this.setState({ showForm: !isOpen });\r\n        if (isOpen) {\r\n            this._computeResults();\r\n        }\r\n    }\r\n    /**\r\n     * add encodage popup with button toggle\r\n     * location salle, location bancontact et frais de transaction, assurance, papetrie, timbres, courses restaurant, traiteur, schmitz\r\n     * form component with callback to change state here with new data.\r\n     *\r\n     * Add full data (all prices + price computation)\r\n     *\r\n     */\r\n    render() {\r\n        return <div>\r\n            <NavBar\r\n                buttons={this._getButtons()}\r\n            />\r\n            {!!this.state.popupIds.length &&\r\n                <Popups messageIds={this.state.popupIds} messages={this.state.popups}/>\r\n            }\r\n            {!!this.state.showForm ? (\r\n                <EventForm eventExpenses={this.state.eventExpenses} dailyAccounting={this.state.dailyAccounting} dayList={this.DAYS} ticketPrice={this.state.ticketPrice} save={this.onEventFormSave}/>\r\n            ) : (\r\n                <PageData days={this.state.days} dailyAccounting={this.state.dailyAccounting} ticketPrice={this.state.ticketPrice} costTotal={this.state.costTotal} supplierTotal={this.state.supplierTotal}/>\r\n            )}\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function toggleApp() {\n        setState({ open: !state.open });\n    }\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={toggleApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// turn service worker off\nserviceWorker.unregister();\n"],"sourceRoot":""}