{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","utils/utils.js","components/NavBar/NavBar.js","components/Popups/Popups.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/DayForm/DayForm.js","components/EventForm/EventForm.js","components/HelpBox/HelpBox.js","components/Marche/Marche.js","App.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","lastId","newId","prefix","times","x","f","zip","arr1","arr2","map","k","i","rounded","num","decimal","Number","exp","Math","abs","round","EPSILON","pow","subtractArrays","lowestLength","min","length","arrs","newArrs","ascSortedArrs","lowIndex","highIndex","element","includes","splice","indexOf","NavBar","buttons","value","index","key","onClick","callBack","fa","content","Popups","messageIds","messages","messageId","message","type","title","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dayAccounting","dayName","dailyLoss","tombolaTickets","customersAverage","obtainedAverage","PageData","days","costTotal","suppliers","openDay","supplierTotal","dailyAccounting","ticketPrice","soldTickets","supplierTuples","entries","sort","a","b","total","values","computeTotal","dayIndex","getBenefices","dailyArray","totalSpendings","totalObtained","totalCustomers","getStats","tuple","getSupplierLadder","getContent","defaultChange","FileInput","label","onChange","rest","style","display","e","target","files","DayForm","dayRawData","save","addMessage","missedTransactions","useState","concat","setCustomers","newCustomer","setNewCustomer","setSuppliers","newSupplier","setNewSupplier","undefined","file","setFile","setDayAccounting","customerFirstInput","useRef","supplierFirstInput","_readFile","blob","reader","FileReader","readAsText","Promise","resolve","onload","result","_addMessage","_readPage","page","lines","split","shift","newCustomers","newSuppliers","currentLine","push","_saveRow","newCustomerlocal","local","newSupplierlocal","onCustomerGroupInputKeyDown","current","focus","onCustomerLastBoxKeyDown","stopPropagation","preventDefault","onFileInputChange","name","onSupplierGroupInputKeyDown","onSupplierLastBoxKeyDown","setCustomerValue","colIndex","localCustomers","localNewCustomer","setSupplierValue","localSuppliers","localNewSupplier","setTombolaTicket","val","currentTarget","input","getElementsByTagName","click","onFileInputWrapperClick","pattern","event","customer","localMissedTransactions","paidSurplus","onKeyDown","ref","supplier","suppliedSurplus","EventForm","eventExpenses","eventExpensesState","setEventExpensesState","ticketP","setTicketP","EXPENSE_TYPES","getExpenseValue","expense","useEffect","accountingState","assign","setExpense","HelpBox","showVideo","setShowVideo","href","width","height","Marche","_loadSave","saveName","saved","localStorage","getItem","setState","JSON","parse","_computeResults","_saveState","setItem","stringify","daysRawData","state","_processDays","missedPaymentsByDay","missedTransactionsByDay","duration","id","popupIds","popups","setTimeout","newPopupIds","filter","filterId","newPopups","dayRaw","_computeDay","forEach","rawCustomers","rawSuppliers","customerKeys","paid","paymentTransactions","recievedTransactions","supplied","rawCustomer","paidValue","price","supplierId","rawSupplier","suppliedValue","_computeDailyStats","customersTotal","obtainedTotal","customerEntries","customerPaid","customerSupplied","balance","clearAll","fromEntries","DAYS","Array","fill","showDayForm","toggleReset","onClickLoad","toggleLoad","onClickSave","onClose","onSaveDayForm","data","onSaveEventForm","toggleDay","isSameDay","showForm","toggleEventForm","isOpen","toggleHelp","displayHelp","loadRequested","resetRequested","toggleSave","saveRequested","window","addEventListener","this","removeEventListener","resetButtons","saveButtons","loadButtons","_getButtons","React","Component","App","open","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.47b06c0a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","let lastId = 0;\r\n\r\nexport { newId, times, zip, rounded, subtractArrays }\r\n\r\nfunction newId(prefix='id') {\r\n    lastId++;\r\n    return `${prefix}${lastId}`;\r\n}\r\nfunction times(x) {\r\n    return (f) => {\r\n        if (x > 0) {\r\n            f()\r\n            times (x - 1) (f)\r\n        }\r\n    }\r\n}\r\n\r\nfunction zip(arr1, arr2) {\r\n    return arr1.map((k, i) => [k, arr2[i]]);\r\n}\r\n\r\nfunction rounded(num, decimal) {\r\n    if (!num) return 0;\r\n    num = Number(num);\r\n    const exp = Math.abs(decimal);\r\n    return Math.round((num + Number.EPSILON) * Math.pow(10, exp)) / Math.pow(10, exp);\r\n}\r\n\r\nfunction subtractArrays(arr1, arr2) {\r\n    const lowestLength = Math.min(arr1.length, arr2.length);\r\n    const arrs = [arr1, arr2];\r\n    const newArrs = [[...arr1], [...arr2]];\r\n    const ascSortedArrs = arrs[0].length === lowestLength ? [0, 1] : [1, 0];\r\n    const lowIndex = ascSortedArrs[0];\r\n    const highIndex = ascSortedArrs[1];\r\n    for (let i = 0; i < lowestLength; i++) {\r\n        const element = arrs[lowIndex][i];\r\n        if (arrs[highIndex].includes(element)) {\r\n            newArrs[0].splice(newArrs[0].indexOf(element), 1);\r\n            newArrs[1].splice(newArrs[1].indexOf(element), 1);\r\n        }\r\n    }\r\n    return newArrs;\r\n}\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Popups.css\";\r\n\r\nfunction Popups({ messageIds, messages }) {\r\n\r\n    return (\r\n        <div className=\"popups\">\r\n            {messageIds.map((messageId) => {\r\n                const message = messages[messageId];\r\n                return (\r\n                    <div key={messageId} className={\"popup \" + message.type}>\r\n                        <span>{message.title}</span>\r\n                        {message.content}\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Popups;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {rounded(customers[customerId].paidTotal, 3)}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {rounded(customers[customerId].suppliedTotal, 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {rounded(missedPayments[customerId], 3)}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index, dayAccounting }) {\r\n    if (!Object.keys(day.customers).length) {\r\n        return (<div></div>);\r\n    }\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>{day.dayName}</h1>\r\n            <div className=\"day-data\">\r\n                <div>Total des paiements manqués: {rounded(day.dailyLoss, 3)}€</div>\r\n                <div>Tickets de tombola vendus: {dayAccounting.tombolaTickets}</div>\r\n                <div>Moyenne des dépenses des clients: {rounded((day.customersAverage || 0), 3)}€</div>\r\n                <div>Moyenne des objets reçu par les clients: {rounded((day.obtainedAverage || 0), 3)}€</div>\r\n                <CustomerData customers={day.customers}/>\r\n                <MissedPayments missedPayments={day.missedPayments}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\nimport { rounded } from \"../../utils/utils.js\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days, costTotal, suppliers, openDay, supplierTotal, dailyAccounting, ticketPrice }) {\r\n\r\n    function getContent() {\r\n        let soldTickets = 0;\r\n        const supplierTuples = Object.entries(suppliers);\r\n        supplierTuples.sort((a, b) => {\r\n            if (a[1].total < b[1].total) {\r\n                return 1;\r\n            }\r\n            if (a[1].total > b[1].total) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        for (const value of Object.values(dailyAccounting)) {\r\n            soldTickets += Number(value.tombolaTickets) || 0;\r\n        }\r\n        return(\r\n            <div className=\"content\">\r\n                {getBenefices(soldTickets)}\r\n                {getStats(soldTickets)}\r\n                {!!supplierTuples.length && getSupplierLadder(supplierTuples)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getSupplierLadder(supplierTuples) {\r\n        return (\r\n            <div className=\"global-stats\">\r\n               <h3>Classement des fournisseurs</h3>\r\n                {supplierTuples && supplierTuples.map((tuple, index) => {\r\n                    return(\r\n                        <div className=\"ladder-entry\">\r\n                            <span>{index+1}.</span>\r\n                            <span>[{tuple[0]}]</span>\r\n                            <span className=\"value\">{rounded(tuple[1].total, 3)}€</span>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getStats(soldTickets) {\r\n        const dailyArray = Object.values(days);\r\n        let totalSpendings = 0;\r\n        let totalObtained = 0;\r\n        let totalCustomers = 0;\r\n        for (const day of dailyArray) {\r\n            totalSpendings += day.customersAverage || 0;\r\n            totalObtained += day.obtainedAverage || 0;\r\n            totalCustomers += Object.keys(day.customers).length;\r\n        }\r\n        return (\r\n            <div className=\"global-stats\">\r\n                <h3>Statistiques (sur {days.length} jour(s))</h3>\r\n                <div className=\"daily-stats\">\r\n                    <div><span>Moyenne payée par les clients:</span> <span className=\"value-display\">{rounded((totalSpendings / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Moyenne des articles reçu:</span> <span className=\"value-display\">{rounded((totalObtained / (dailyArray.length || 1)), 3)}€</span></div>\r\n                    <div><span>Tickets de tombola Vendus:</span> <span className=\"value-display\">{soldTickets}</span></div>\r\n                    <div><span>Quantité de fiches payées:</span> <span className=\"value-display\">{totalCustomers}</span></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function getBenefices(soldTickets) {\r\n        return (\r\n            <div className=\"global-stats profits\">\r\n                <h3>Bénéfices</h3>\r\n                <div><span>Bénéfices des vendeurs:</span> <span className=\"value-display\">{rounded(supplierTotal, 3)}€</span></div>\r\n                <div><span>Vente de tombola:</span></div>\r\n                <div><span>{soldTickets} x {ticketPrice}€: </span><span className=\"value-display\">{rounded(ticketPrice * (soldTickets), 3)}€ </span></div>\r\n                <div><span><i className=\"fa fa-minus icon\"/>Total des frais: </span><span className=\"value-display\">-{rounded(costTotal, 3)}€</span></div>\r\n                <div className=\"separated\"><span>Bénéfices net du marché: </span><span className=\"value-display\">{rounded(computeTotal(soldTickets), 3)}€</span></div>\r\n                {days.map((value, dayIndex) => {\r\n                    if (!(openDay && openDay !== value.dayName)) {\r\n                        return(<DayData day={value} key={dayIndex} dayAccounting={dailyAccounting[value.dayName]} index={dayIndex}/>);\r\n                    } else {\r\n                        return(<div/>)\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function computeTotal(soldTickets) {\r\n        return (supplierTotal + (ticketPrice * (soldTickets))) - costTotal;\r\n    }\r\n\r\n    return (\r\n        <div>{getContent()}</div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React, { useState, useRef } from \"react\";\r\nimport FileInput from \"../FileInput/FileInput.js\";\r\nimport { times } from \"../../utils/utils.js\";\r\nimport \"./DayForm.css\";\r\n\r\n/*\r\n * dayRawData = { customers: [], suppliers: [] }\r\n */\r\nfunction DayForm({\r\n    day,\r\n    dayRawData = {},\r\n    save,\r\n    addMessage,\r\n    dailyAccounting,\r\n    missedTransactions,\r\n}) {\r\n    const [customers, setCustomers] = useState([].concat(dayRawData.customers));\r\n    const [newCustomer, setNewCustomer] = useState([]);\r\n    const [suppliers, setSuppliers] = useState([].concat(dayRawData.suppliers));\r\n    const [newSupplier, setNewSupplier] = useState([]);\r\n    const [file, setFile] = useState(undefined);\r\n    const [dayAccounting, setDayAccounting] = useState(dailyAccounting);\r\n    const customerFirstInput = useRef(null);\r\n    const supplierFirstInput = useRef(null);\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {blob} blob\r\n     * @return {file}\r\n     */\r\n    const _readFile = async (blob) => {\r\n        try {\r\n            const reader = new FileReader();\r\n            reader.readAsText(blob);\r\n            return new Promise((resolve) => {\r\n                reader.onload = (e) => {\r\n                    resolve(reader.result);\r\n                };\r\n            });\r\n        } catch (error) {\r\n            this._addMessage(\"ERREUR\", error.message, \"error\");\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} page returned by a fileReader in \"reader.readAsText\"\r\n     */\r\n    const _readPage = async (page) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        times(OFFSET_HEIGHT)(() => lines.shift());\r\n        // colNames\r\n        lines.shift().split(\",\"); // removes and saves column titles.\r\n        /*\r\n         *\r\n         * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n         * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n         * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n         *\r\n         * suppliers = { supplierId : { total } }\r\n         *\r\n         */\r\n        const newCustomers = [];\r\n        const newSuppliers = [];\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(\",\");\r\n\r\n            /* DATA FILL\r\n             *   paid\r\n             *   currentLine[0] purchase - customerId\r\n             *   currentLine[1] purchase - supplierId\r\n             *   currentLine[2] purchase - item Name\r\n             *   currentLine[3] purchase - item Price\r\n             *   supplied\r\n             *   currentLine[4] payment - supplierId\r\n             *   currentLine[5] payment - customerId\r\n             *   currentLine[6] payment - item Name\r\n             *   currentLine[7] payment - item Price\r\n             */\r\n\r\n            if (currentLine[0]) {\r\n                // CUSTOMER SIDE\r\n                newCustomers.push([\r\n                    Number(currentLine[0]),\r\n                    Number(currentLine[1]),\r\n                    currentLine[2],\r\n                    Number(currentLine[3]),\r\n                ]);\r\n            }\r\n            if (currentLine[4] && currentLine[5]) {\r\n                // SUPPLIER SIDE\r\n                newSuppliers.push([\r\n                    Number(currentLine[4]),\r\n                    Number(currentLine[5]),\r\n                    currentLine[6],\r\n                    Number(currentLine[7]),\r\n                ]);\r\n            }\r\n        }\r\n        return { newCustomers, newSuppliers };\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} type customer or supplier\r\n     */\r\n    const _saveRow = async (type) => {\r\n        let local;\r\n\r\n        if (type === \"customer\") {\r\n            const newCustomerlocal = newCustomer;\r\n            await setNewCustomer([\"\", \"\", \"\", \"\"]);\r\n            local = customers;\r\n            local.push(newCustomerlocal);\r\n            await setCustomers(local);\r\n        }\r\n        if (type === \"supplier\") {\r\n            const newSupplierlocal = newSupplier;\r\n            await setNewSupplier([\"\", \"\", \"\", \"\"]);\r\n            local = suppliers;\r\n            local.push(newSupplierlocal);\r\n            await setSuppliers(local);\r\n        }\r\n        await save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onCustomerGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    };\r\n    const onCustomerLastBoxKeyDown = async (e) => {\r\n        if (e.key === \"Tab\") {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            customerFirstInput.current.focus();\r\n            await _saveRow(\"customer\");\r\n        }\r\n    }\r\n    /**\r\n     * Handler for File Input onChange.\r\n     *\r\n     * @param {file[]} files\r\n     * @return {void}\r\n     */\r\n    const onFileInputChange = async (files) => {\r\n        const file = files[0];\r\n        if (!file.name.includes(\".csv\")) {\r\n            addMessage(\"ERREUR\", \"Le fichier doit être un .csv\", \"error\", 8000);\r\n            return;\r\n        }\r\n        await setFile(file);\r\n        const page = await _readFile(file);\r\n        const { newCustomers, newSuppliers } = await _readPage(page);\r\n        setCustomers(newCustomers);\r\n        setSuppliers(newSuppliers);\r\n        save(\r\n            day,\r\n            { customers: newCustomers, suppliers: newSuppliers },\r\n            dayAccounting\r\n        );\r\n    };\r\n    /**\r\n     *\r\n     * @param {mouseEvent} e\r\n     */\r\n    const onFileInputWrapperClick = (e) => {\r\n        // allows clicking on the file input from the outside element.\r\n        if (e.currentTarget !== e.target) {\r\n            return;\r\n        }\r\n        const input = e.currentTarget.getElementsByTagName(\"input\");\r\n        if (input.length) {\r\n            e.stopPropagation();\r\n            input[0].click();\r\n        }\r\n    };\r\n    /**\r\n     *\r\n     * @param {keyEvent} e\r\n     */\r\n    const onSupplierGroupInputKeyDown = async (e) => {\r\n        if (e.key === \"Enter\") {\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    };\r\n    const onSupplierLastBoxKeyDown = async (e) => {\r\n        if (e.key === \"Tab\") {\r\n            e.stopPropagation();\r\n            e.preventDefault();\r\n            supplierFirstInput.current.focus();\r\n            await _saveRow(\"supplier\");\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setCustomerValue = (index, colIndex, value) => {\r\n        const localCustomers = customers || [];\r\n\r\n        if (index === false) {\r\n            const localNewCustomer = newCustomer.map((value) => value || \"\");\r\n            localNewCustomer[colIndex] = value;\r\n            setNewCustomer(localNewCustomer);\r\n            return;\r\n        }\r\n\r\n        if (!localCustomers[index]) {\r\n            localCustomers[index] = [];\r\n        }\r\n        localCustomers[index][colIndex] = value;\r\n        setCustomers(localCustomers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number} index the index of the line\r\n     * @param {Number} colIndex [0-3] the number within the row.\r\n     * @param {*} value\r\n     */\r\n    const setSupplierValue = (index, colIndex, value) => {\r\n        const localSuppliers = suppliers || [];\r\n\r\n        if (index === false) {\r\n            const localNewSupplier = newSupplier.map((value) => value || \"\");\r\n            localNewSupplier[colIndex] = value;\r\n            setNewSupplier(localNewSupplier);\r\n            return;\r\n        }\r\n\r\n        if (!localSuppliers[index]) {\r\n            localSuppliers[index] = [];\r\n        }\r\n        localSuppliers[index][colIndex] = value;\r\n        setSuppliers(localSuppliers);\r\n        save(day, { customers, suppliers }, dayAccounting);\r\n    };\r\n    /**\r\n     *\r\n     * @param {Number || String} val the value of the input\r\n     */\r\n    const setTombolaTicket = async (val) => {\r\n        await setDayAccounting({ tombolaTickets: Number(val) });\r\n        await save(\r\n            day,\r\n            { customers, suppliers },\r\n            { tombolaTickets: Number(val) }\r\n        );\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    return (\r\n        <div className=\"content input-page noselect\">\r\n            <div className=\"title-area ml-10\">\r\n                <h1>{day}</h1>\r\n                <div\r\n                    className=\"form-button\"\r\n                    onClick={(e) => onFileInputWrapperClick(e)}\r\n                >\r\n                    <FileInput\r\n                        label=\"Ajouter .csv\"\r\n                        className=\"noselect\"\r\n                        value={file}\r\n                        onChange={onFileInputChange}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <span className=\"ml-10\">Tickets de tombola vendus:</span>\r\n                <input\r\n                    className=\"number-input ml-10\"\r\n                    pattern=\"[0-9]*\"\r\n                    type=\"number\"\r\n                    onChange={(event) => {\r\n                        setTombolaTicket(event.target.value);\r\n                    }}\r\n                    value={dayAccounting.tombolaTickets}\r\n                />\r\n            </div>\r\n            <div className=\"area-container\">\r\n                <div\r\n                    className=\"group-input customers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {customers.map((customer, index) => {\r\n                        const localMissedTransactions = missedTransactions[customer[0]];\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"customer-row row saved-row \" +\r\n                                    (!!(\r\n                                        localMissedTransactions &&\r\n                                        localMissedTransactions.paidSurplus &&\r\n                                        localMissedTransactions.paidSurplus.includes(Number(customer[3]))\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"customer_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setCustomerValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={customer[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"customer-row row new-row\" onKeyDown={onCustomerGroupInputKeyDown}>\r\n                        <input\r\n                            ref={customerFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newCustomer[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newCustomer[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newCustomer[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onKeyDown={onCustomerLastBoxKeyDown}\r\n                            onChange={(event) => {\r\n                                setCustomerValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newCustomer[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        Appuier sur 'Tab' pour naviguer entre les cases.\r\n                        Appuier sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n                <div\r\n                    className=\"group-input suppliers\"\r\n                >\r\n                    <div className=\"col-titles\">\r\n                        <div className=\"number\">Fournisseur</div>\r\n                        <div className=\"number\">Client</div>\r\n                        <div className=\"string\">Article</div>\r\n                        <div className=\"number\">Prix</div>\r\n                    </div>\r\n                    {suppliers.map((supplier, index) => {\r\n                        const localMissedTransactions = missedTransactions[supplier[1]];\r\n                        return (\r\n                            <div\r\n                                className={\r\n                                    \"supplier-row row saved-row \" +\r\n                                    (!!(\r\n                                        localMissedTransactions &&\r\n                                        localMissedTransactions.suppliedSurplus &&\r\n                                        localMissedTransactions.suppliedSurplus.includes(Number(supplier[3]))\r\n                                    )\r\n                                        ? \"unpaid\"\r\n                                        : \"\")\r\n                                }\r\n                                key={\"supplier_\" + index}\r\n                            >\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            0,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[0]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            1,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[1]}\r\n                                />\r\n                                <input\r\n                                    className=\"string-input\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            2,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[2]}\r\n                                />\r\n                                <input\r\n                                    className=\"number-input\"\r\n                                    pattern=\"[0-9]*\"\r\n                                    type=\"number\"\r\n                                    onChange={(event) => {\r\n                                        setSupplierValue(\r\n                                            index,\r\n                                            3,\r\n                                            event.target.value\r\n                                        );\r\n                                    }}\r\n                                    value={supplier[3]}\r\n                                />\r\n                                €\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div className=\"supplier-row row new-row\" onKeyDown={onSupplierGroupInputKeyDown}>\r\n                        <input\r\n                            ref={supplierFirstInput}\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 0, event.target.value);\r\n                            }}\r\n                            value={newSupplier[0]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 1, event.target.value);\r\n                            }}\r\n                            value={newSupplier[1]}\r\n                        />\r\n                        <input\r\n                            className=\"string-input\"\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 2, event.target.value);\r\n                            }}\r\n                            value={newSupplier[2]}\r\n                        />\r\n                        <input\r\n                            className=\"number-input\"\r\n                            pattern=\"[0-9]*\"\r\n                            type=\"number\"\r\n                            onKeyDown={onSupplierLastBoxKeyDown}\r\n                            onChange={(event) => {\r\n                                setSupplierValue(false, 3, event.target.value);\r\n                            }}\r\n                            value={newSupplier[3]}\r\n                        />\r\n                        €\r\n                    </div>\r\n                    <div>\r\n                        Appuier sur 'Tab' pour naviguer entre les cases.\r\n                        Appuier sur 'Entrer' pour sauver la dernière ligne.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./EventForm.css\";\r\n\r\n/*\r\n * All the inputs to register the expenses of the event.\r\n */\r\nfunction EventForm({ eventExpenses, ticketPrice, save }) {\r\n\r\n    const [eventExpensesState, setEventExpensesState] = useState(eventExpenses || {});\r\n    const [ticketP, setTicketP] = useState(ticketPrice || 0);\r\n\r\n    // the names are only relevant in this context, the parent component will just make a sum of all those expenses.\r\n    const EXPENSE_TYPES = ['Salle', 'Transactions', 'Assurance', 'Papeterie', 'Timbres', 'Courses', 'Traiteur', 'Schmitz', 'Autre'];\r\n\r\n    useEffect(() => {\r\n        // willMount\r\n        return () => {\r\n            // willUnMount\r\n            save({\r\n                eventExpenses: eventExpensesState,\r\n                ticketPrice: ticketP,\r\n            });\r\n        }\r\n    }, [save, eventExpensesState, ticketP]);\r\n\r\n\r\n    function setExpense(expense, value) {\r\n        const accountingState = Object.assign({}, eventExpensesState);\r\n        accountingState[expense] = value;\r\n        setEventExpensesState(accountingState);\r\n    }\r\n\r\n    function getExpenseValue(expense) {\r\n        return eventExpensesState[expense] || 0;\r\n    }\r\n\r\n    function renderEventExpenses() {\r\n        return (\r\n            <div className=\"input-grid left\">\r\n                {EXPENSE_TYPES.map(expense => {\r\n                    return (\r\n                        <div>\r\n                            <span className=\"accounting-span\">{expense}: </span>\r\n                            <input className=\"accounting-input\" onChange={event => { setExpense(expense, Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={getExpenseValue(expense)}/> €\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderDailyAccounting() {\r\n        return (\r\n            <div className=\"input-grid right\">\r\n                <div>\r\n                    <span className=\"accounting-span\"> Prix des tickets: </span>\r\n                    <input className=\"accounting-input\" onChange={event => { setTicketP(Number(event.target.value)) }} pattern=\"[0-9]*\" type=\"number\" value={ticketP}/>€\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"form noselect\">\r\n                {renderEventExpenses()}\r\n                {renderDailyAccounting()}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EventForm;\r\n","import React, { useState } from \"react\";\r\nimport \"./HelpBox.css\";\r\n\r\nfunction HelpBox() {\r\n\r\n    const [showVideo, setShowVideo] = useState(false);\r\n\r\n    const toggleVideo = () => {\r\n        setShowVideo(!showVideo);\r\n    }\r\n\r\n    return (\r\n        <div className=\"help noselect\">\r\n            <div className=\"help-link ml-auto\">\r\n                <a\r\n                    className=\"help-text\"\r\n                    target=\"new\"\r\n                    href=\"https://docs.google.com/spreadsheets/d/1UKT38_RUa3MQ_HEGtWgaPKvedD35wYksaj7-T0sc9N8/edit?usp=sharing\"\r\n                >\r\n                    Format accepté\r\n                </a>\r\n                <i className=\"fa fa-file-excel-o\" />\r\n            </div>\r\n            <div className=\"help-link ml-auto\" onClick={toggleVideo}>\r\n                <u>Vidéo d'explication</u>\r\n                <i className=\"fa fa-play\" />\r\n            </div>\r\n            {!!showVideo &&\r\n                (\r\n                    <iframe title=\"help video\" src=\"https://drive.google.com/file/d/1hk40AsnzUJ7gUevslwSnfZGkSvyJ0OKu/preview\" width=\"900\" height=\"500\"/>\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HelpBox;\r\n\r\n","import React from \"react\";\r\nimport \"./Marche.css\";\r\n\r\nimport { newId, zip, subtractArrays } from \"../../utils/utils.js\";\r\nimport NavBar from \"../NavBar/NavBar.js\";\r\nimport Popups from \"../Popups/Popups.js\";\r\nimport PageData from \"../PageData/PageData.js\";\r\nimport DayForm from \"../DayForm/DayForm.js\";\r\nimport EventForm from \"../EventForm/EventForm.js\";\r\nimport HelpBox from \"../HelpBox/HelpBox.js\";\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.DAYS = [\"Vendredi\", \"Samedi\", \"Dimanche\"]; // const\r\n        this.state = {\r\n            daysRawData: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n            ),\r\n            days: [], // { dayName, customers, missedPayments, missedTransactions, dailyLoss, customersAverage, obtainedAverage }\r\n            missedPaymentsByDay: {},\r\n            missedTransactionsByDay: {},\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false, // toggle for the confirm/cancel buttons for removing files\r\n            loadRequested: false,\r\n            saveRequested: false,\r\n            showForm: false, // toggle for the accounting/event input form\r\n            showDayForm: false, // false or this.DAYS[*]\r\n            displayHelp: false, // toggle the \"help\" box\r\n            eventExpenses: {}, // {expenseName: <int>amount}\r\n            dailyAccounting: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n            ), // { dayName: {valuesDict} }\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n            popupIds: [],\r\n            popups: {}, // {content, type}\r\n        };\r\n    }\r\n    async componentDidMount() {\r\n        window.addEventListener('beforeunload', this.onClose);\r\n        await this._loadSave('saved-state-auto');\r\n    }\r\n    componentWillUnmount() {\r\n        window.removeEventListener('beforeunload', this.onClose);\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// PRIVATE ///////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Loads the save from the localStorage.\r\n     */\r\n    _loadSave = async (saveName) => {\r\n        const saved = localStorage.getItem(saveName);\r\n        if (saved) {\r\n            await this.setState(JSON.parse(saved));\r\n        }\r\n        await this._addMessage(\r\n            \"Chargé\",\r\n            \"La dernière sauvegarde à été chargée\",\r\n            \"info\",\r\n            2000\r\n        );\r\n        await this._computeResults();\r\n    };\r\n    /**\r\n     * Saves part of the state to the localStorage.\r\n     */\r\n    _saveState = async (saveName) => {\r\n        localStorage.setItem(\r\n            saveName,\r\n            JSON.stringify({\r\n                daysRawData: this.state.daysRawData,\r\n                eventExpenses: this.state.eventExpenses,\r\n                dailyAccounting: this.state.dailyAccounting,\r\n                ticketPrice: this.state.ticketPrice,\r\n                costTotal: this.state.costTotal,\r\n            })\r\n        );\r\n        await this._addMessage(\r\n            \"Sauvegardé\",\r\n            \"Les informations ont été sauvegardées\",\r\n            \"info\",\r\n            5000\r\n        );\r\n    };\r\n    /**\r\n     * processes the days and updates the state.\r\n     */\r\n    _computeResults = async () => {\r\n        const {\r\n            days,\r\n            suppliers,\r\n            supplierTotal,\r\n            missedPaymentsByDay,\r\n            missedTransactionsByDay,\r\n        } = await this._processDays();\r\n        await this.setState({\r\n            days,\r\n            suppliers,\r\n            supplierTotal,\r\n            missedPaymentsByDay,\r\n            missedTransactionsByDay,\r\n        });\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} title\r\n     * @param {String} content text content of the message\r\n     * @param {String} [type] info | error\r\n     * @param {Number} [duration] amount of ms\r\n     */\r\n    _addMessage = async (title, content, type='info', duration=5000) => {\r\n        const id = newId(\"message\");\r\n        await this.setState({\r\n            popupIds: this.state.popupIds.concat(id),\r\n            popups: Object.assign({}, this.state.popups, {\r\n                [id]: {\r\n                    title,\r\n                    content,\r\n                    type,\r\n                },\r\n            }),\r\n        });\r\n        setTimeout(async () => {\r\n            const newPopupIds = this.state.popupIds.filter((filterId) => {\r\n                return filterId !== id;\r\n            });\r\n            const newPopups = Object.assign({}, this.state.popups);\r\n            delete newPopups[id];\r\n            await this.setState({\r\n                popupIds: newPopupIds,\r\n                popups: newPopups,\r\n            });\r\n        }, duration);\r\n    };\r\n    /**\r\n     * Extracts values from day raw data.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    _processDays = async () => {\r\n        const days = [];\r\n        let suppliers = {};\r\n        let supplierTotal = 0;\r\n        let missedPaymentsByDay = this.state.missedPaymentsByDay;\r\n        let missedTransactionsByDay = this.state.missedTransactionsByDay;\r\n        for (const [dayName, dayRaw] of Object.entries(\r\n            this.state.daysRawData\r\n        )) {\r\n            const result = this._computeDay({ dayName, dayRaw, suppliers });\r\n            suppliers = result.suppliers;\r\n            missedPaymentsByDay[dayName] = result.missedPayments;\r\n            missedTransactionsByDay[dayName] = result.missedTransactions;\r\n            days.push(result.day);\r\n        }\r\n        Object.values(suppliers).forEach((val) => (supplierTotal += val.total));\r\n        return { days, suppliers, supplierTotal, missedPaymentsByDay, missedTransactionsByDay };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} param0\r\n     * @param {String} param0.dayName\r\n     * @param {Object} param0.dayRaw\r\n     * @param {Object} param0.suppliers\r\n     */\r\n    _computeDay = ({ dayName, dayRaw, suppliers }) => {\r\n        /* DATA FILL\r\n         *   paid\r\n         *   rawCustomers[*][0] purchase - customerId\r\n         *   rawCustomers[*][1] purchase - supplierId\r\n         *   rawCustomers[*][2] purchase - item Name\r\n         *   rawCustomers[*][3] purchase - item Price\r\n         *   supplied\r\n         *   rawSuppliers[*][0] payment - supplierId\r\n         *   rawSuppliers[*][1] payment - customerId\r\n         *   rawSuppliers[*][2] payment - item Name\r\n         *   rawSuppliers[*][3] payment - item Price\r\n         */\r\n        const rawCustomers = dayRaw.customers;\r\n        const rawSuppliers = dayRaw.suppliers;\r\n        const customers = {};\r\n        const customerKeys = {\r\n            paid: [],\r\n            paidTotal: 0,\r\n            paymentTransactions: [],\r\n            recievedTransactions: [],\r\n            supplied: [],\r\n            suppliedTotal: 0,\r\n        };\r\n\r\n        for (const rawCustomer of rawCustomers) {\r\n            if (rawCustomer[0]) {\r\n                // CUSTOMER SIDE\r\n                // creates the customer if it doesn't already exist.\r\n                customers[rawCustomer[0]] = customers[rawCustomer[0]] || Object.assign({}, customerKeys);\r\n                // adds the total paid by the customer\r\n                const paidValue = Number(rawCustomer[3]);\r\n                customers[rawCustomer[0]].paidTotal += paidValue || 0;\r\n                customers[rawCustomer[0]].paymentTransactions.push(paidValue);\r\n                // adds a line for what the customer paid\r\n                customers[rawCustomer[0]].paid.push({\r\n                    name: rawCustomer[2],\r\n                    price: rawCustomer[3],\r\n                    supplierId: rawCustomer[1],\r\n                });\r\n            }\r\n        }\r\n        for (const rawSupplier of rawSuppliers) {\r\n            if (rawSupplier[0] && rawSupplier[1]) {\r\n                // SUPPLIER SIDE\r\n                customers[rawSupplier[1]] = customers[rawSupplier[1]] || Object.assign({}, customerKeys);\r\n                // adds the total paid by the customer\r\n                const suppliedValue = Number(rawSupplier[3]);\r\n                customers[rawSupplier[1]].suppliedTotal += suppliedValue || 0;\r\n                customers[rawSupplier[1]].recievedTransactions.push(suppliedValue);\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[rawSupplier[1]].supplied.push({\r\n                    name: rawSupplier[2],\r\n                    price: rawSupplier[3],\r\n                    supplierId: rawSupplier[0],\r\n                });\r\n                // computes the total value of supplied by the supplier.\r\n                suppliers[rawSupplier[0]] = suppliers[rawSupplier[0]] || {\r\n                    total: 0,\r\n                };\r\n                suppliers[rawSupplier[0]].total += Number(rawSupplier[3]) || 0;\r\n            }\r\n        }\r\n\r\n        const {\r\n            missedPayments,\r\n            missedTransactions,\r\n            dailyLoss,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        } = this._computeDailyStats(customers);\r\n        return {\r\n            day: {\r\n                dayName,\r\n                customers,\r\n                missedPayments,\r\n                missedTransactions,\r\n                dailyLoss,\r\n                customersAverage,\r\n                obtainedAverage,\r\n            },\r\n            suppliers,\r\n            missedPayments,\r\n            missedTransactions,\r\n        };\r\n    };\r\n    /**\r\n     *\r\n     * @param {Object} customers\r\n     */\r\n    _computeDailyStats = (customers) => {\r\n        const missedPayments = {};\r\n        const missedTransactions = {};\r\n        let dailyLoss = 0;\r\n        let customersTotal = 0;\r\n        let obtainedTotal = 0;\r\n        const customerEntries = Object.entries(customers)\r\n        for (const [customerId, customer] of customerEntries) {\r\n            const customerPaid = customer.paidTotal;\r\n            const customerSupplied = customer.suppliedTotal;\r\n            const balance = customerSupplied - customerPaid;\r\n            const [paidSurplus, suppliedSurplus] = subtractArrays(customer.paymentTransactions, customer.recievedTransactions);\r\n            missedTransactions[customerId] = { paidSurplus, suppliedSurplus };\r\n            obtainedTotal += Number(customerSupplied);\r\n            customersTotal += Number(customerPaid);\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n\r\n\r\n        }\r\n        const customersAverage = customersTotal / (customerEntries.length || 0);\r\n        const obtainedAverage = obtainedTotal / (customerEntries.length || 0);\r\n        return {\r\n            missedPayments,\r\n            missedTransactions,\r\n            dailyLoss,\r\n            customersTotal,\r\n            customersAverage,\r\n            obtainedAverage,\r\n        };\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     *\r\n     */\r\n    clearAll = async () => {\r\n        await this.setState({\r\n            daysRawData: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ customers: [], suppliers: [] }))\r\n            ),\r\n            showDayForm: false,\r\n            eventExpenses: {},\r\n            dailyAccounting: Object.fromEntries(\r\n                zip(this.DAYS, Array(3).fill({ tombolaTickets: 0 }))\r\n            ),\r\n            supplierTotal: 0,\r\n            costTotal: 0,\r\n            ticketPrice: 0,\r\n        });\r\n        await this._computeResults();\r\n        await this._addMessage(\r\n            \"\",\r\n            \"Tout le contenu a été réinitialisé\",\r\n            \"error\",\r\n            5000\r\n        );\r\n        await this.toggleReset();\r\n    };\r\n    onClickLoad = async () => {\r\n        await this._loadSave('saved-state-manual');\r\n        await this.toggleLoad();\r\n    }\r\n    onClickSave = async () => {\r\n        await this._saveState('saved-state-manual');\r\n        await this.toggleLoad();\r\n    }\r\n    onClose = async () => {\r\n        await this._saveState('saved-state-auto');\r\n    }\r\n    /**\r\n     * This is a handler given to the DayForm to propagate the raw daily data to here.\r\n     *\r\n     * @param {String} day\r\n     * @param {Object} data\r\n     * @param {Object} dayAccounting The additional accounting informations related to 1 single day (currently being the amount of ticket sold)\r\n     */\r\n    onSaveDayForm = async (day, data, dayAccounting) => {\r\n        const daysRawData = Object.assign({}, this.state.daysRawData);\r\n        daysRawData[day] = data;\r\n        await this.setState({\r\n            daysRawData,\r\n            dailyAccounting: Object.assign(this.state.dailyAccounting, {\r\n                [day]: dayAccounting,\r\n            }),\r\n        });\r\n        await this._computeResults();\r\n    };\r\n    /**\r\n     * Handler for event form.\r\n     */\r\n    onSaveEventForm = async ({ eventExpenses, ticketPrice }) => {\r\n        let costTotal = 0;\r\n        Object.values(eventExpenses).forEach((val) => (costTotal += val));\r\n        await this.setState({ eventExpenses, ticketPrice, costTotal });\r\n    };\r\n    /**\r\n     *\r\n     * @param {String} day\r\n     */\r\n    toggleDay = async (day) => {\r\n        const isSameDay = this.state.showDayForm === day;\r\n        await this.setState({ showDayForm: false, showForm: false });\r\n        if (!isSameDay) {\r\n            await this.setState({ showDayForm: day });\r\n        }\r\n    };\r\n    toggleEventForm = async () => {\r\n        const isOpen = this.state.showForm;\r\n        await this.setState({ showForm: !isOpen, showDayForm: false });\r\n        if (isOpen) {\r\n            this._computeResults();\r\n        }\r\n    };\r\n    toggleHelp = async () => {\r\n        await this.setState({ displayHelp: !this.state.displayHelp });\r\n    };\r\n    toggleLoad = async () => {\r\n        await this.setState({ loadRequested: !this.state.loadRequested });\r\n    };\r\n    toggleReset = async () => {\r\n        await this.setState({ resetRequested: !this.state.resetRequested });\r\n    };\r\n    toggleSave = async () => {\r\n        await this.setState({ saveRequested: !this.state.saveRequested });\r\n    };\r\n\r\n    ////////////////// //////// //////////////////\r\n    ///////////////////// DOM ////////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n     * Generates the buttons to be given to the top nav-bar.\r\n     *\r\n     * @returns {Array} buttons\r\n     */\r\n    _getButtons() {\r\n        // ACCOUNTING\r\n        const buttons = [\r\n            {\r\n                className: (this.state.showForm ? \"active\" : \"\") + \" purple\",\r\n                fa: \"fa-eur\",\r\n                content: \"Comptabilité\",\r\n                callBack: this.toggleEventForm,\r\n            },\r\n        ];\r\n\r\n        // ADD DAYS\r\n        for (const day of this.DAYS) {\r\n            buttons.push({\r\n                className:\r\n                    (this.state.showDayForm === day ? \"active \" : \"\") +\r\n                    (this.state.daysRawData[day].customers.length\r\n                        ? \"green\"\r\n                        : \"alert\"),\r\n                fa: \"fa-calendar\",\r\n                callBack: () => {\r\n                    this.toggleDay(day);\r\n                },\r\n                content: day,\r\n            });\r\n        }\r\n\r\n        // COMPUTE\r\n        /*\r\n        if (Object.keys(this.state.daysRawData).length && !this.state.showForm && !this.state.resetRequested) {\r\n            buttons.push({ content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this._computeResults });\r\n        }\r\n        */\r\n\r\n        // RIGHT\r\n        buttons.push({\r\n            content: \"Aide\",\r\n            fa: \"fa-info-circle\",\r\n            className: \"blue order-2 ml-auto\",\r\n            callBack: this.toggleHelp,\r\n        });\r\n\r\n        // REMOVE FILES\r\n        let resetButtons = [\r\n            {\r\n                content: \"Tout effacer\",\r\n                fa: \"fa-trash\",\r\n                className: \"warning\",\r\n                callBack: this.toggleReset,\r\n            },\r\n        ];\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"green\",\r\n                    callBack: this.toggleReset,\r\n                },\r\n                {\r\n                    content: \"Confirmer: Effacer l'encodage en cours\",\r\n                    fa: \"fa-check\",\r\n                    className: \"alert\",\r\n                    callBack: this.clearAll,\r\n                },\r\n            ];\r\n        }\r\n        buttons.push(...resetButtons);\r\n\r\n        // SAVE\r\n        let saveButtons = [\r\n            {\r\n                content: \"Sauvegarder\",\r\n                fa: \"fa-upload\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleSave,\r\n            },\r\n        ];\r\n        if (this.state.saveRequested) {\r\n            saveButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"green\",\r\n                    callBack: this.toggleSave,\r\n                },\r\n                {\r\n                    content: \"Confirmer: Sauvegarder\",\r\n                    fa: \"fa-check\",\r\n                    className: \"alert\",\r\n                    callBack: this.onClickSave,\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.loadRequested) {\r\n            buttons.push(...saveButtons);\r\n        }\r\n\r\n        // LOAD\r\n        let loadButtons = [\r\n            {\r\n                content: \"Charcher\",\r\n                fa: \"fa-download\",\r\n                className: \"green order-2\",\r\n                callBack: this.toggleLoad,\r\n            },\r\n        ];\r\n        if (this.state.loadRequested) {\r\n            loadButtons = [\r\n                {\r\n                    content: \"Annuler\",\r\n                    fa: \"fa-times\",\r\n                    className: \"green\",\r\n                    callBack: this.toggleLoad,\r\n                },\r\n                {\r\n                    content: \"Confirmer: Charder la Sauvegarde\",\r\n                    fa: \"fa-check\",\r\n                    className: \"alert\",\r\n                    callBack: this.onClickLoad,\r\n                },\r\n            ];\r\n        }\r\n        if (!this.state.saveRequested) {\r\n            buttons.push(...loadButtons);\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NavBar buttons={this._getButtons()} />\r\n                {!!this.state.popupIds.length && (\r\n                    <Popups\r\n                        messageIds={this.state.popupIds}\r\n                        messages={this.state.popups}\r\n                    />\r\n                )}\r\n                {!!this.state.displayHelp && (\r\n                    <HelpBox/>\r\n                )}\r\n                {!!this.DAYS.includes(this.state.showDayForm) && (\r\n                    <DayForm\r\n                        day={this.state.showDayForm}\r\n                        dayRawData={\r\n                            this.state.daysRawData[this.state.showDayForm]\r\n                        }\r\n                        save={this.onSaveDayForm}\r\n                        addMessage={this._addMessage}\r\n                        missedTransactions={ this.state.missedTransactionsByDay[this.state.showDayForm] }\r\n                        dailyAccounting={\r\n                            this.state.dailyAccounting[this.state.showDayForm]\r\n                        }\r\n                    />\r\n                )}\r\n                {!!this.state.showForm ? (\r\n                    <EventForm\r\n                        eventExpenses={this.state.eventExpenses}\r\n                        ticketPrice={this.state.ticketPrice}\r\n                        save={this.onSaveEventForm}\r\n                    />\r\n                ) : (\r\n                    <PageData\r\n                        days={this.state.days}\r\n                        dailyAccounting={this.state.dailyAccounting}\r\n                        ticketPrice={this.state.ticketPrice}\r\n                        costTotal={this.state.costTotal}\r\n                        suppliers={this.state.suppliers}\r\n                        openDay={this.state.showDayForm}\r\n                        supplierTotal={this.state.supplierTotal}\r\n                    />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState, useEffect } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function openApp() {\n        setState({ open: true });\n    }\n\n    useEffect(() => {\n        setTimeout(async () => {\n            setState({ open: true });\n        }, 15000);\n        // willMount\n        return () => {\n            // willUnMount\n        }\n    }, [setState]);\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={openApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// turn service worker off\r\n//serviceWorker.unregister();\r\n"],"sourceRoot":""}