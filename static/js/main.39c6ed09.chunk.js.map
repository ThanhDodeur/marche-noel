{"version":3,"sources":["description/snowflake.svg","components/Accueil/Accueil.js","components/NavBar/NavBar.js","components/CustomerData/CustomerData.js","components/MissedPayments/MissedPayments.js","components/DayData/DayData.js","components/PageData/PageData.js","components/FileInput/FileInput.js","components/Marche/Marche.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accueil","props","className","src","logo","alt","NavBar","buttons","map","value","index","key","onClick","callBack","fa","content","CustomerData","customers","Object","keys","customerId","paidTotal","suppliedTotal","MissedPayments","missedPayments","DayData","day","dailyLoss","PageData","days","dayIndex","defaultChange","FileInput","label","onChange","rest","style","display","type","e","target","files","multiple","Marche","_readFile","blob","a","reader","FileReader","readAsText","Promise","resolve","onload","result","_processFiles","suppliers","assign","state","file","page","_computeFile","push","setState","lines","split","Array","shift","length","currentLine","paid","supplied","Number","replace","name","price","supplierId","total","_computeMissedPayments","balance","onFileInputChange","computeResults","resetFiles","pages","toggleReset","resetRequested","resetButtons","this","concat","_getButtons","React","Component","App","useState","open","menu","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39c6ed09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snowflake.c1c98c92.svg\";","import React from \"react\";\r\nimport logo from \"../../description/snowflake.svg\";\r\nimport \"./Accueil.css\";\r\n\r\nfunction Accueil(props) {\r\n\r\n    return (\r\n        <div className=\"accueil noselect\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <p>Marché de Noël</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nfunction NavBar({ buttons=[] }) {\r\n\r\n    return (\r\n        <nav className=\"navbar\">\r\n            {buttons.map((value, index) => {\r\n                return (\r\n                    <div key={index} className={`nav-button clickable noselect ${value.className}`} onClick={value.callBack}>\r\n                        <span>{value.fa && <i className={`fa ${value.fa} inline spaced`}/>}<span className=\"inline\">{value.content}</span></span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./CustomerData.css\";\r\n\r\n/*\r\n *\r\n * customers = { clientId: { supplied , paid, total } }\r\n * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n */\r\nfunction CustomerData({ customers }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Liste Client:</h2>\r\n            {Object.keys(customers).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'cust_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>total payé: {customers[customerId].paidTotal}€</span>\r\n                        <span> | </span>\r\n                        <span>a reçu pour un total de: {customers[customerId].suppliedTotal}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerData;","import React from \"react\";\r\nimport \"./MissedPayments.css\";\r\n\r\n/*\r\n *\r\n */\r\nfunction MissedPayments({ missedPayments }) {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Paiements incorrectes:</h2>\r\n            {Object.keys(missedPayments).map(customerId => {\r\n                return (\r\n                    <div className=\"entry\" key={'missed_'+customerId}>\r\n                        <span>[client: {customerId}] - </span>\r\n                        <span>Argent Manquant: {missedPayments[customerId]}€</span>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MissedPayments;","import React from \"react\";\r\nimport \"./DayData.css\";\r\nimport CustomerData from '../CustomerData/CustomerData.js';\r\nimport MissedPayments from '../MissedPayments/MissedPayments.js';\r\n\r\n/*\r\n * Represents a single day.\r\n *\r\n */\r\nfunction DayData({ day, index }) {\r\n\r\n    return (\r\n        <div className=\"day\" key={index}>\r\n            <h1>Jour {index + 1}</h1>\r\n            <div>Perte total: {day.dailyLoss}€</div>\r\n            <CustomerData customers={day.customers}/>\r\n            <MissedPayments missedPayments={day.missedPayments}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayData;\r\n","import React from \"react\";\r\nimport \"./PageData.css\";\r\n\r\nimport DayData from '../DayData/DayData.js';\r\n\r\n/*\r\n * Represents a whole page of data for all the uploaded days.\r\n *\r\n */\r\nfunction PageData({ days }) {\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            {days.map((value, dayIndex) => {\r\n                return(<DayData day={value} key={dayIndex} index={dayIndex}/>)\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PageData;\r\n","import React from \"react\";\r\n\r\nconst defaultChange = () => {};\r\n\r\nconst FileInput = ({ value, label='Upload', onChange = defaultChange, ...rest }) => {\r\n    return (\r\n    <span>\r\n        <label>\r\n            <span className=\"clickable\">{label}</span>\r\n            <input\r\n                {...rest}\r\n                style={{ display: \"none\" }}\r\n                type=\"file\"\r\n                onChange={(e) => {\r\n                    onChange([...e.target.files]);\r\n                    e.target.value = null;\r\n                }}\r\n                multiple\r\n            />\r\n        </label>\r\n    </span>\r\n    );\r\n};\r\n\r\nexport default FileInput;\r\n","import React from 'react';\r\nimport './Marche.css';\r\n\r\nimport NavBar from '../NavBar/NavBar.js';\r\nimport PageData from '../PageData/PageData.js';\r\nimport FileInput from '../FileInput/FileInput.js';\r\n\r\nclass Marche extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            files: [],\r\n            days: [], // { customers, missedPayments }\r\n            suppliers: {}, // { supplierId : { total } }\r\n            resetRequested: false,\r\n        };\r\n    }\r\n    /**\r\n    *\r\n    * @param {blob} blob\r\n    * @return {file}\r\n    */\r\n    _readFile = async (blob) => {\r\n        const reader = new FileReader();\r\n        reader.readAsText(blob);\r\n        return new Promise((resolve) => {\r\n            reader.onload = (e) => {\r\n                resolve(reader.result);\r\n            };\r\n        });\r\n    }\r\n    _processFiles = async (files) => {\r\n        const days = [];\r\n        let suppliers = Object.assign({}, this.state.suppliers);\r\n        for (const file of files) {\r\n            const page = await this._readFile(file);\r\n            const result = this._computeFile(page, suppliers);\r\n            suppliers = result.suppliers;\r\n            days.push(result.day);\r\n        }\r\n        this.setState({ days, suppliers });\r\n    }\r\n    /**\r\n     * Expected structure of page:\r\n     *\r\n     * ,,,,,,... // row0\r\n     * numeroClient,Fournisseur,achat,numeroFournisseur,numeroClient,prix,total,... n-1, n // row x\r\n     * 600,65,objet,56,576,55,110,... n-1, n // row X+1\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * x,x,x,x,x,x,... m-1, m,... n-1, n\r\n     * . . .\r\n     * .\r\n     * .\r\n     * where:\r\n     *  x = OFFSET_HEIGHT\r\n     *  x + 1 = column names\r\n     *  m = CLIENT_COLS\r\n     *  n - m = FOURNISSEUR_COLS\r\n     *\r\n     * @param {String} page open text file\r\n     * @return {Object}\r\n     */\r\n    _computeFile = (page, suppliers) => {\r\n        const OFFSET_HEIGHT = 1; // does not include the column titles.\r\n        const lines = page.split(/\\r\\n|\\n/);\r\n        for (const i of Array(OFFSET_HEIGHT)) {\r\n            lines.shift();\r\n        }\r\n        const colNames = lines.shift().split(','); // removes and saves column titles.\r\n        /*\r\n        *\r\n        * customers = { clientId: { supplied, suppliedTotal, paid, paidTotal } }\r\n        * supplied = [ {name: 'itemName', 'price': price, 'supplierId': id } ] WHAT IS PAID\r\n        * paid = [ {name: 'itemName', 'price': price, 'supplierId': id } ]\r\n        *\r\n        * suppliers = { supplierId : { total } }\r\n        *\r\n        */\r\n        const customers = {};\r\n        while (lines.length) {\r\n            const currentLine = lines.shift().split(',');\r\n\r\n            /* DATA FILL\r\n            *   paid\r\n            *   currentLine[0] purchase - customerId\r\n            *   currentLine[1] purchase - supplierId\r\n            *   currentLine[2] purchase - item Name\r\n            *   currentLine[3] purchase - item Price\r\n            *   supplied\r\n            *   currentLine[4] payment - supplierId\r\n            *   currentLine[5] payment - customerId\r\n            *   currentLine[6] payment - item Name\r\n            *   currentLine[7] payment - item Price\r\n            */\r\n\r\n            if (currentLine[0]) {\r\n                // creates the customer if it doesn't already exist.\r\n                customers[currentLine[0]] = customers[currentLine[0]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[0]].paidTotal += Number(currentLine[3].replace(',','.'));\r\n                // adds a line for what the customer paid\r\n                customers[currentLine[0]].paid.push({\r\n                    name: currentLine[2],\r\n                    price: currentLine[3],\r\n                    supplierId: currentLine[1],\r\n                });\r\n            }\r\n\r\n            if (currentLine[4] && currentLine[5]) {\r\n                customers[currentLine[5]] = customers[currentLine[5]] || {\r\n                    paid: [],\r\n                    paidTotal: 0,\r\n                    supplied: [],\r\n                    suppliedTotal: 0,\r\n                };\r\n                // adds the total paid by the customer\r\n                customers[currentLine[5]].suppliedTotal += Number(currentLine[7].replace(',','.'));\r\n                // adds a line for what the customer recieved (not a guarantee of payment)\r\n                customers[currentLine[5]].supplied.push({\r\n                    name: currentLine[6],\r\n                    price: currentLine[7],\r\n                    supplierId: currentLine[4],\r\n                });\r\n                suppliers[currentLine[4]] = suppliers[currentLine[4]] || { total: 0 };\r\n                suppliers[currentLine[4]].total += Number(currentLine[7].replace(',','.'));\r\n            }\r\n        }\r\n        const { missedPayments, dailyLoss } = this._computeMissedPayments(customers);\r\n        return {day: { customers, missedPayments, dailyLoss }, suppliers };\r\n    }\r\n    _computeMissedPayments = (customers) => {\r\n        const missedPayments = {};\r\n        let dailyLoss = 0;\r\n        for (const customerId of Object.keys(customers)) {\r\n            const balance = customers[customerId].suppliedTotal - customers[customerId].paidTotal;\r\n            if (balance !== 0) {\r\n                missedPayments[customerId] = balance;\r\n                dailyLoss += balance;\r\n            }\r\n        }\r\n        return { missedPayments, dailyLoss };\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    _getButtons() {\r\n        let resetButtons = [{content: 'Retirer les fichiers', fa: 'fa-trash', className: 'warning', callBack: this.toggleReset}]\r\n        if (this.state.resetRequested) {\r\n            resetButtons = [\r\n                {content: 'Annuler', fa: 'fa-times', className: 'green', callBack: this.toggleReset},\r\n                {content: 'Confirmer', fa: 'fa-check', className: 'alert', callBack: this.resetFiles},\r\n            ];\r\n        }\r\n        const buttons = [\r\n            {className: 'blue', fa: 'fa-upload', content: (<FileInput label={`Ajouter | jours: ${this.state.files.length}`} className=\"noselect\" value={this.state.files} onChange={this.onFileInputChange} />)},\r\n        ].concat(resetButtons);\r\n\r\n        if (this.state.files.length) {\r\n            buttons.push({content: 'Calculer', fa: 'fa-plus', className: 'green', callBack: this.computeResults});\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    ////////////////// //////// //////////////////\r\n    ////////////////// HANDLERS //////////////////\r\n    ////////////////// //////// //////////////////\r\n\r\n    /**\r\n    * Handler for File Input onChange.\r\n    *\r\n    * @param {file[]} files\r\n    * @return {void}\r\n    */\r\n   onFileInputChange = async (files) => {\r\n        this.setState({ files: [...this.state.files, ...files]});\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    computeResults = async () => {\r\n        // add up expenses\r\n        // add up suppliers sale totals\r\n        await this._processFiles(this.state.files);\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    resetFiles = () => {\r\n        this.setState({days: [], pages: []});\r\n        this.toggleReset();\r\n    }\r\n    /**\r\n    * Brief description of the function here.\r\n    *\r\n    * @return {Object[]} [{content, className, fa, callBack}]\r\n    */\r\n    toggleReset = () => {\r\n        this.setState({ resetRequested: !this.state.resetRequested });\r\n    }\r\n    /**\r\n     * add encodage popup with button toggle\r\n     * location salle, location bancontact et frais de transaction, assurance, papetrie, timbres, courses restaurant, traiteur, schmitz\r\n     * form component with callback to change state here with new data.\r\n     *\r\n     * Add full data (all prices + price computation)\r\n     *\r\n     */\r\n    render() {\r\n        return <div>\r\n            <NavBar\r\n                buttons={this._getButtons()}\r\n            />\r\n            {!!this.state.days.length &&\r\n                <PageData days={this.state.days}/>\r\n            }\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Marche;\r\n","import React, { useState } from \"react\";\nimport Accueil from \"./components/Accueil/Accueil.js\";\nimport Marche from \"./components/Marche/Marche.js\";\nimport \"./App.css\";\n\nfunction App(props) {\n    const [state, setState] = useState({ open: false });\n\n    function toggleApp() {\n        setState({ open: !state.open });\n    }\n\n    return (\n        <div className=\"page\">\n            {state.open ? (\n                <div className=\"page\">\n                    <Marche menu=\"\"/>\n                </div>\n            ) : (\n                <div className=\"page clickable\" onClick={toggleApp}>\n                    <Accueil/>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// turn service worker off\nserviceWorker.unregister();\n"],"sourceRoot":""}